<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>空间旋转</title>
      <link href="/2023/01/15/math/kong-jian-xuan-zhuan/"/>
      <url>/2023/01/15/math/kong-jian-xuan-zhuan/</url>
      
        <content type="html"><![CDATA[<h3 id="空间旋转"><a href="#空间旋转" class="headerlink" title="空间旋转"></a>空间旋转</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在之前的一次打比赛中，由于三维空间的特征属于强特，其正样本分布在空间中的一个平面上，所以采用树模型进行分类的时候最好的办法是将数据所在三维空间进行旋转，使得三维平面统一垂直与某个坐标轴。方便树模型切分数据。</p><h4 id="平面求解"><a href="#平面求解" class="headerlink" title="平面求解"></a>平面求解</h4><p>三维空间中的平面可以用 $z &#x3D; ax+by+c$ 表示，于是m个离散点可以组成方程组 </p>$$\left|\begin{array}{ccc}x_1 & y_1 & 1 \\x_2 & y_2 & 1 \\x_3 & y_3 & 1 \\\vdots & \vdots \\x_m & y_m & 1\end{array}\right| \cdot\left|\begin{array}{ccc}a  \\b \\c  \\\end{array}\right|=\left|\begin{array}{c}a \\z_1 \\z_2 \\z_3 \\z_m\end{array}\right|$$上述方程可以表示为 $AX=b$   由于A是一个 $m \times n$的矩阵 在求逆的过程中分别乘以A的转置 $A^T$ 使得矩阵变成方阵的时候通过求逆矩阵来求解 也就是 $X = (AA^T)^{-1}A^Tb$#### 旋转矩阵设某个单位正交基$[e_1, e_2, e_3]$ 经过旋转变成了 $[e_1', e_2', e_3']$, 对于同一个向量 $\alpha$ ，向量本身没有随着坐标系旋转而运动，他在两个坐标系下的坐标为$\left(a_1, a_2, a_3\right)^T \text { 和 }\left(a_1', a_2', a_3'\right)^T$, 那么有$$\left[e_1, e_2, e_3\right]\left[\begin{array}{l}a_1 \\a_2 \\a_3\end{array}\right]=\left[e_1^{\prime}, e_2^{\prime}, e_3^{\prime}\right]\left[\begin{array}{l}a_1^{\prime} \\a_2 \\a_3^{\prime}\end{array}\right]$$$$$$$$\begin{array}{r}{\left[\begin{array}{l}a_1 \\a_2 \\a_3\end{array}\right]=\left[\begin{array}{lll}e_1^T e_1^{\prime} & e_1^T e_2^{\prime} & e_1^T e_3^{\prime} \\e_2^T e_1^{\prime} & e_2^T e_2^{\prime} & e_1^T e_3^{\prime} \\e_3^T e_1^{\prime} & e_3^T e_2^2 & e_3^T e_3^{\prime}\end{array}\right]\left[\begin{array}{l}a_1^{\prime} \\a_2^{\prime} \\a_3\end{array}\right]=R \boldsymbol{a}^{\prime}(2)} \\\end{array}$$于是令：$$R=\left[\begin{array}{ccc}e_1^T e_1^{\prime} & e_1^T e_2^{\prime} & e_1^T e_3^{\prime} \\e_2^T e_1^{\prime} & e_2^T e_2^{\prime} & e_1^T e_3^{\prime} \\e_3^T e_1^{\prime} & e_3^T e_2^{\prime} & e_3^T e_3^{\prime}\end{array}\right] \text { (3) }$$则$R$ 称为 空间变换的一个核]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo_Install_Record</title>
      <link href="/2023/01/14/cs/hexo-install-record/"/>
      <url>/2023/01/14/cs/hexo-install-record/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p> 记录一次安装过程和一些后续快速查找的博客</p><h3 id="安装npm-和Node-js"><a href="#安装npm-和Node-js" class="headerlink" title="安装npm 和Node.js"></a>安装npm 和Node.js</h3><p>略</p><p>检查是否安装成功</p><blockquote><p>node -v<br>npm -v</p></blockquote><p>添加国内镜像</p><blockquote><p>npm config set registry https:<em>&#x2F;&#x2F;registry.npm.taobao.org</em></p></blockquote><h3 id="认识Hexo"><a href="#认识Hexo" class="headerlink" title="认识Hexo"></a>认识Hexo</h3><blockquote><p>npm install -g hexo-cli<br>hexo -v</p></blockquote><p>初始化</p><blockquote><p>hexo init</p><p>npm install </p></blockquote><blockquote><p>- </p></blockquote><p>输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器</p><blockquote><p>hexo g</p><p>hexo server(s)</p></blockquote><h3 id="github-配置"><a href="#github-配置" class="headerlink" title="github 配置"></a>github 配置</h3><p>第一次使用git后需要将用户名和邮箱进行初始化</p><blockquote><p>git config –global user.name “Y…” </p><p>git config –global user.email “<a href="mailto:&#x4c;&#x40;&#120;&#120;&#x2e;&#x63;&#x6f;&#109;">&#x4c;&#x40;&#120;&#120;&#x2e;&#x63;&#x6f;&#109;</a>“</p></blockquote><p>check</p><blockquote><p>git config user.name<br>git config user.email</p></blockquote><blockquote><p>ssh-keygen -t rsa -C “L@..”  # 生成ssh</p></blockquote><p>将输出的内容添加在github的的setting 中的 SSH and GPG kes </p><blockquote><p>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p></blockquote><p>测试 为</p><blockquote><p>ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#109;</a>  # 出现用户名就ok</p></blockquote><h3 id="将hexo-部署到github"><a href="#将hexo-部署到github" class="headerlink" title="将hexo 部署到github"></a>将hexo 部署到github</h3><p>我们可以将<code>hexo</code>和<code>GitHub</code>关联起来，也就是将<code>hexo</code>生成的文章部署到<code>GitHub</code>上，打开博客根目录下的<code>_config.yml</code>文件</p><ul><li><p>安装部署使用到的git插件</p><blockquote><p>npm install hexo-deployer-git -save</p></blockquote></li><li><p>修改最后一行配置</p><blockquote><p>deploy:  </p><pre><code>type: git                          repository: https://github.com/gaoziman/gaoziman.github.io.git                          branch: master</code></pre></blockquote></li><li><p>生成 其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。 <code>hexo generate</code>顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写 ，<code>hexo deploy</code>部署文章，可以用<code>hexo d</code>缩写</p><blockquote><p>hexo clean </p><p>hexo generate </p><p>hexo deploy</p></blockquote></li></ul><h3 id="添加自定义域名"><a href="#添加自定义域名" class="headerlink" title="添加自定义域名"></a>添加自定义域名</h3><p>此处仅仅列举一些步骤，我暂时没有买域名</p><ul><li>去买域名的地方添加解析</li><li>在github中的setting 中pages中 custom domain 中添加自己的域名</li><li>github的项目根目录会出现一个CNAME的文件，如果没有的话 打开本地博客的&#x2F;source 目录， 新建<code>CNAME</code>文件，没有后缀，写上自己的域名，保存 运行hexo g， hexo d 上传github</li></ul><h3 id="写文章，发布文章"><a href="#写文章，发布文章" class="headerlink" title="写文章，发布文章"></a>写文章，发布文章</h3><p>记得安装扩展 <code>npm i hexo-deployer-git</code></p><ul><li>新建一篇文章 <code>hexo new post &quot;file_name&quot;</code></li><li>在<code>source\_posts\</code> 路径下会生成一个file_name.md 文件，但是并没有多一个文件夹（有个小bug，用typora自带的图片保存路径并不会成功显示在网页上，应该是生成网页的时候没有找到图片</li><li>hexo g | hexo s</li></ul><h3 id="hexo-进一步认识"><a href="#hexo-进一步认识" class="headerlink" title="hexo 进一步认识"></a>hexo 进一步认识</h3><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><blockquote><ul><li><code>node_modules:</code> 依赖包,各种库</li><li><code>public：</code>存放生成的页面</li><li><code>scaffolds：</code>生成文章的一些模板，有三个文件，存储这新文章和新页面的初试设置</li><li><code>source：</code>用来存放你的文章，各类页面，图像等文件<ul><li>_data</li><li>_posts  <strong>重点文件</strong></li><li>about</li><li>archives</li><li>categories</li><li>friends</li><li>tags</li></ul></li><li><code>themes：</code>主题**</li><li><code>_config.yml:</code> 博客的配置文件**</li></ul></blockquote><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><h5 id="base-config"><a href="#base-config" class="headerlink" title="base config"></a>base config</h5><p>文件根目录中的 _config.yml 就是整个hexo的配置文件 <a href="https://hexo.io/zh-cn/docs/configuration.html">参考</a></p><blockquote><p>author: 作者名</p><p>language: 语言</p><p>description：<code>description</code>主要用于<code>SEO</code>，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词</p><p>….</p><p>url：网址root根目录，也就是域名</p><p>permalink: 文章生成连接的格式</p><p>theme : 主题</p></blockquote><h5 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h5><p>是一篇文章最上方以— 分割的区域， 用于指定个别文件的变量</p><blockquote><p>title: Hexo+Github博客搭建记录 </p><p>date: 2022-05-08 15:15:44</p></blockquote><pre class="line-numbers language-none"><code class="language-none">--- title: Hexo+Github博客搭建记录 date: 2022-05-08 15:15:44 author: nameimg: &#x2F;medias&#x2F;banner&#x2F;7.jpg coverImg: &#x2F;medias&#x2F;banner&#x2F;7.jpg top: true cover: true toc: true password: 5f15b28ffe43f8be4f239bdd9b69af9d80dbafcb20a5f0df5d1677a120ae9110 mathjax: true summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 tags: - Hexo - Github - 博客 categories: - 软件安装与配置 ---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注明：分类具有顺序性和层次性，标签没有顺序和层次，标签中的 A,B 等于B,A</p><h3 id="BUGS"><a href="#BUGS" class="headerlink" title="BUGS"></a>BUGS</h3><ul><li><p>win10本来已经通过npm 安装好了hexo 然后始终 报错<code>bash: hexo: command not found</code><br>, 然后找寻解决方法是没有将node 的安装目录加入环境变量，通过以下两个命令寻找路径，</p><ul><li><p>查看node_modules的目录，执行：npm root -g</p></li><li><p>查看npm的可执行文件所在目录：npm bin -g</p><p><img src="/BlogImgs/$%7Bfiilename%7D/image-20230114081824222.png" alt="可疑记录"></p><p>于是将两个路径分别添加到path，重启cmd就能正常使用hexo</p></li></ul><p><a href="https://blog.51cto.com/u_14900374/2553812">ref1</a>, <a href="https://blog.51cto.com/u_15176340/2723817">ref2</a>, ref2 中的 npx ：npx 想要解决的主要问题，就是调用项目内部安装的模块”，所以可以理解为在命令行下调用，可以让项目内部安装的模块用起来更方便，npx运行的时候，会到node_modules&#x2F;.bin路径和环境变量$PATH里面，检查命令是否存在，所以系统命令也可以调用，即上面的命令安装不成功的时候加上npx的话也许就可以成功了</p></li><li><p>OpenSSL SSL_read: Connection was reset, errno 10054 </p><p>重新检测了一下是否能与github连接 <code>ssh git@github.com</code>,  然后查找博客将config中的网址替换为ssh</p><blockquote><p><a href="https://github.com/gaoziman/gaoziman.github.io.git">https://github.com/gaoziman/gaoziman.github.io.git</a>   这个网址不行<br>替换为 hexo config deploy.repository <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#109;</a>:[yourgitname]&#x2F;[yourgitname].github.io.git</p></blockquote></li><li><p>高亮问题</p><p>代码高亮出现极其诡异的现象 hexo matery 通过搜索查找方案如下<a href="https://www.pudn.com/news/6228dc5e9ddf223e1ad287ce.html">ref</a></p><p><img src="/BlogImgs/Hexo-Install-Record/image-20230115194720929.png" alt="image-20230115194720929"></p><p>禁用<code>highlight</code> 启用<code>prismjs</code></p><p><img src="/BlogImgs/Hexo-Install-Record/image-20230115194855418.png" alt="image-20230115194855418"></p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://juejin.cn/post/7095323643277738014">https://juejin.cn/post/7095323643277738014</a>: 这篇文章介绍的很详细，尤其是关于hexo的生态上，介绍了很多hexo的高级操作，但本人目前主要想要一个的可以简单的博客，后续的各种操作就没有借鉴了</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实还蛮简单的，因为目前我的需求并不是曝光我的网站，而只是将一些总结打包出来，所以有很多东西并没有尝试，等以后有需求一定要完善起来现将一些攻略总结如下！</p><ul><li>这篇文章对我的帮助巨巨巨大： <a href="https://juejin.cn/post/7095323643277738014">https://juejin.cn/post/7095323643277738014</a> 剩下的包括一些速度优化，评论，网站推广等一些细节等还没有尝试</li><li>matery 的官网文档 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a> 但是最重要的还是要对主题中的_config.yml 进行阅读，其中已经比较详细</li><li>在这个人写的博客中也有一些东西， 但是没有太多关注 <a href="https://developer.aliyun.com/profile/expert/z3jcatjk57fiu">https://developer.aliyun.com/profile/expert/z3jcatjk57fiu</a></li><li>这是一位大佬的博客，挺好看的，我借鉴他的博客改了一下背景，后续仍然可以参考优化 <a href="https://github.com/godweiyang/hexo-theme-sungod">https://github.com/godweiyang/hexo-theme-sungod</a> 展示<a href="https://godweiyang.com/">地址</a></li><li>是个大佬，但是没有仔细膜拜，他的页面很简洁，挺好看 <a href="https://www.cnblogs.com/all-smile/p/16608503.html#hexo%E4%B8%BB%E9%A2%98">https://www.cnblogs.com/all-smile/p/16608503.html#hexo%E4%B8%BB%E9%A2%98</a></li><li>HEXO 官方文档</li><li>还有一些是背景图，进度条，top按钮等的颜色 <a href="https://blog.csdn.net/cungudafa/article/details/106278206">ref1</a>, <a href="https://thecara.github.io/2020/07/19/hexo-theme-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/">ref2</a></li><li>往Hexo 加入PDF <a href="https://zhuanlan.zhihu.com/p/550626417">https://zhuanlan.zhihu.com/p/550626417</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 安装记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后处理之优化结果</title>
      <link href="/2023/01/07/competition/hou-chu-li-zhi-you-hua-jie-guo/"/>
      <url>/2023/01/07/competition/hou-chu-li-zhi-you-hua-jie-guo/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在打一些比赛的时候，会遇到一些对阈值很敏感的评价指标，比如$f1$ ,或者是在一些回归任务中，需要对模型得到结果进一步处理，使结果能相对于处理前能提升一些分数。而这些会往往会涉及到对一些阈值参数的选取，例如，当使用 $f1$ 当做评价指标的时候往往会因为阈值的选取的不同，划分正负样本的不一样而导致结果往往相差很多</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>一句话总结，就是将待选取的参数视为未知参数，用优化算法得到使评价指标最 大&#x2F;小 化的参数</strong></p><p>假设一个任务是二分类，我们的模型在验证集 (validation dataset) 上预测了一个结果 $y_{pred}$ , 我们的评价指标为 $G$函数，而我们将模型进行后处理的函数为 $H(y_{pred}, \alpha_1, \alpha_2,…)$, 其中$\alpha_1, \alpha_2,…$是待确定的参数，则最后的由评价函数得到的评价结果 $Result &#x3D; G(H(y_{pred}, \alpha_1, \alpha_2,…), y_{true})$,我们将整体视为一个目标函数，使用优化算法去得到使得结果最好的$\alpha_1, \alpha_2,…$，当我们在验证集计算得到最好的参数，我们则可以将其用于测试集。在这里H函数不一定是一个可导的函数。并且<strong>有一定过拟合风险</strong></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><p>我们的模型预测的结果是连续的数值 $[0, 5]$，但是我们评价指标要求我们最后的结果必须是整数 ${0,1,2,3,4}$,这个时候应该选取怎样的阈值，将哪个区间的划分为1，哪个区间划分为2？ 直觉上可以会将模型得到的结果属于 $[0.5, 1.5]$的数值划分为1，但是由于模型的特殊性，由这个模型得到的这个预测结果使用这个划分区间不是最优解，于是我们可以把这些划分区间的阈值假设为$\alpha_1, \alpha_2,…$， 则$[0, \alpha_1]$ 划分为0，$[\alpha_1, \alpha_2] $划分为1…</p><p>代码:</p><p><strong>定义优化函数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> scipy <span class="token keyword">as</span> sp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Result</span><span class="token punctuation">(</span>coef<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># coef 就是置信度，也就是 上述的 α集合，该函数定义了我们的评价结果 Results</span>        <span class="token comment"># --------------- H 函数 -------------------#</span>    H <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>y_pred<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> pred <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            H<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            H<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            H<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            H<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            H<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>    <span class="token comment"># --------------- H 函数 -------------------#  </span>                ll <span class="token operator">=</span> G<span class="token punctuation">(</span>H<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span> <span class="token comment"># 其中G就是我们的评价指标</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ll  <span class="token comment"># 如果我们想要取到最大值，我们需要取负变成求最小值，反之不用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>得到最优参数</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span><span class="token punctuation">:</span>       loss_partial <span class="token operator">=</span> partial<span class="token punctuation">(</span>Result<span class="token punctuation">,</span> y_pred<span class="token operator">=</span>y_pred<span class="token punctuation">,</span> y_true<span class="token operator">=</span>y_true<span class="token punctuation">)</span> <span class="token comment"># Python 内置函数，将参数内置在函数中，方便后续处理</span>       initial_coef <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">]</span> <span class="token comment"># 初始化</span>       coef_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss_partial<span class="token punctuation">,</span> initial_coef<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'nelder-mead'</span><span class="token punctuation">)</span> <span class="token comment"># 优化方法，最后得到就是我们的最优边界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><p>$f1_score$的优化，对于分类模型，往往需要确定一个比较好的阈值来划分不同类别的样本，于是设定不同的阈值就变成了一种艺术，假设我们的模型在验证集上的输出结果  $ y_{pred}$的形状是 $[n,n_classs]$, $n$ 是样本数，$n_class$是 类别数，于是我们可以设置一个权重系数$coff$，形状为 $[1, n_class]$ 初始化为 $[0.5, 0.5,…]$ ,于是我们的$H$ 函数就可以表示为 $H(y_pred, coff) &#x3D;np.argmax(y_{pred}*coff)$</p><p>代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Result</span><span class="token punctuation">(</span>coef<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># coef 就是置信度，也就是 上述的 α集合，该函数定义了我们的评价结果 Results</span>        <span class="token comment"># --------------- H 函数 -------------------#</span>    H <span class="token operator">=</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_pred<span class="token operator">*</span>coff<span class="token punctuation">)</span>    <span class="token comment"># --------------- H 函数 -------------------#  </span>         ll <span class="token operator">=</span> f1_score<span class="token punctuation">(</span>H<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span> <span class="token comment"># 其中G就是我们的评价指标</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ll  <span class="token comment"># 如果我们想要取到最大值，我们需要取负变成求最小值，反之不用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span><span class="token punctuation">:</span>    loss_partial <span class="token operator">=</span> partial<span class="token punctuation">(</span>Result<span class="token punctuation">,</span> y_pred<span class="token operator">=</span>y_pred<span class="token punctuation">,</span> y_true<span class="token operator">=</span>y_true<span class="token punctuation">)</span> <span class="token comment"># Python 内置函数，将参数内置在函数中，方便后续处理</span>    initial_coef <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 初始化</span>    coef_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss_partial<span class="token punctuation">,</span> initial_coef<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'nelder-mead'</span><span class="token punctuation">)</span> <span class="token comment"># 优化方法，最后得到就是我们的最优权重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>改方法主要是针对数据进行后处理，在某一些比赛可能取的奇效</li><li>该方法简单实用，并且在后处理过程中 $H$ 函数不一定非要连续或者可导函数</li><li>该方法有一定可能性<strong>导致过拟合</strong>，因为验证集并不能代表测试集，只能在一定程度上有用</li><li>由于该方法依赖传统优化算法，<strong>所以可能存在陷入极小值的局限性</strong>，不过可以多试试不同的优化算法，经过测试，<code>&#39;Nelder-Mead&#39;,&#39;Powell&#39;,&#39;CG&#39;,&#39;BFGS&#39;,&#39;L-BFGS-B&#39;,&#39;TNC&#39;,&#39;COBYLA&#39;,&#39;SLSQP&#39;,&#39;trust-constr&#39;</code> 这些优化算法中<code>Nelder-Mead&#39;,&#39;Powell&#39;,&#39;COBYLA&#39;</code> 在随机数据上能克服陷入极小值的可能性，但是在实际比赛数据中还没有做过具体的测试。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 比赛相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wandb</title>
      <link href="/2023/01/03/dlandml/wandb/"/>
      <url>/2023/01/03/dlandml/wandb/</url>
      
        <content type="html"><![CDATA[<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h5 id="记录曲线"><a href="#记录曲线" class="headerlink" title="记录曲线"></a>记录曲线</h5><ul><li><p>初始化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> wandbwandb<span class="token punctuation">.</span>init<span class="token punctuation">(</span>config<span class="token operator">=</span>args<span class="token punctuation">,</span>           project<span class="token operator">=</span>args<span class="token punctuation">.</span>project_name<span class="token punctuation">,</span><span class="token comment"># 指定project</span>           <span class="token comment"># entity=args.team_name,# 指定team 这个最好不要有，如果没有新建teamname会报错</span>           notes<span class="token operator">=</span><span class="token string">'private'</span><span class="token punctuation">,</span>           name<span class="token operator">=</span>args<span class="token punctuation">.</span>exp_name<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>seed<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment"># 实验名字</span>           group<span class="token operator">=</span>args<span class="token punctuation">.</span>group_name<span class="token punctuation">,</span>  <span class="token comment"># 可以用来五折的时候做</span>           <span class="token builtin">dir</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>run_dir<span class="token punctuation">)</span><span class="token punctuation">,</span>           job_type<span class="token operator">=</span><span class="token string">'training'</span><span class="token punctuation">,</span>           reinit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>需要注意的是group 和 job type 的等级 可以互相调换</p><ul><li><p>记录值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">wandb<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"log_random"</span><span class="token punctuation">:</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token string">"log_math"</span><span class="token punctuation">:</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> step<span class="token operator">=</span>step<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>此处是一个字典可以带很多值，一个值一个图</p><ul><li><p>结束</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">wandb<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="记录图片-x2F-video-x2F-matplotlib"><a href="#记录图片-x2F-video-x2F-matplotlib" class="headerlink" title="记录图片&#x2F;video&#x2F;matplotlib"></a>记录图片&#x2F;video&#x2F;matplotlib</h5><ul><li><p>存储</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"PongNoFrameskip-v4"</span><span class="token punctuation">)</span>env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> step <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        obs<span class="token punctuation">,</span> r<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wandb<span class="token punctuation">.</span>Image<span class="token punctuation">(</span>obs<span class="token punctuation">,</span> caption<span class="token operator">=</span><span class="token string">"Pong_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        wandb<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'frames'</span><span class="token punctuation">:</span>frames<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> step<span class="token operator">=</span>step<span class="token punctuation">)</span> <span class="token comment"># 可以看到存储图片可以是一个list，这个list存储的是</span>        <span class="token keyword">if</span> done<span class="token punctuation">:</span>            env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>wandb<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"PongNoFrameskip-v4"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> episode <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>     done <span class="token operator">=</span> <span class="token boolean">False</span>     frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token keyword">while</span> <span class="token keyword">not</span> done<span class="token punctuation">:</span>         <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             obs<span class="token punctuation">,</span>r<span class="token punctuation">,</span>done<span class="token punctuation">,</span>_<span class="token operator">=</span>env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> done<span class="token punctuation">:</span>                 <span class="token keyword">break</span>         frames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>     sequence <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>frames<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># time, channels, height, width 将一个vedio 打包成一个序列用wandb的格式存储</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>sequence<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>     video <span class="token operator">=</span> wandb<span class="token punctuation">.</span>Video<span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> fps<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">"gif"</span><span class="token punctuation">,</span>caption<span class="token operator">=</span><span class="token string">"Pong"</span><span class="token punctuation">)</span>     wandb<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"video"</span><span class="token punctuation">:</span> video<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>step<span class="token operator">=</span>episode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">for</span> step <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    frames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    y <span class="token operator">=</span> step <span class="token operator">*</span> x <span class="token operator">+</span> step    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Matplotlib Demo"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"x axis caption"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"y axis caption"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment"># 同理将plot 的图返回用wandb格式存储</span>    wandb<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"plt"</span><span class="token punctuation">:</span>wandb<span class="token punctuation">.</span>Plotly<span class="token punctuation">(</span>plt<span class="token punctuation">.</span>gcf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>step<span class="token operator">=</span>step<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">,</span> <span class="token string">"Score"</span><span class="token punctuation">]</span>  data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"ZhuZhu"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"MaoMao"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>table <span class="token operator">=</span> wandb<span class="token punctuation">.</span>Table<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">)</span>wandb<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"table"</span><span class="token punctuation">:</span> table<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>wandb<span class="token punctuation">.</span>finish<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 他的表格只能组织成这个样子，有点奇怪了，但是还能接受，表格中的元素可以是图，也可以是表格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="参数调整"><a href="#参数调整" class="headerlink" title="参数调整"></a>参数调整</h3>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas</title>
      <link href="/2022/12/20/cs/pandas/"/>
      <url>/2022/12/20/cs/pandas/</url>
      
        <content type="html"><![CDATA[<blockquote><p>df[‘WKD_TYP_CD’].map({‘WN’:0,’SN’: 1, ‘NH’: 1, ‘SS’: 1, ‘WS’: 0}) 和apply相似</p></blockquote><blockquote><p>.groupby([‘date’,’post_id’],sort&#x3D;False).agg(‘sum’)</p></blockquote><blockquote><p>pd.date_range(“1&#x2F;2018”, periods&#x3D;len(group_year_month_B[‘amount’].values)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas</title>
      <link href="/2022/12/20/dlandml/pandas/"/>
      <url>/2022/12/20/dlandml/pandas/</url>
      
        <content type="html"><![CDATA[<blockquote><p>df[‘WKD_TYP_CD’].map({‘WN’:0,’SN’: 1, ‘NH’: 1, ‘SS’: 1, ‘WS’: 0}) 和apply相似</p></blockquote><blockquote><p>.groupby([‘date’,’post_id’],sort&#x3D;False).agg(‘sum’)</p></blockquote><blockquote><p>pd.date_range(“1&#x2F;2018”, periods&#x3D;len(group_year_month_B[‘amount’].values)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TF_IDF</title>
      <link href="/2022/12/20/dlandml/tf-idf/"/>
      <url>/2022/12/20/dlandml/tf-idf/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><hr><p><strong>Term Frequency-Inverse Document Frequency</strong> 词频和逆文件频率，字词的重要性随着他在文件中出现的次数成正比，同时会随着它在语料中的频率成反比，<strong>一个词语在一篇文章中出现次数越多，同时在所有的文档中出现次数越少，越能代表该文章</strong></p><h4 id="TF"><a href="#TF" class="headerlink" title="TF"></a>TF</h4><p>表示词条在文本中出现的频率， 一般是词频除以文章众数，$T F_{i, j}&#x3D;\frac{n_{i, j}}{\sum_k n_{k, j}}$ 其中 $n_{i,j}$ 表示 词$t_i$在文档文档d中出现的次数， $TF_{i,j}$ 表示词条$t_i$ 在文档$d_j$ 中出现的频率</p><h4 id="IDF"><a href="#IDF" class="headerlink" title="IDF"></a>IDF</h4><p>表示关键词的普遍程度，包含词条i的文档越少， IDF越大，说明改词条具有很好的类别区分能力，对于某一特定的词语的IDF，可以由总文件数据除以包含该词语之文件的数据，再将得到的商取对数<br>$I D F_i&#x3D;\log \frac{|D|}{1+\left|j: t_i \in d_j\right|}$, $|D|$ 表示所有文档的数量 $|j: t_i \in d_j|$ 表示包含词条$t_i$ 的文档数量</p><h4 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h4><p>对于某个词，如果在一定的文件内高频，而在整个文件中呈现低频， 可以产生更高权重的TF-IDF ，TF-IDF 倾向于过滤常见的语句，保留重要的词语， 表达为 $TF-IDF&#x3D;TF \times IDF$</p><p>个人思考：对于同一个词，他的TF在不同的语料中是不一样的，而IDF是一样的，所以同一词的TF-IDF 在不同的预料中是不一样的</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><hr>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>logging</title>
      <link href="/2022/10/18/cs/logging/"/>
      <url>/2022/10/18/cs/logging/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>本文摘自于<a href="https://www.cnblogs.com/yyds/p/6901864.html">博客</a>，仅供自己学习使用</p><h5 id="程序的日志包括等级"><a href="#程序的日志包括等级" class="headerlink" title="程序的日志包括等级"></a>程序的日志包括等级</h5><ul><li>debug</li><li>info</li><li>notice</li><li>warning</li><li>error</li><li>critical</li><li>alert</li><li>emergency</li></ul><h5 id="日志字段信息与日志格式"><a href="#日志字段信息与日志格式" class="headerlink" title="日志字段信息与日志格式"></a>日志字段信息与日志格式</h5><ul><li>事件发生时间</li><li>事件发生位置</li><li>事件发生的严重程度</li><li>事件的内容</li></ul><h4 id="logging-详细介绍"><a href="#logging-详细介绍" class="headerlink" title="logging 详细介绍"></a>logging 详细介绍</h4><h5 id="logging-模块的日志级别"><a href="#logging-模块的日志级别" class="headerlink" title="logging 模块的日志级别"></a>logging 模块的日志级别</h5><p>默认定义的几个日志等级，允许开发人员自定义其他日志等级</p><table><thead><tr><th>日志等级（level）</th><th>描述</th></tr></thead><tbody><tr><td>DEBUG</td><td>最详细的日志信息，典型应用场景是 问题诊断</td></tr><tr><td>INFO</td><td>信息详细程度仅次于DEBUG，通常只记录关键节点信息，用于确认一切都是按照我们预期的那样进行工作</td></tr><tr><td>WARNING</td><td>当某些不期望的事情发生时记录的信息（如，磁盘可用空间较低），但是此时应用程序还是正常运行的</td></tr><tr><td>ERROR</td><td>由于一个更严重的问题导致某些功能不能正常运行时记录的信息</td></tr><tr><td>CRITICAL</td><td>当发生严重错误，导致应用程序不能继续运行时记录的信息</td></tr></tbody></table><p>开发应用程序或部署开发环境时，可以使用DEBUG或INFO级别的日志获取尽可能详细的日志信息来进行开发或部署调试；应用上线或部署生产环境时，应该使用WARNING或ERROR或CRITICAL级别的日志来降低机器的I&#x2F;O压力和提高获取错误日志信息的效率。日志级别的指定通常都是在应用程序的配置文件中进行指定的。</p><blockquote><ul><li>上面列表中的日志等级是从上到下依次升高的，即：DEBUG &lt; INFO &lt; WARNING &lt; ERROR &lt; CRITICAL，而日志的信息量是依次减少的；</li><li>当为某个应用程序指定一个日志级别后，应用程序会记录所有日志级别大于或等于指定日志级别的日志信息，而不是仅仅记录指定级别的日志信息，nginx、php等应用程序以及这里要提高的python的logging模块都是这样的。同样，logging模块也可以指定日志记录器的日志级别，只有级别大于或等于该指定日志级别的日志记录才会被输出，小于该等级的日志记录将会被丢弃。</li></ul></blockquote><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>logging模块提供了两种记录日志的方式：</p><ul><li>第一种方式是使用logging提供的模块级别的函数</li><li>第二种方式是使用Logging日志系统的四大组件</li></ul><p><strong>logging模块定义的模块级别的常用函数</strong></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>logging.debug(msg, *args, **kwargs)</td><td>创建一条严重级别为DEBUG的日志记录</td></tr><tr><td>logging.info(msg, *args, **kwargs)</td><td>创建一条严重级别为INFO的日志记录</td></tr><tr><td>logging.warning(msg, *args, **kwargs)</td><td>创建一条严重级别为WARNING的日志记录</td></tr><tr><td>logging.error(msg, *args, **kwargs)</td><td>创建一条严重级别为ERROR的日志记录</td></tr><tr><td>logging.critical(msg, *args, **kwargs)</td><td>创建一条严重级别为CRITICAL的日志记录</td></tr><tr><td>logging.log(level, *args, **kwargs)</td><td>创建一条严重级别为level的日志记录</td></tr><tr><td>logging.basicConfig(**kwargs)</td><td>对root logger进行一次性配置</td></tr></tbody></table><p>其中<code>logging.basicConfig(**kwargs)</code>函数用于指定“要记录的日志级别”、“日志格式”、“日志输出位置”、“日志文件的打开模式”等信息，其他几个都是用于记录各个级别日志的函数。</p><p><strong>logging模块的四大组件</strong></p><table><thead><tr><th>组件</th><th>说明</th></tr></thead><tbody><tr><td>loggers</td><td>提供应用程序代码直接使用的接口</td></tr><tr><td>handlers</td><td>用于将日志记录发送到指定的目的位置</td></tr><tr><td>filters</td><td>提供更细粒度的日志过滤功能，用于决定哪些日志记录将会被输出（其它的日志记录将会被忽略）</td></tr><tr><td>formatters</td><td>用于控制日志信息的最终输出格式</td></tr></tbody></table><blockquote><p><em><strong>说明：</strong></em> logging模块提供的模块级别的那些函数实际上也是通过这几个组件的相关实现类来记录日志的，只是在创建这些类的实例时设置了一些默认值</p></blockquote><h4 id="详细例子"><a href="#详细例子" class="headerlink" title="详细例子"></a>详细例子</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"This is a debug log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"This is a info log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"This is a warning log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"This is a error log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">"This is a critical log."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">logging<span class="token punctuation">.</span>log<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token string">"This is a debug log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>log<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> <span class="token string">"This is a info log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>log<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>WARNING<span class="token punctuation">,</span> <span class="token string">"This is a warning log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>log<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">,</span> <span class="token string">"This is a error log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>log<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">,</span> <span class="token string">"This is a critical log."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出只有后面三条</p><blockquote><p>WARNING:root:This is a warning log.<br>ERROR:root:This is a error log.<br>CRITICAL:root:This is a critical log.</p></blockquote><p>注明：</p><ol><li><p>因为日志级别是<code>warning</code> 只有级别大于等于warning的才会被输出，小于的被丢弃</p></li><li><p>输出字段表示：日志级别：日志器名称：日志内容</p></li><li><p>这么输出是因为logging 提供的日志记录函数中默认的格式是BASIC_FORMAT,其值为</p></li></ol><blockquote><p>“%(levelname)s:%(name)s:%(message)s”</p></blockquote><ol start="4"><li>在logging 模块中提供的日志记录的日志器设置所指定的日志输出位置为 <code>sys.stderr</code></li><li>这些配置都会调用 logging.basicConfig(**kwargs), 想要修改这些配置，需要手动调用一下basicconfig方法，将想要设置的内容以参数的形式传递进去</li></ol><h5 id="logging-basiconfig-基本配置函数"><a href="#logging-basiconfig-基本配置函数" class="headerlink" title="logging.basiconfig() 基本配置函数"></a>logging.basiconfig() 基本配置函数</h5><table><thead><tr><th>filename</th><th>指定日志输出目标文件的文件名，指定该设置项后日志信心就不会被输出到控制台了</th></tr></thead><tbody><tr><td>filemode</td><td>指定日志文件的打开模式，默认为’a’。需要注意的是，该选项要在filename指定时才有效</td></tr><tr><td>format</td><td>指定日志格式字符串，即指定日志输出时所包含的字段信息以及它们的顺序。logging模块定义的格式字段下面会列出。</td></tr><tr><td>datefmt</td><td>指定日期&#x2F;时间格式。需要注意的是，该选项要在format中包含时间字段%(asctime)s时才有效</td></tr><tr><td>level</td><td>指定日志器的日志级别</td></tr><tr><td>stream</td><td>指定日志输出目标stream，如sys.stdout、sys.stderr以及网络stream。需要说明的是，stream和filename不能同时提供，否则会引发 <code>ValueError</code>异常</td></tr><tr><td>style</td><td>Python 3.2中新添加的配置项。指定format格式字符串的风格，可取值为’%’、’{‘和’$’，默认为’%’</td></tr><tr><td>handlers</td><td>Python 3.3中新添加的配置项。该选项如果被指定，它应该是一个创建了多个Handler的可迭代对象，这些handler将会被添加到root logger。需要说明的是：filename、stream和handlers这三个配置项只能有一个存在，不能同时出现2个或3个，否则会引发ValueError异常。</td></tr></tbody></table><h5 id="logging-模块定义的格式字符串段"><a href="#logging-模块定义的格式字符串段" class="headerlink" title="logging 模块定义的格式字符串段"></a>logging 模块定义的格式字符串段</h5><table><thead><tr><th>字段&#x2F;属性名称</th><th>使用格式</th><th>描述</th></tr></thead><tbody><tr><td>asctime</td><td>%(asctime)s</td><td>日志事件发生的时间–人类可读时间，如：2003-07-08 16:49:45,896</td></tr><tr><td>created</td><td>%(created)f</td><td>日志事件发生的时间–时间戳，就是当时调用time.time()函数返回的值</td></tr><tr><td>relativeCreated</td><td>%(relativeCreated)d</td><td>日志事件发生的时间相对于logging模块加载时间的相对毫秒数（目前还不知道干嘛用的）</td></tr><tr><td>msecs</td><td>%(msecs)d</td><td>日志事件发生事件的毫秒部分</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>该日志记录的文字形式的日志级别（’DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’）</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>该日志记录的数字形式的日志级别（10, 20, 30, 40, 50）</td></tr><tr><td>name</td><td>%(name)s</td><td>所使用的日志器名称，默认是’root’，因为默认使用的是 rootLogger</td></tr><tr><td>message</td><td>%(message)s</td><td>日志记录的文本内容，通过 <code>msg % args</code>计算得到的</td></tr><tr><td>pathname</td><td>%(pathname)s</td><td>调用日志记录函数的源码文件的全路径</td></tr><tr><td>filename</td><td>%(filename)s</td><td>pathname的文件名部分，包含文件后缀</td></tr><tr><td>module</td><td>%(module)s</td><td>filename的名称部分，不包含后缀</td></tr><tr><td>lineno</td><td>%(lineno)d</td><td>调用日志记录函数的源代码所在的行号</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>调用日志记录函数的函数名</td></tr><tr><td>process</td><td>%(process)d</td><td>进程ID</td></tr><tr><td>processName</td><td>%(processName)s</td><td>进程名称，Python 3.1新增</td></tr><tr><td>thread</td><td>%(thread)d</td><td>线程ID</td></tr><tr><td>threadName</td><td>%(thread)s</td><td>线程名称</td></tr></tbody></table><h5 id="同时输出到文件和日志"><a href="#同时输出到文件和日志" class="headerlink" title="同时输出到文件和日志"></a>同时输出到文件和日志</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logginglogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>  <span class="token comment"># 不加名称设置root logger</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>    <span class="token string">'%(asctime)s - %(name)s - %(levelname)s: - %(message)s'</span><span class="token punctuation">,</span>    datefmt<span class="token operator">=</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token comment"># 使用FileHandler输出到文件</span>fh <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span><span class="token string">'log.txt'</span><span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>fh<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token comment"># 使用StreamHandler输出到屏幕</span>ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token comment"># 添加两个Handler</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>fh<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'this is info message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'this is warn message'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h5><ul><li>基本配置</li></ul><blockquote><p>logging.basicConfig(level&#x3D;logging.DEBUG) 配置级别</p></blockquote><ul><li>设置输出日志</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOG_FORMAT <span class="token operator">=</span> <span class="token string">"%(asctime)s - %(levelname)s - %(message)s"</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'my.log'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span>LOG_FORMAT<span class="token punctuation">)</span>logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"This is a debug log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"This is a info log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"This is a warning log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"This is a error log."</span><span class="token punctuation">)</span>logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">"This is a critical log."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置日期时间格式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOG_FORMAT <span class="token operator">=</span> <span class="token string">"%(asctime)s - %(levelname)s - %(message)s"</span>DATE_FORMAT <span class="token operator">=</span> <span class="token string">"%m/%d/%Y %H:%M:%S %p"</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'my.log'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span>LOG_FORMAT<span class="token punctuation">,</span> datefmt<span class="token operator">=</span>DATE_FORMAT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>logging.basicConfig()</code>函数是一个一次性的简单配置工具使，也就是说只有在第一次调用该函数时会起作用，后续再次调用该函数时完全不会产生任何操作的，多次调用的设置并不是累加操作</p></li><li><p>可使用一个格式字符串作为这个事件的描述消息（logging.debug、logging.info等函数的第一个参数），然后将变量数据作为第二个参数*args的值进行传递，如:<code>logging.warning(&#39;%s is %d years old.&#39;, &#39;Tom&#39;, 10)</code>，输出内容为<code>WARNING:root:Tom is 10 years old.</code></p></li><li><p>logging.debug(), logging.info()等方法的定义中，除了msg和args参数外，还有一个**kwargs参数。它们支持3个关键字参数: <code>exc_info, stack_info, extra</code>，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOG_FORMAT <span class="token operator">=</span> <span class="token string">"%(asctime)s - %(levelname)s - %(user)s[%(ip)s] - %(message)s"</span>DATE_FORMAT <span class="token operator">=</span> <span class="token string">"%m/%d/%Y %H:%M:%S %p"</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token operator">=</span>LOG_FORMAT<span class="token punctuation">,</span> datefmt<span class="token operator">=</span>DATE_FORMAT<span class="token punctuation">)</span>logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"Some one delete the log file."</span><span class="token punctuation">,</span> exc_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stack_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> extra<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'ip'</span><span class="token punctuation">:</span><span class="token string">'47.98.53.222'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果将会</p><blockquote><p>05&#x2F;08&#x2F;2017 16:35:00 PM - WARNING - Tom[47.98.53.222] - Some one delete the log file.</p></blockquote></li></ul><h4 id="logging模块日志流处理流程"><a href="#logging模块日志流处理流程" class="headerlink" title="logging模块日志流处理流程"></a>logging模块日志流处理流程</h4><h5 id="logging日志模块四大组件"><a href="#logging日志模块四大组件" class="headerlink" title="logging日志模块四大组件"></a>logging日志模块四大组件</h5><table><thead><tr><th>组件名称</th><th>对应类名</th><th>功能描述</th></tr></thead><tbody><tr><td>日志器</td><td>Logger</td><td>提供了应用程序可一直使用的接口</td></tr><tr><td>处理器</td><td>Handler</td><td>将logger创建的日志记录发送到合适的目的输出</td></tr><tr><td>过滤器</td><td>Filter</td><td>提供了更细粒度的控制工具来决定输出哪条日志记录，丢弃哪条日志记录</td></tr><tr><td>格式器</td><td>Formatter</td><td>决定日志记录的最终输出格式</td></tr></tbody></table><ul><li>日志器（logger）需要通过处理器（handler）将日志信息输出到目标位置，如：文件、sys.stdout、网络等；</li><li>不同的处理器（handler）可以将日志输出到不同的位置；</li><li>日志器（logger）可以设置多个处理器（handler）将同一条日志记录输出到不同的位置；</li><li>每个处理器（handler）都可以设置自己的过滤器（filter）实现日志过滤，从而只保留感兴趣的日志；</li><li>每个处理器（handler）都可以设置自己的格式器（formatter）实现同一条日志以不同的格式输出到不同的地方。</li></ul><p>日志器（logger）是入口，真正干活儿的是处理器（handler），处理器（handler）还可以通过过滤器（filter）和格式器（formatter）对要输出的日志内容做过滤和格式化等处理操作</p><h5 id="常用使用介绍"><a href="#常用使用介绍" class="headerlink" title="常用使用介绍"></a>常用使用介绍</h5><p>Logger, Handler, Filter, Formatter。</p><h6 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h6><p>对象有3个任务要做：</p><ul><li>1）向应用程序代码暴露几个方法，使应用程序可以在运行时记录日志消息；</li><li>2）基于日志严重等级（默认的过滤设施）或filter对象来决定要对哪些日志进行后续处理；</li><li>3）将日志消息传送给所有感兴趣的日志handlers。</li></ul><p>Logger对象最常用的方法分为两类：配置方法 和 消息发送方法</p><p>最常用的配置方法如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Logger.setLevel()</td><td>设置日志器将会处理的日志消息的最低严重级别</td></tr><tr><td>Logger.addHandler() 和 Logger.removeHandler()</td><td>为该logger对象添加 和 移除一个handler对象</td></tr><tr><td>Logger.addFilter() 和 Logger.removeFilter()</td><td>为该logger对象添加 和 移除一个filter对象</td></tr></tbody></table><blockquote><p><em><strong>关于Logger.setLevel()方法的说明：</strong></em></p><p>内建等级中，级别最低的是DEBUG，级别最高的是CRITICAL。例如setLevel(logging.INFO)，此时函数参数为INFO，那么该logger将只会处理INFO、WARNING、ERROR和CRITICAL级别的日志，而DEBUG级别的消息将会被忽略&#x2F;丢弃</p></blockquote><p>logger对象配置完成后，可以使用下面的方法来创建日志记录：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Logger.debug(), Logger.info(), Logger.warning(), Logger.error(), Logger.critical()</td><td>创建一个与它们的方法名对应等级的日志记录</td></tr><tr><td>Logger.exception()</td><td>创建一个类似于Logger.error()的日志消息</td></tr><tr><td>Logger.log()</td><td>需要获取一个明确的日志level参数来创建一个日志记录</td></tr></tbody></table><blockquote><p><em><strong>说明：</strong></em></p><ul><li>Logger.exception()与Logger.error()的区别在于：Logger.exception()将会输出堆栈追踪信息，另外通常只是在一个exception handler中调用该方法。</li><li>Logger.log()与Logger.debug()、Logger.info()等方法相比，虽然需要多传一个level参数，显得不是那么方便，但是当需要记录自定义level的日志时还是需要该方法来完成。</li></ul></blockquote><p>得到一个Logger对象:</p><p>一种方式是通过Logger类的实例化方法创建一个Logger类的实例，</p><p>但是我们通常都是用第二种方式  –logging.getLogger()方法。</p><p>logging.getLogger()方法有一个可选参数name，该参数表示将要返回的日志器的名称标识，如果不提供该参数，则其值为’root’。若以相同的name参数值多次调用getLogger()方法，将会返回指向同一个logger对象的引用</p><blockquote><p><em><strong>关于logger的层级结构与有效等级的说明：</strong></em></p><ul><li>logger的名称是一个以’.’分割的层级结构，每个’.’后面的logger都是’.’前面的logger的children，例如，有一个名称为 foo 的logger，其它名称分别为 foo.bar, foo.bar.baz 和 foo.bam都是 foo 的后代。</li><li>logger有一个”有效等级（effective level）”的概念。如果一个logger上没有被明确设置一个level，那么该logger就是使用它parent的level;如果它的parent也没有明确设置level则继续向上查找parent的parent的有效level，依次类推，直到找到个一个明确设置了level的祖先为止。需要说明的是，root logger总是会有一个明确的level设置（默认为 WARNING）。当决定是否去处理一个已发生的事件时，logger的有效等级将会被用来决定是否将该事件传递给该logger的handlers进行处理。</li><li>child loggers在完成对日志消息的处理后，默认会将日志消息传递给与它们的祖先loggers相关的handlers。因此，我们不必为一个应用程序中所使用的所有loggers定义和配置handlers，只需要为一个顶层的logger配置handlers，然后按照需要创建child loggers就可足够了。我们也可以通过将一个logger的propagate属性设置为False来关闭这种传递机制。</li></ul></blockquote><h6 id="Handler类"><a href="#Handler类" class="headerlink" title="Handler类"></a>Handler类</h6><p>Handler对象的作用是（基于日志消息的level）将消息分发到handler指定的位置（文件、网络、邮件等）。Logger对象可以通过addHandler()方法为自己添加0个或者更多个handler对象。比如，一个应用程序可能想要实现以下几个日志需求：</p><ul><li>1）把所有日志都发送到一个日志文件中；</li><li>2）把所有严重级别大于等于error的日志发送到stdout（标准输出）；</li><li>3）把所有严重级别为critical的日志发送到一个email邮件地址。<br>这种场景就需要3个不同的handlers，每个handler复杂发送一个特定严重级别的日志到一个特定的位置。</li></ul><p>一个handler中只有非常少数的方法是需要应用开发人员去关心的。对于使用内建handler对象的应用开发人员来说，似乎唯一相关的handler方法就是下面这几个配置方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Handler.setLevel()</td><td>设置handler将会处理的日志消息的最低严重级别</td></tr><tr><td>Handler.setFormatter()</td><td>为handler设置一个格式器对象</td></tr><tr><td>Handler.addFilter() 和 Handler.removeFilter()</td><td>为handler添加 和 删除一个过滤器对象</td></tr></tbody></table><p>应用程序代码不应该直接实例化和使用Handler实例。因为Handler是一个基类，它只定义了素有handlers都应该有的接口，同时提供了一些子类可以直接使用或覆盖的默认行为。下面是一些常用的Handler</p><table><thead><tr><th>Handler</th><th>描述</th></tr></thead><tbody><tr><td>logging.StreamHandler</td><td>将日志消息发送到输出到Stream，如std.out, std.err或任何file-like对象。</td></tr><tr><td>logging.FileHandler</td><td>将日志消息发送到磁盘文件，默认情况下文件大小会无限增长</td></tr><tr><td>logging.handlers.RotatingFileHandler</td><td>将日志消息发送到磁盘文件，并支持日志文件按大小切割</td></tr><tr><td>logging.hanlders.TimedRotatingFileHandler</td><td>将日志消息发送到磁盘文件，并支持日志文件按时间切割</td></tr><tr><td>logging.handlers.HTTPHandler</td><td>将日志消息以GET或POST的方式发送给一个HTTP服务器</td></tr><tr><td>logging.handlers.SMTPHandler</td><td>将日志消息发送给一个指定的email地址</td></tr><tr><td>logging.NullHandler</td><td>该Handler实例会忽略error messages，通常被想使用logging的library开发者使用来避免’No handlers could be found for logger XXX’信息的出现。</td></tr></tbody></table><h6 id="Formater类"><a href="#Formater类" class="headerlink" title="Formater类"></a>Formater类</h6><p>Formater对象用于配置日志信息的最终顺序、结构和内容。与logging.Handler基类不同的是，应用代码可以直接实例化Formatter类。另外，如果你的应用程序需要一些特殊的处理行为，也可以实现一个Formatter的子类来完成。</p><blockquote><p>logging.Formatter.<strong>init</strong>(fmt&#x3D;None, datefmt&#x3D;None, style&#x3D;’%’)</p></blockquote><p>可见，该构造方法接收3个可选参数：</p><ul><li>fmt：指定消息格式化字符串，如果不指定该参数则默认使用message的原始值</li><li>datefmt：指定日期格式字符串，如果不指定该参数则默认使用”%Y-%m-%d %H:%M:%S”</li><li>style：Python 3.2新增的参数，可取值为 ‘%’, ‘{‘和 ‘$’，如果不指定该参数则默认使用’%’</li></ul><h6 id="Filter类"><a href="#Filter类" class="headerlink" title="Filter类"></a>Filter类</h6><p>Filter可以被Handler和Logger用来做比level更细粒度的、更复杂的过滤功能。Filter是一个过滤器基类，它只允许某个logger层级下的日志事件通过过滤。该类定义如下</p><blockquote><p>class logging.Filter(name&#x3D;’’)<br>    filter(record)</p></blockquote><p>一个filter实例化时传递的name参数值为’A.B’，那么该filter实例将只允许名称为类似如下规则的loggers产生的日志记录通过过滤：’A.B’，’A.B,C’，’A.B.C.D’，’A.B.D’，而名称为’A.BB’, ‘B.A.B’的loggers产生的日志则会被过滤掉。如果name的值为空字符串，则允许所有的日志事件通过过滤</p><p>filter方法用于具体控制传递的record记录是否能通过过滤，如果该方法返回值为0表示不能通过过滤，返回值为非0表示可以通过过滤</p><blockquote><p><em><strong>说明：</strong></em></p><ul><li>如果有需要，也可以在filter(record)方法内部改变该record，比如添加、删除或修改一些属性。</li><li>我们还可以通过filter做一些统计工作，比如可以计算下被一个特殊的logger或handler所处理的record数量等。</li></ul></blockquote><ul><li>1）（在用户代码中进行）日志记录函数调用，如：logger.info(…)，logger.debug(…)等；</li><li>2）判断要记录的日志级别是否满足日志器设置的级别要求（要记录的日志级别要大于或等于日志器设置的级别才算满足要求），如果不满足则该日志记录会被丢弃并终止后续的操作，如果满足则继续下一步操作；</li><li>3）根据日志记录函数调用时掺入的参数，创建一个日志记录（LogRecord类）对象；</li><li>4）判断日志记录器上设置的过滤器是否拒绝这条日志记录，如果日志记录器上的某个过滤器拒绝，则该日志记录会被丢弃并终止后续的操作，如果日志记录器上设置的过滤器不拒绝这条日志记录或者日志记录器上没有设置过滤器则继续下一步操作–将日志记录分别交给该日志器上添加的各个处理器；</li><li>5）判断要记录的日志级别是否满足处理器设置的级别要求（要记录的日志级别要大于或等于该处理器设置的日志级别才算满足要求），如果不满足记录将会被该处理器丢弃并终止后续的操作，如果满足则继续下一步操作；</li><li>6）判断该处理器上设置的过滤器是否拒绝这条日志记录，如果该处理器上的某个过滤器拒绝，则该日志记录会被当前处理器丢弃并终止后续的操作，如果当前处理器上设置的过滤器不拒绝这条日志记录或当前处理器上没有设置过滤器测继续下一步操作；</li><li>7）如果能到这一步，说明这条日志记录经过了层层关卡允许被输出了，此时当前处理器会根据自身被设置的格式器（如果没有设置则使用默认格式）将这条日志记录进行格式化，最后将格式化后的结果输出到指定位置（文件、网络、类文件的Stream等）；</li><li>8）如果日志器被设置了多个处理器的话，上面的第5-8步会执行多次；</li><li>9）这里才是完整流程的最后一步：判断该日志器输出的日志消息是否需要传递给上一级logger（之前提到过，日志器是有层级关系的）的处理器，如果propagate属性值为1则表示日志消息将会被输出到处理器指定的位置，同时还会被传递给parent日志器的handlers进行处理直到当前日志器的propagate属性为0停止，如果propagate值为0则表示不向parent日志器的handlers传递该消息，到此结束。</li></ul><p>一条日志信息要想被最终输出需要依次经过以下几次过滤：</p><ul><li>日志器等级过滤；</li><li>日志器的过滤器过滤；</li><li>日志器的处理器等级过滤；</li><li>日志器的处理器的过滤器过滤；</li></ul><h4 id="使用logging四大组件记录日志"><a href="#使用logging四大组件记录日志" class="headerlink" title="使用logging四大组件记录日志"></a>使用logging四大组件记录日志</h4><h5 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求"></a>1. 需求</h5><p>现在有以下几个日志记录的需求：</p><ul><li>1）要求将所有级别的所有日志都写入磁盘文件中</li><li>2）all.log文件中记录所有的日志信息，日志格式为：日期和时间 - 日志级别 - 日志信息</li><li>3）error.log文件中单独记录error及以上级别的日志信息，日志格式为：日期和时间 - 日志级别 - 文件名[:行号] - 日志信息</li><li>4）要求all.log在每天凌晨进行日志切割</li></ul><h5 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h5><ul><li>1）要记录所有级别的日志，因此日志器的有效level需要设置为最低级别–DEBUG;</li><li>2）日志需要被发送到两个不同的目的地，因此需要为日志器设置两个handler；另外，两个目的地都是磁盘文件，因此这两个handler都是与FileHandler相关的；</li><li>3）all.log要求按照时间进行日志切割，因此他需要用logging.handlers.TimedRotatingFileHandler; 而error.log没有要求日志切割，因此可以使用FileHandler;</li><li>4）两个日志文件的格式不同，因此需要对这两个handler分别设置格式器；</li></ul><h5 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> logging<span class="token punctuation">.</span>handlers<span class="token keyword">import</span> datetimelogger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mylogger'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>rf_handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>TimedRotatingFileHandler<span class="token punctuation">(</span><span class="token string">'all.log'</span><span class="token punctuation">,</span> when<span class="token operator">=</span><span class="token string">'midnight'</span><span class="token punctuation">,</span> interval<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> backupCount<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> atTime<span class="token operator">=</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 设置时间更新</span>rf_handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">"%(asctime)s - %(levelname)s - %(message)s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f_handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span><span class="token string">'error.log'</span><span class="token punctuation">)</span>f_handler<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>f_handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">"%(asctime)s - %(levelname)s - %(filename)s[:%(lineno)d] - %(message)s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>rf_handler<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>f_handler<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'debug message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'info message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">'warning message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error message'</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">'critical message'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置logging方式"><a href="#配置logging方式" class="headerlink" title="配置logging方式"></a>配置logging方式</h4><p>作为开发者，我们可以通过以下3中方式来配置logging:</p><ul><li>1）使用Python代码显式的创建loggers, handlers和formatters并分别调用它们的配置函数；</li><li>2）创建一个日志配置文件，然后使用<code>fileConfig()</code>函数来读取该文件的内容；</li><li>3）创建一个包含配置信息的dict，然后把它传递个<code>dictConfig()</code>函数；</li></ul><h4 id="向日志输出添加上下文信息"><a href="#向日志输出添加上下文信息" class="headerlink" title="向日志输出添加上下文信息"></a>向日志输出添加上下文信息</h4><blockquote><p>除了传递给日志记录函数的参数外，有时候我们还想在日志输出中包含一些额外的上下文信息。比如，在一个网络应用中，可能希望在日志中记录客户端的特定信息，如：远程客户端的IP地址和用户名。这里我们来介绍以下几种实现方式：</p><ul><li>通过向日志记录函数传递一个<code>extra</code>参数引入上下文信息</li><li>使用LoggerAdapters引入上下文信息</li><li>使用Filters引入上下文信息</li></ul></blockquote><h5 id="对其他文件中bug等级进行定义"><a href="#对其他文件中bug等级进行定义" class="headerlink" title="对其他文件中bug等级进行定义"></a>对其他文件中bug等级进行定义</h5><blockquote><p>logging.getLogger(“transformers.configuration_utils”).setLevel(logging.WARN)<br>logging.getLogger(“transformers.modeling_utils”).setLevel(logging.WARN)<br>logging.getLogger(‘transformers.tokenization_utils’).setLevel(logging.WARN)</p></blockquote><p><a href="https://docs.python.org/3.5/howto/logging-cookbook.html">logging-cookbook</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib</title>
      <link href="/2022/09/26/cs/matplotlib/"/>
      <url>/2022/09/26/cs/matplotlib/</url>
      
        <content type="html"><![CDATA[<h5 id="论文画时频谱"><a href="#论文画时频谱" class="headerlink" title="论文画时频谱"></a>论文画时频谱</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">show_ricker <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>model<span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>noisy_free_ricker_sparse<span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>show_ricker <span class="token operator">=</span> show_ricker<span class="token operator">/</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>show_ricker<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>show_ricker <span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">'jet'</span><span class="token punctuation">,</span>shading<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">)</span><span class="token comment"># plt.xticks([0,100, 200, 300, 400, 500])</span><span class="token comment"># plt.yticks([])</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token comment"># plt.savefig(f'&#123;image_path&#125;/ricker_sparse_&#123;x&#125;_&#123;y&#125;.jpg',bbox_inches='tight',pad_inches = 0)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># traces</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># plt.pcolormesh(list(range(512)), list(range(120)), np.abs(one_signal_data[1])[:120,:],cmap='jet')</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>train_epoch_loss<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment"># plt.xticks([0,100, 200, 300, 400, 500])</span><span class="token comment"># plt.yticks([])</span><span class="token comment"># plt.legend(['seismic trace'])</span><span class="token comment"># plt.axis('off')</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token comment"># plt.axis('off')</span><span class="token comment"># plt.savefig(f'&#123;image_path&#125;/train_and_valid_loss.jpg',bbox_inches='tight',pad_inches = 0.1)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>plt.cla()   # Clear axis即清除当前图形中的当前活动轴。其他轴不受影响。<br>plt.clf()   # Clear figure清除所有轴，但是窗口打开，这样它可以被重复使用。<br>plt.close() # Close a figure window</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>torch多卡训练3-实战</title>
      <link href="/2022/09/08/dlandml/torch-duo-qia-xun-lian-3-shi-zhan/"/>
      <url>/2022/09/08/dlandml/torch-duo-qia-xun-lian-3-shi-zhan/</url>
      
        <content type="html"><![CDATA[<p>本篇摘抄来自<a href="https://zhuanlan.zhihu.com/p/250471767">知乎大佬</a>，仅仅用作学习</p><p>[TOC]</p><h3 id="torch-多卡训练DDP"><a href="#torch-多卡训练DDP" class="headerlink" title="torch 多卡训练DDP"></a>torch 多卡训练DDP</h3><h4 id="SyncBN，支持多卡训练"><a href="#SyncBN，支持多卡训练" class="headerlink" title="SyncBN，支持多卡训练"></a>SyncBN，支持多卡训练</h4><p>BN中有moving mean 和moving variance 这两个buffer更新依赖于当前batch得数据的计算结果，在普通多卡DP下，各模型只能拿到自己的那部分计算结果，所以在DP模式下的的普通BN被设计为只利用主卡上的计算结果来计算<code>moving mean</code> 和 <code>moving variance</code> ，之后再广播给其他卡，，这样实际上BN的batch size 就只是主卡上的batch size，这样会限制模型的性能</p><h5 id="syncBN原理"><a href="#syncBN原理" class="headerlink" title="syncBN原理"></a>syncBN原理</h5><p>分布式通讯接口在各卡间通讯，利用所有数据进行bN计算。 并且只传输各自进程的小 <code>batch mean</code> 和 <code>batch variance</code> </p><p>前向传播：</p><ul><li>在各自进程上计算各自的batch mean 和batch variance</li><li>对各自进程的mean 和variance进行 all_gather 操作，每个进程都得到s的全局量<ul><li>传递mean 和variance，减少通讯量</li></ul></li><li>计算总的mean 和总体variance </li><li>延续正常的BN计算，从前向传播计算数据中得到的batch_mean 和batch_variance 在各卡间保持一直，所以running mean 和running variance 就能保持一直</li></ul><p>后向传播，和正常的一样</p><h5 id="syncBN和DDP关系"><a href="#syncBN和DDP关系" class="headerlink" title="syncBN和DDP关系"></a>syncBN和DDP关系</h5><p>当前pytorch 中SyncBn只在DDP单进程单卡模式中支持，syncBN需要用到all_gather这个分布式接口，这个接口需要初始化DDP环境</p><blockquote><p>DDP 初始化阶段：</p><p>d. 创建管理器reducer 给每个parameter注册梯度平均的hook （在c++中实现，即reducer.h)</p><p>e 为可能的syncBn做准备</p></blockquote><p>需要注意</p><ul><li>为可能的syncBn做准备，实际上就是检测当前DDP单进程单卡模式，如果不是，则会停止</li><li>SyncBN需要在DDP环境初始化后初始化，但是要在DDP模型前就准备好</li><li>SyncBn依赖了all_gather，这个分布式接口当前不支持单进程多卡或者DP模式</li></ul><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># DDP init</span>dist<span class="token punctuation">.</span>init_process_group<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'nccl'</span><span class="token punctuation">)</span><span class="token comment"># 按照原来的方式定义模型，这里的BN都使用普通BN就行了。</span>model <span class="token operator">=</span> MyModel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 引入SyncBN，这句代码，会将普通BN替换成SyncBN。</span>model <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>SyncBatchNorm<span class="token punctuation">.</span>convert_sync_batchnorm<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 构造DDP模型</span>model <span class="token operator">=</span> DDP<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device_ids<span class="token operator">=</span><span class="token punctuation">[</span>local_rank<span class="token punctuation">]</span><span class="token punctuation">,</span> output_device<span class="token operator">=</span>local_rank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>convert_sync_batchnorm 原理</strong></p><p>torch.nn.SyncBatchNorm.convert_sync_batchnorm会搜索model里面的每一个module，如果发现这个module是，或者继承了torch.nn.modules.bachnorm._batchNorm 就把它替换为syncBn，如果自己的normalization是自己定义的类，且没有继承过_batchNorm 那么convert_sync_batchnorm是不支持的，需要自己实现一个新的syncBN。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">convert_sync_batchnorm</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> module<span class="token punctuation">,</span> process_group<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">r"""Helper function to convert all :attr:`BatchNorm*D` layers in the model to       :class:`torch.nn.SyncBatchNorm` layers.       """</span>       module_output <span class="token operator">=</span> module       <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>batchnorm<span class="token punctuation">.</span>_BatchNorm<span class="token punctuation">)</span><span class="token punctuation">:</span>           module_output <span class="token operator">=</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>SyncBatchNorm<span class="token punctuation">(</span>module<span class="token punctuation">.</span>num_features<span class="token punctuation">,</span>                                                  module<span class="token punctuation">.</span>eps<span class="token punctuation">,</span> module<span class="token punctuation">.</span>momentum<span class="token punctuation">,</span>                                                  module<span class="token punctuation">.</span>affine<span class="token punctuation">,</span>                                                  module<span class="token punctuation">.</span>track_running_stats<span class="token punctuation">,</span>                                                  process_group<span class="token punctuation">)</span>           <span class="token keyword">if</span> module<span class="token punctuation">.</span>affine<span class="token punctuation">:</span>               <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   module_output<span class="token punctuation">.</span>weight <span class="token operator">=</span> module<span class="token punctuation">.</span>weight                   module_output<span class="token punctuation">.</span>bias <span class="token operator">=</span> module<span class="token punctuation">.</span>bias           module_output<span class="token punctuation">.</span>running_mean <span class="token operator">=</span> module<span class="token punctuation">.</span>running_mean           module_output<span class="token punctuation">.</span>running_var <span class="token operator">=</span> module<span class="token punctuation">.</span>running_var           module_output<span class="token punctuation">.</span>num_batches_tracked <span class="token operator">=</span> module<span class="token punctuation">.</span>num_batches_tracked       <span class="token keyword">for</span> name<span class="token punctuation">,</span> child <span class="token keyword">in</span> module<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           module_output<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span>name<span class="token punctuation">,</span> cls<span class="token punctuation">.</span>convert_sync_batchnorm<span class="token punctuation">(</span>child<span class="token punctuation">,</span> process_group<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">del</span> module       <span class="token keyword">return</span> module_output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DDP-下的梯度累加的进一步加速"><a href="#DDP-下的梯度累加的进一步加速" class="headerlink" title="DDP 下的梯度累加的进一步加速"></a>DDP 下的梯度累加的进一步加速</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 每次梯度累加循环    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>        prediction <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token operator">/</span> K  <span class="token comment"># 除以K，模仿loss function中的batchSize方向上的梯度平均，如果本身就没有的话则不需要。</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 积累梯度，不应用梯度改变，</span>        <span class="token comment"># yb注：这个时候其实会all_reduce 一次</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 应用梯度改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一次梯度累加会有k个step，每次梯度累加循环会进行k次all_reduce ，但事实上，每次循环只有一次optimizer.step(), 即只应用一次，也就是说，在每一次梯度累加循环中，我们其实只要进行一次gradient all_reduce 即可满足要求，有k-1 次all_reduce 被浪费掉了。</p><h5 id="如何加速"><a href="#如何加速" class="headerlink" title="如何加速"></a>如何加速</h5><p>关键在于取消前k-1 次梯度同步。所以DDP提供了一个暂时取消同步的context函数， no_sync()  在这个context下，DDP不会同步</p><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> DDP<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token keyword">for</span> 每次梯度累加循环    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 前accumulation_step-1个step，不进行梯度同步，累积梯度。</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>K<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> model<span class="token punctuation">.</span>no_sync<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            prediction <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token operator">/</span> K            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 积累梯度，不应用梯度改变</span>    <span class="token comment"># 第K个step，进行梯度同步</span>    prediction <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token operator">/</span> K    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 积累梯度，不应用梯度改变</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>more 优雅的写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> contextlib <span class="token keyword">import</span> nullcontext<span class="token comment"># 如果你的python版本小于3.7，请注释掉上面一行，使用下面这个：</span><span class="token comment"># from contextlib import suppress as nullcontext</span><span class="token keyword">if</span> local_rank <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> DDP<span class="token punctuation">(</span>model<span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 只在DDP模式下，轮数不是K整数倍的时候使用no_sync</span>    my_context <span class="token operator">=</span> model<span class="token punctuation">.</span>no_sync <span class="token keyword">if</span> local_rank <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> i <span class="token operator">%</span> K <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> nullcontext    <span class="token keyword">with</span> my_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        prediction <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token operator">/</span> K        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 积累梯度，不应用梯度改变</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> K <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多机多卡环境下的inference加速"><a href="#多机多卡环境下的inference加速" class="headerlink" title="多机多卡环境下的inference加速"></a>多机多卡环境下的inference加速</h4><p>问题：如何通过多卡推理拿到inference结果</p><p>思路：把数据split到各个进程中，并把结果合并到一起</p><h5 id="新的data-sampler。帮助我们吧数据不重复的分到各个进程上，"><a href="#新的data-sampler。帮助我们吧数据不重复的分到各个进程上，" class="headerlink" title="新的data sampler。帮助我们吧数据不重复的分到各个进程上，"></a>新的data sampler。帮助我们吧数据不重复的分到各个进程上，</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SequentialDistributedSampler</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sampler<span class="token punctuation">.</span>Sampler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Distributed Sampler that subsamples indicies sequentially,    making it easier to collate all results at the end.    Even though we only use this sampler for eval and predict (no training),    which means that the model params won't have to be synced (i.e. will not hang    for synchronization even if varied number of forward passes), we still add extra    samples to the sampler to make it evenly divisible (like in `DistributedSampler`)    to make it easy to `gather` or `reduce` resulting tensors at the end of the loop.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dataset<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> rank<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> num_replicas<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num_replicas <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"Requires distributed package to be available"</span><span class="token punctuation">)</span>            num_replicas <span class="token operator">=</span> torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>get_world_size<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> rank <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">"Requires distributed package to be available"</span><span class="token punctuation">)</span>            rank <span class="token operator">=</span> torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>get_rank<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dataset <span class="token operator">=</span> dataset        self<span class="token punctuation">.</span>num_replicas <span class="token operator">=</span> num_replicas        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> rank        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size        self<span class="token punctuation">.</span>num_samples <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>batch_size <span class="token operator">/</span> self<span class="token punctuation">.</span>num_replicas<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>batch_size        self<span class="token punctuation">.</span>total_size <span class="token operator">=</span> self<span class="token punctuation">.</span>num_samples <span class="token operator">*</span> self<span class="token punctuation">.</span>num_replicas    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        indices <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># add extra samples to make it evenly divisible</span>        indices <span class="token operator">+=</span> <span class="token punctuation">[</span>indices<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>total_size <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># subsample</span>        indices <span class="token operator">=</span> indices<span class="token punctuation">[</span>self<span class="token punctuation">.</span>rank <span class="token operator">*</span> self<span class="token punctuation">.</span>num_samples <span class="token punctuation">:</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>num_samples<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>num_samples<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="如何把结果合并在一起，all-gather"><a href="#如何把结果合并在一起，all-gather" class="headerlink" title="如何把结果合并在一起，all_gather"></a>如何把结果合并在一起，all_gather</h5><p>如果网络输出在不同的进程中有着一样的大小，那么问题就很好解决</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 合并结果的函数</span><span class="token comment"># 1. all_gather，将各个进程中的同一份数据合并到一起。</span><span class="token comment">#   和all_reduce不同的是，all_reduce是平均，而这里是合并。</span><span class="token comment"># 2. 要注意的是，函数的最后会裁剪掉后面额外长度的部分，这是之前的SequentialDistributedSampler添加的。</span><span class="token comment"># 3. 这个函数要求，输入tensor在各个进程中的大小是一模一样的。</span><span class="token keyword">def</span> <span class="token function">distributed_concat</span><span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> num_total_examples<span class="token punctuation">)</span><span class="token punctuation">:</span>    output_tensors <span class="token operator">=</span> <span class="token punctuation">[</span>tensor<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>get_world_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>all_gather<span class="token punctuation">(</span>output_tensors<span class="token punctuation">,</span> tensor<span class="token punctuation">)</span>    concat <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>output_tensors<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># truncate the dummy elements added by SequentialDistributedSampler</span>    <span class="token keyword">return</span> concat<span class="token punctuation">[</span><span class="token punctuation">:</span>num_total_examples<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 构造测试集</span><span class="token comment"># 假定我们的数据集是这个</span>transform <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>my_testset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span><span class="token comment"># 使用我们的新sampler</span>test_sampler <span class="token operator">=</span> SequentialDistributedSampler<span class="token punctuation">(</span>my_testset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>testloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>my_testset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> sampler<span class="token operator">=</span>test_sampler<span class="token punctuation">)</span><span class="token comment"># DDP和模型初始化，略。</span><span class="token comment"># ......</span><span class="token comment"># 正式训练和evaluation</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total_epoch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 训练代码，略</span>    <span class="token comment"># .......</span>    <span class="token comment"># 开始测试</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 1. 得到本进程的prediction</span>        predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> data<span class="token punctuation">,</span> label <span class="token keyword">in</span> testloader<span class="token punctuation">:</span>            data<span class="token punctuation">,</span> label <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span>            predictions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>            labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        <span class="token comment"># 进行gather</span>        predictions <span class="token operator">=</span> distributed_concat<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>predictions<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          <span class="token builtin">len</span><span class="token punctuation">(</span>test_sampler<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>        labels <span class="token operator">=</span> distributed_concat<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     <span class="token builtin">len</span><span class="token punctuation">(</span>test_sampler<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 3. 现在我们已经拿到所有数据的predictioin结果，进行evaluate！</span>        my_evaluate_func<span class="token punctuation">(</span>predictions<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="我们可以单向的把predictions-labels-集中到rank-x3D-0的进程，只在其进行evaluation-并且输出，参考连接-send-recv"><a href="#我们可以单向的把predictions-labels-集中到rank-x3D-0的进程，只在其进行evaluation-并且输出，参考连接-send-recv" class="headerlink" title="我们可以单向的把predictions labels 集中到rank&#x3D;0的进程，只在其进行evaluation 并且输出，参考连接,send,recv"></a>我们可以单向的把predictions labels 集中到rank&#x3D;0的进程，只在其进行evaluation 并且输出，参考<a href="https://link.zhihu.com/?target=https://pytorch.org/docs/stable/distributed.html">连接</a>,send,recv</h5><h4 id="保证DDP的性能，确保数据的一致性"><a href="#保证DDP的性能，确保数据的一致性" class="headerlink" title="保证DDP的性能，确保数据的一致性"></a>保证DDP的性能，确保数据的一致性</h4><h5 id="性能期望"><a href="#性能期望" class="headerlink" title="性能期望"></a>性能期望</h5><p>进程为N的DDP训练和累加为N其他配置完全相同的单卡是一样的，</p><p>如果有问题：检查进阶部分的check list ，最多可能是数据上面出现了问题</p><p>DDP训练的时候，数据的一致性必须保证：各进程拿到的数据，要像是accumulation 为N其他配置完全相同的单卡训练中同个accumulation循环中不同iteration 拿到的数据，如果各个进程拿到的数据是一样的，分布相似，造成训练护具质量的下降，最终导致模型性能下降</p><h6 id="容易出错的点"><a href="#容易出错的点" class="headerlink" title="容易出错的点"></a>容易出错的点</h6><p>为保证实验的可复现性，一般在代码开头声明一个随机数种子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token keyword">def</span> <span class="token function">init_seeds</span><span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cuda_deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    <span class="token comment"># Speed-reproducibility tradeoff https://pytorch.org/docs/stable/notes/randomness.html</span>    <span class="token keyword">if</span> cuda_deterministic<span class="token punctuation">:</span>  <span class="token comment"># slower, more reproducible</span>        cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>        cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># faster, less reproducible</span>        cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">False</span>        cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 一般都直接用0作为固定的随机数种子。</span>    init_seeds<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是会出现以下的问题：</p><ol><li>DDP的N个进程都使用了一个随机数种子</li><li>生成数据的时候，如果使用了一席随机过程的数据扩充方法，那么，各个进程生成的数据会带有一定的同态性<ol><li>例如yolov5 采用了msoaic数据增强，从数据中随机采样三张图像与当前拼接在一起，如果使用了相同的随机数种子，各卡生成的图像中，除了原本的销图，其他三张小图都一模一样</li></ol></li><li>同态的数据，降低了训练数据的质量，降低了训练效率，最终得到的模型性能可能更低</li></ol><p>我们需要分配给不同的进程，不同的固定的随机种子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rank <span class="token operator">=</span> torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>get_rank<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 问题完美解决！</span>    init_seeds<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> rank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="和DDP有关的技巧"><a href="#和DDP有关的技巧" class="headerlink" title="和DDP有关的技巧"></a>和DDP有关的技巧</h4><p>进程有快有慢，只有在gradient all-reduce 的时候，快的进程才会等慢的进程，也就是进行同步，有哪些地方需要进行同步呢，例如下载数据</p><ul><li>需要在唯一一个进程中开启</li><li>其他进程下载完成，再去加载数据</li></ul><p>在torch.distributed 提供了一个barrier()的接口，利用它我们可以同步各个各个DDP进程，但使用barrier函数的时候DDP进程会在函数的位置进行当代，等所有的进程都跑到了barrier函数的的位置他们才会再次向下执行。</p><h5 id="只在某个进程执行，无须同步"><a href="#只在某个进程执行，无须同步" class="headerlink" title="只在某个进程执行，无须同步"></a>只在某个进程执行，无须同步</h5><p>只需要一个判断，用不到barrier()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> rank <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="简单的同步："><a href="#简单的同步：" class="headerlink" title="简单的同步："></a>简单的同步：</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">code_before<span class="token punctuation">(</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>barrier<span class="token punctuation">(</span><span class="token punctuation">)</span>code_after<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="在某个进程中执行A操作，其他进程等待期执行完成后再执行B操作"><a href="#在某个进程中执行A操作，其他进程等待期执行完成后再执行B操作" class="headerlink" title="在某个进程中执行A操作，其他进程等待期执行完成后再执行B操作"></a>在某个进程中执行A操作，其他进程等待期执行完成后再执行B操作</h5><pre class="line-numbers language-text" data-language="text"><code class="language-text">if rank == 0:    do_A()    torch.distributed.barrier()else:    torch.distributed.barrier()    do_B()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="在某个进程中优先执行A操作，其他进程等待其执行完成后再执行A操作"><a href="#在某个进程中优先执行A操作，其他进程等待其执行完成后再执行A操作" class="headerlink" title="在某个进程中优先执行A操作，其他进程等待其执行完成后再执行A操作"></a>在某个进程中优先执行A操作，其他进程等待其执行完成后再执行A操作</h5><p>利用<code>contextlib.contextmanager</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> contextlib <span class="token keyword">import</span> contextmanager<span class="token comment"># 一个上下文管理器，</span><span class="token decorator annotation punctuation">@contextmanager</span> <span class="token comment"># 当使用了这个装饰器后，</span><span class="token keyword">def</span> <span class="token function">torch_distributed_zero_first</span><span class="token punctuation">(</span>rank<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Decorator to make all processes in distributed training wait for each local_master to do something.    """</span>    <span class="token keyword">if</span> rank <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>barrier<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 这里的用法其实就是协程的一种哦。</span>    <span class="token keyword">yield</span>  <span class="token comment"># 这里yield的资源会绑定给as，如果有的话，同时当with的语句执行后则会继续执行，也就是说理论上说，0进程的会先执行，再阻塞，而其他进程会等到0进程执行之后再进行阻塞</span>    <span class="token keyword">if</span> rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>barrier<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> torch_distributed_zero_first<span class="token punctuation">(</span>rank<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> check_if_dataset_exist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        download_dataset<span class="token punctuation">(</span><span class="token punctuation">)</span>    load_dataset<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>属实优雅</strong></p><h4 id="避免DDP带来的冗余输出"><a href="#避免DDP带来的冗余输出" class="headerlink" title="避免DDP带来的冗余输出"></a>避免DDP带来的冗余输出</h4><p>问题：输出是n倍</p><p>解法：<strong>logging 模块+输出信息等级控制</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment"># 给主要进程（rank=0）设置低输出等级，给其他进程设置高输出等级。</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO <span class="token keyword">if</span> rank <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">else</span> logging<span class="token punctuation">.</span>WARN<span class="token punctuation">)</span><span class="token comment"># 普通log，只会打印一次。</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"This is an ordinary log."</span><span class="token punctuation">)</span><span class="token comment"># 危险的warning、error，无论在哪个进程，都会被打印出来，从而方便debug。</span>logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">"This is a fatal log!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：这个地方看了之后要去看看那天看到的语言分离的复现代码，可以学习的还有很多</strong></p><h3 id="关于DDP-半精度，以及多张卡同时并行更加详细的解释"><a href="#关于DDP-半精度，以及多张卡同时并行更加详细的解释" class="headerlink" title="关于DDP+半精度，以及多张卡同时并行更加详细的解释"></a><strong><a href="https://blog.csdn.net/qq_23981335/article/details/118668834">关于DDP+半精度，以及多张卡同时并行更加详细的解释</a></strong></h3><h5 id="多卡eval"><a href="#多卡eval" class="headerlink" title="多卡eval"></a>多卡eval</h5><p>修复了上述infer或者eval的时候各进程通信的时候只能相同的tensor的bug</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">distributed_concat_by_all_reduce</span><span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> each_process_num<span class="token punctuation">,</span> local_rank<span class="token punctuation">,</span> if_all_reduce<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> master_rank<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    output_tensors <span class="token operator">=</span> <span class="token punctuation">[</span>        torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>each_process_num<span class="token punctuation">[</span>rank_<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token builtin">list</span><span class="token punctuation">(</span>tensor<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>            device<span class="token punctuation">)</span> <span class="token keyword">if</span> local_rank <span class="token operator">!=</span> rank_ <span class="token keyword">else</span> tensor        <span class="token keyword">for</span> rank_ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>get_world_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    output_tensors <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>output_tensors<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 为reduce 做准备</span>    <span class="token keyword">if</span> if_all_reduce<span class="token punctuation">:</span> <span class="token comment"># 使用哪个method</span>        torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>all_reduce<span class="token punctuation">(</span>output_tensors<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span><span class="token builtin">reduce</span><span class="token punctuation">(</span>output_tensors<span class="token punctuation">,</span> dst<span class="token operator">=</span>master_rank<span class="token punctuation">)</span>    <span class="token comment"># truncate the dummy elements added by SequentialDistributedSampler</span>    <span class="token keyword">return</span> output_tensors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CUDA_VISIBLE_DEVICES&#x3D;0,1 python -m torch.distributed.launch –nproc_per_node&#x3D;2 test_all_gather.py</p><p>&#x2F;home&#x2F;ybandyx&#x2F;disk&#x2F;YouboData&#x2F;Coding&#x2F;Pycharm&#x2F;Study&#x2F;skills&#x2F;torch_skill&#x2F;ddp</p><p>CUDA_VISIBLE_DEVICES&#x3D;0,1 python -m torch.distributed.launch –nproc_per_node&#x3D;2 main.py</p><p>&#x2F;home&#x2F;ybandyx&#x2F;disk&#x2F;YouboData&#x2F;Coding&#x2F;Pycharm&#x2F;Match&#x2F;law_event_detect&#x2F;baseline_rewrite</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>torch多卡训练2-进阶</title>
      <link href="/2022/09/07/dlandml/torch-duo-qia-xun-lian-2-jin-jie/"/>
      <url>/2022/09/07/dlandml/torch-duo-qia-xun-lian-2-jin-jie/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>本篇文章摘自于<a href="https://zhuanlan.zhihu.com/p/187610959">知乎大佬</a>，仅做自己学习用途</p><h3 id="torch-多卡训练"><a href="#torch-多卡训练" class="headerlink" title="torch 多卡训练"></a>torch 多卡训练</h3><p>torch.distributed 有很多分布式接口,重点关注<code>all_reduce</code></p><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><ol><li><p>reduce 就是不同的节点各有一份数据，把这些数据汇总到一起，规定各个节点的数据有着相同的shape和data_type，并规定汇总的方式（相加）。也就是各个节点上的一份相同规范的数据加到一起</p></li><li><p><code>all_reduce</code> 就是在reduce的基础上，把最终的结果发回到各个节点上</p></li><li><p>具体实现，需要看具体的backend， 流行的NCCL的all_reduce 实现使用了ring的思想</p></li></ol><h4 id="Pytorch-数据结构基础"><a href="#Pytorch-数据结构基础" class="headerlink" title="Pytorch 数据结构基础"></a>Pytorch 数据结构基础</h4><ul><li><strong>DDP下各进程不同步参数而是同步参数的变化量，各进程的模型的状态同一性很重要</strong></li></ul><h5 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h5><ul><li><p>pytorch 中，所有的模型都会集成module类，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># torch.nn.modules.py. line 71. Class module:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initializes internal Module state, shared by both nn.Module and ScriptModule.        """</span>        torch<span class="token punctuation">.</span>_C<span class="token punctuation">.</span>_log_api_usage_once<span class="token punctuation">(</span><span class="token string">"python.nn_module"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>training <span class="token operator">=</span> <span class="token boolean">True</span>        self<span class="token punctuation">.</span>_parameters <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_buffers <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_backward_hooks <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_forward_hooks <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_forward_pre_hooks <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_state_dict_hooks <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_load_state_dict_pre_hooks <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_modules <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>module 的基本要素被分成2组，一组是<strong>状态</strong>，一组是各种各样的<strong>hooks</strong>，<br><strong>状态</strong>有四个东西</p><ul><li>self.trainging  是否在训练中，宏观状态</li><li>self._modules<ul><li>modules 是下属的模块，迭代的定义了self.training, self._modules, self._parameters 等</li></ul></li><li>self._parameters指的就是网络的参数</li><li><strong>self._buffers</strong><ul><li>非参数，但是对于网络来说很重要，会被持久化保存的数据</li><li>例如BN中的moving mean 和 variance，其优化不是通过梯度反向传播而是通过其他</li></ul></li></ul><p>从本上上讲，当一个模型的网络结构被定义后，<strong>其状态就是由parameter和buffer的迭代组合表示</strong>， 当保存模型的时候，调用 state_dict()的时候，得到模型的parameter和buffer；也就是在DDP中，如果要在不同的进程维持相同的状态，不仅要传递parameter，还要传递 buffer.  在每次网络传播开始之前，就会把master节点上的buffer广播给其他节点，维持状态的统一</p><p><strong>hook</strong>(解决模型嵌入)</p><p>hook提供了一种机制，程序提供hook接口，用户可以写一个hook函数，然后勾在hook接口，程序的主体上从而可以插入到中间执行。DDP通过hook把自己的逻辑插入到module的训练过程中去。</p><p>torch在反向梯度计算结束后提供了一个hook接口，DDP吧ring-reduce的代码写成一个hook函数，每次的parameter反向梯度计算结束后，程序会调用这个hook函数，开始ring-reduce过程。因为所有的模型都用到了parameter。DDP通过hook函数就解决了所有模型的梯度平均问题</p></li></ul></li></ul><h4 id="DDP-实现"><a href="#DDP-实现" class="headerlink" title="DDP 实现"></a>DDP 实现</h4><h5 id="代码位置"><a href="#代码位置" class="headerlink" title="代码位置"></a>代码位置</h5><p>参考原文</p><h5 id="DDP模式"><a href="#DDP模式" class="headerlink" title="DDP模式"></a>DDP模式</h5><ul><li>一个进程一张卡（最佳）</li><li>每个进程多张卡，复制模式，一个模型复制在不同的卡上，每个进程等同于DP模式</li><li>每个进程多张卡，并行模式，一个模型的不同部分分布在不同的卡上面，前半部分在0卡上，后半部分在1号卡上，适合模型非常大，大到不能塞下batch_size &#x3D; 1的模型</li></ul><h5 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h5><h6 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h6><ul><li>环境准备<code>init_process_group</code> 各个进程会在这一步，与master节点进行握手，建立连接<ul><li>如果进程数量不足设定的world_size进程会一直等待，也就是会一直hold</li></ul></li><li>DDP初始化<ul><li>把parameter，buffer从master节点传输到其他节点，使得所有的进程上的状态一致，此时需要保证这一步之后，代码不会再修改任何模型的东西，包括添加，修改删除parameter 和buffer</li><li>如果每个节点有多卡，则在每张卡上创建模型（类似DP）</li><li>把parameter进行分组，每一组称为一个bucket，邻近的parameter在同一个bucket。<ul><li>这个地方是为了加速，在梯度通讯是，先计算，得到梯度的bucket会马上进行通讯，不必等到所有的梯度计算结束才进行通讯</li></ul></li><li>创建管理器reducer，给每个parameter注册梯度平均的hook<ul><li>具体实现实在c++中实现，即reducer.h文件</li></ul></li><li>为可能的syncBN做准备</li></ul></li></ul><h6 id="2-正式训练阶段"><a href="#2-正式训练阶段" class="headerlink" title="2. 正式训练阶段"></a>2. 正式训练阶段</h6><p>在每个step中，DDP模型都可以做下面的事情：</p><ul><li>采样数据，从dataloader中得到一个batch的数据，用于当前计算<ul><li>因为使用了distributedSampler 各个精神上的数据不会重复。 如果要确保DDP性能和单卡性能一直，需要保证在数据上，DDP模式下的一个epoch和单卡下的一个epoch是等效的</li></ul></li><li>进行网络的前向计算（model(data))<ul><li>同步各进程状态<ul><li>（可能） 对单进程多卡复制，同步进程内多卡之间的parameter和buffer</li><li>同步各进程之间的buffer</li></ul></li><li>前向计算</li><li>（可能）当DDP参数 find_unused_parameter 为true的时候，会在forward结束时，启动一个回溯，标记出所有没有用到的parameter，把这些设定为ready<ul><li>find_unused_parameter 的默认值是false，因为其会拖慢速度</li></ul></li></ul></li><li>计算梯度(loss.backward())<ul><li>reducer 外面，各个进程各自开始反向计算梯度</li><li>reducer外面，当某个parameter的梯度计算好了的时候，之前注册的grad hook会被触发，在reducer里面把这个parameter的状态标记为ready</li><li>reducer里面，当某个bucket的所有parameter都是ready状态的时候，reducer会对这个bucket的所有parameter都开始一个异步的all-reduce的梯度平均状态<ul><li>bucket的执行过程也是有顺序的，其顺序与parameter是相反的，即<strong>最先注册的parameter的bucket在最后</strong></li><li>所以，在创建module的时候，务必把先进行计算的parameter的注册在前面，后计算的在后面，不然reducer会卡在某个一个bucket等待，使得训练时间延长<ul><li>参数注册就是创建网络层，也就是按照网络计算顺序依次创建网络层</li></ul></li></ul></li><li>reducer里面，当bucket的梯度都结束后，reducer才会把得到的平均grad结果正式写入到parameter.grad中</li></ul></li><li>优化器optimizer应用gradint 更新参数optimizer.step()<ul><li>这一步和DDP没关系。</li></ul></li></ul><p>​更新后的参数最终能在各个进程间保持一致，是由以下因素保证的</p><pre><code>1. 参数的初试值相同2. 参数更新相同* 更新值由1. optimizer的初试状态相同* 每个optimizer.step时候的梯度相同</code></pre><p>​<strong>也就是说optimizer和DDP是没有关系的，optimizer的初试状态的同一性是不被DDP保证的</strong>，如果自定义optimizer，需要自己保证其统一性</p><p>​也就是说optimizer1需要在DDP之后定义，这个时候的模式已经是被初始化为相同的参数，能够保证优化器的初始状态是相同的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 新增：构造DDP model</span>model <span class="token operator">=</span> DDP<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device_ids<span class="token operator">=</span><span class="token punctuation">[</span>local_rank<span class="token punctuation">]</span><span class="token punctuation">,</span> output_device<span class="token operator">=</span>local_rank<span class="token punctuation">)</span><span class="token comment"># 优化器：要在构造DDP model之后，才能初始化model。</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>出错排查</strong></p><ul><li>是否遵循单进程单卡？单进程多卡在速度上不是最优的</li><li>是否使用NCCL后端</li><li>各进程模型是否相同？必须保证不同的进程里面的模型都是相同的结构的，保证parameter（网络层）的创建顺序是一致的</li><li>模型的parameter创建顺序是否与真实计算顺序一致（涉及到通讯效率优化）</li><li>在DDP模型之后，是否修改了它的参数，不允许在DDP之后，增删改参数，造成reduce出错</li><li>DDP模式下，一个epoch的数据和单卡下的一个epoch的数据是否是等效的<ul><li>n卡的DDP模式，理论上可以等价于n次graditent accumulation 的单卡模式</li><li>如果出现性能下降，数据是最有可能出现问题的地方</li></ul></li><li>是否保证初始状态的同一性，parameter,buffer的统一性</li></ul><h5 id="DistributedSampler机制"><a href="#DistributedSampler机制" class="headerlink" title="DistributedSampler机制"></a>DistributedSampler机制</h5><p>不同进程之间使用相同的随机数种子，保持一致，然后使用当前epoch作为随机种子，从而使得不同的epoch下有不同的shuffle结果，所以需要调用set_epoch方法</p><p>详细介绍在 [[torch多卡训练1-初始#DistributedSampler 采样器详解]]</p>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>torch半精度</title>
      <link href="/2022/09/07/dlandml/torch-ban-jing-du/"/>
      <url>/2022/09/07/dlandml/torch-ban-jing-du/</url>
      
        <content type="html"><![CDATA[<h3 id="torch-cuda-amp-混合精度训练"><a href="#torch-cuda-amp-混合精度训练" class="headerlink" title="torch.cuda.amp 混合精度训练"></a>torch.cuda.amp 混合精度训练</h3><p><strong>amp</strong>: 自动混合精度，采用不同的数据精度进行计算，pytorch中包含了浮点32(FloatTensor)和16位(HalfTensor)， 默认是32位<br><strong>HalfTensor</strong>： 存储小，计算快，更好利用cuda， 数值范围小（容易overflow&#x2F;underflow) </p><p><strong>解决HalfTensor</strong>：</p><ul><li>梯度scale，<code>torch.cuda.amp.GradScaller</code> 通过放大loss值来防止梯度消失，underflow, 更新权重的时候还是要将放大的梯度在unscale回去</li><li>回落到torch.FloatTensor，一般常用的操作会被自动转化为半精度浮点型计算，例如torch.HalfTensor，如conv1d, conv2d, conv3d.</li></ul><p><strong>使用autocast+GradScaler</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>cuda <span class="token keyword">import</span> amp<span class="token comment"># 创建model，默认是torch.FloatTensor</span>model <span class="token operator">=</span> Net<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment"># 判断能否使用自动混合精度</span>enable_amp <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> <span class="token string">"cuda"</span> <span class="token keyword">in</span> device<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token keyword">else</span> <span class="token boolean">False</span><span class="token comment"># 在训练最开始之前实例化一个GradScaler对象</span>scaler <span class="token operator">=</span> amp<span class="token punctuation">.</span>GradScaler<span class="token punctuation">(</span>enabled<span class="token operator">=</span>enable_amp<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> epochs<span class="token punctuation">:</span>    <span class="token keyword">for</span> <span class="token builtin">input</span><span class="token punctuation">,</span> target <span class="token keyword">in</span> data<span class="token punctuation">:</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 前向过程(model + loss)开启 autocast</span>        <span class="token keyword">with</span> amp<span class="token punctuation">.</span>autocast<span class="token punctuation">(</span>enabled<span class="token operator">=</span>enable_amp<span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>                    <span class="token comment"># 1、Scales loss.  先将梯度放大 防止梯度消失</span>        scaler<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 2、scaler.step()   再把梯度的值unscale回来.</span>        <span class="token comment"># 如果梯度的值不是 infs 或者 NaNs, 那么调用optimizer.step()来更新权重,</span>        <span class="token comment"># 否则，忽略step调用，从而保证权重不更新（不被破坏）</span>        scaler<span class="token punctuation">.</span>step<span class="token punctuation">(</span>optimizer<span class="token punctuation">)</span>        <span class="token comment"># 3、准备着，看是否要增大scaler</span>        scaler<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment"># 正常更新权重</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结使用方法：</p><ul><li>初始化一个GradScaler对象，</li><li>在前向传播的时候，使用<code>with amp.autocast(enabled=enable_amp)</code>  开启自动半精度训练，计算包括到模型前向传播和loss计算损失函数，</li><li>放大loss&#96;scaler.scale(loss).backword()</li><li>scaler.step(optimizer) 更新参数</li><li>scaler.update() 看是否需要增大scaler</li><li>optimizer.zero_grad()</li></ul><p>scaler 在每次迭代中动态的估计，为了尽可能减少underflow，scaler应该更大，但是太大的话，会报纸半精度的tensor容易overflow,变成inf或者是nan，所以动态估计的原理就是在不出现inf或者nan梯度值的情况下尽可能的增大scaler的值，在每次 scaler.step的时候都会检查是否有inf或者nan的出现</p><ol><li>如果出现了inf或者nan，scaler. step(optimizer) 会忽略此次的权重更新（optimizer.step()) 并且将scaler的大小缩小，并且将scaler的大小缩小，乘上backoff_factor</li><li>如果没有出现inf或者nan，权重正常更新，并且当连续多次（growth_interval）没有出现inf或者nan，scaler.undate()会将scaler的大小增加，乘上(growth_factor)</li></ol><p><strong>注：GPU环境下使用</strong> </p><p><strong>多卡训练</strong></p><ul><li><p>多卡需要在forward里面的代码用autocast代码块方式运行</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_data_c1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> autocast<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># code</span>    <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>w</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>torch多卡训练1-初始</title>
      <link href="/2022/09/07/dlandml/torch-duo-qia-xun-lian-1-chu-shi/"/>
      <url>/2022/09/07/dlandml/torch-duo-qia-xun-lian-1-chu-shi/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>本篇文章摘自<a href="https://zhuanlan.zhihu.com/p/178402798">知乎大佬</a></p><h3 id="torch-多卡DDP"><a href="#torch-多卡DDP" class="headerlink" title="torch 多卡DDP"></a>torch 多卡DDP</h3><p>推荐每个进程一张卡</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><p><strong>world size</strong></p><p><code>torch.distributed.get_world_size()</code> 获取全局的并行数，在不同的进程里面都是一样的</p></li><li><p><strong>rank</strong></p><p>表现当前进程的序号，用于进程间通讯，对于16的world size来说，就是0-15 并且，rank&#x3D;0 是master进程.<code>torch.distributed.get_rank()</code></p></li><li><p><strong>local_rank</strong></p><p>每台机器上的进程的序号，机器1上有0-n，机器2 上有0-m. <code>torch.distributed.local_rank()</code></p></li></ul><h4 id="DDP的使用精髓"><a href="#DDP的使用精髓" class="headerlink" title="DDP的使用精髓"></a>DDP的使用精髓</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> DDP<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device_ids<span class="token operator">=</span><span class="token punctuation">[</span>local_rank<span class="token punctuation">]</span><span class="token punctuation">,</span> output_device<span class="token operator">=</span>local_rank<span class="token punctuation">)</span><span class="token comment"># 得到了新的模型，就是新的DDP模型，将后续的模型的前向传播，后向传播等细节都隐藏起来了。不需要暴露给用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>因为程序会在n个进程上跑起来，但是跑的是同一个代码，所以要处理好不同的进程关系。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> argparse<span class="token comment"># 新增1:依赖</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>distributed <span class="token keyword">as</span> dist<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>parallel <span class="token keyword">import</span> DistributedDataParallel <span class="token keyword">as</span> DDP<span class="token comment"># 新增2：从外面得到local_rank参数，在调用DDP的时候，其会自动给出这个参数，这个参数需要在args设置</span>parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--local_rank"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>FLAGS <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>local_rank <span class="token operator">=</span> FLAGS<span class="token punctuation">.</span>local_rank<span class="token comment"># 新增3：DDP backend初始化</span><span class="token comment">#   a.根据local_rank来设定当前使用哪块GPU</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>set_device<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span><span class="token comment">#   b.初始化DDP，使用默认backend(nccl)就行。如果是CPU模型运行，需要选择其他后端。</span>dist<span class="token punctuation">.</span>init_process_group<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'nccl'</span><span class="token punctuation">)</span><span class="token comment"># 新增4：定义并把模型放置到单独的GPU上，需要在调用`model=DDP(model)`前做哦。</span><span class="token comment">#       如果要加载模型，也必须在这里做哦。</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">,</span> local_rank<span class="token punctuation">)</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment"># 可能的load模型...</span><span class="token comment"># 新增5：之后才是初始化DDP模型</span>model <span class="token operator">=</span> DDP<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device_ids<span class="token operator">=</span><span class="token punctuation">[</span>local_rank<span class="token punctuation">]</span><span class="token punctuation">,</span> output_device<span class="token operator">=</span>local_rank<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前向和后向传播"><a href="#前向和后向传播" class="headerlink" title="前向和后向传播"></a>前向和后向传播</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_trainset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 新增1：使用DistributedSampler，DDP帮我们把细节都封装起来了。用，就完事儿！</span><span class="token comment">#       sampler的原理，后面也会介绍。</span>train_sampler <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>DistributedSampler<span class="token punctuation">(</span>my_trainset<span class="token punctuation">)</span> <span class="token comment"># 得到sampler</span><span class="token comment"># 需要注意的是，这里的batch_size指的是每个进程下的batch_size。也就是说，总batch_size是这里的batch_size再乘以并行数(world_size)。</span><span class="token comment"># </span>trainloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>my_trainset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> sampler<span class="token operator">=</span>train_sampler<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 新增2：设置sampler的epoch，DistributedSampler需要这个来维持各个进程之间的相同随机数种子</span>    trainloader<span class="token punctuation">.</span>sampler<span class="token punctuation">.</span>set_epoch<span class="token punctuation">(</span>epoch<span class="token punctuation">)</span> <span class="token comment"># 通过不同的epoch来设置每个epoch的打乱数据</span>    <span class="token comment"># 后面这部分，则与原来完全一致了。</span>    <span class="token keyword">for</span> data<span class="token punctuation">,</span> label <span class="token keyword">in</span> trainloader<span class="token punctuation">:</span>        prediction <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>ddp_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他需要注意的地方"><a href="#其他需要注意的地方" class="headerlink" title="其他需要注意的地方"></a>其他需要注意的地方</h4><ul><li><p>保存参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. save模型的时候，和DP模式一样，有一个需要注意的点：保存的是model.module而不是model。</span><span class="token comment">#    因为model其实是DDP model，参数是被`model=DDP(model)`包起来的。</span><span class="token comment"># 2. 我只需要在进程0上保存一次就行了，避免多次保存重复的东西。</span><span class="token keyword">if</span> dist<span class="token punctuation">.</span>get_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>module<span class="token punctuation">,</span> <span class="token string">"saved_model.ckpt"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>理论上，在没有buffer参数的情况下，DDP性能和单卡Gradint Accumulation 性能一样</p></li></ul><h4 id="DistributedSampler-采样器详解"><a href="#DistributedSampler-采样器详解" class="headerlink" title="DistributedSampler 采样器详解"></a>DistributedSampler 采样器详解</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>distributed <span class="token keyword">import</span> DistributedSamplertorch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>init_process_group<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">"nccl"</span><span class="token punctuation">)</span>input_size <span class="token operator">=</span> <span class="token number">5</span>output_size <span class="token operator">=</span> <span class="token number">2</span>batch_size <span class="token operator">=</span> <span class="token number">2</span>data_size <span class="token operator">=</span> <span class="token number">17</span>local_rank <span class="token operator">=</span> torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>get_rank<span class="token punctuation">(</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>set_device<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">,</span> local_rank<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RandomDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> size<span class="token punctuation">,</span> length<span class="token punctuation">,</span> local_rank<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> length        self<span class="token punctuation">.</span>data <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">11</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">13</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">14</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">15</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span>                                 torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>local_rank <span class="token operator">=</span> local_rank    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">len</span>dataset <span class="token operator">=</span> RandomDataset<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> data_size<span class="token punctuation">,</span> local_rank<span class="token punctuation">)</span>sampler <span class="token operator">=</span> DistributedSampler<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>  <span class="token comment"># 这个应该定义了采样后的index</span>rand_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span>                         batch_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                         sampler<span class="token operator">=</span>sampler<span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>   <span class="token comment"># </span><span class="token comment"># 如果使用了上面两条命令的话，将会将整个dataset 划分nproc_per_node份，然后再分给每个进程，如果只使用下面的这句就表示他在每个进程都分配完整的数据集，也就是两倍的数据集</span><span class="token comment"># rand_loader = DataLoader(dataset=dataset, batch_size=batch_size, sampler=None, shuffle=True)</span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> e <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"step"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    sampler<span class="token punctuation">.</span>set_epoch<span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 注意，如果不更新这个step的话，会让模型每epoch运行的index的顺序都是一样的</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> rand_loader<span class="token punctuation">:</span>        <span class="token keyword">if</span> local_rank <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    e <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment"># 命令行运行策略</span>CUDA_VISIBLE_DEVICES<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> python <span class="token operator">-</span>m torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>launch <span class="token operator">-</span><span class="token operator">-</span>nproc_per_node<span class="token operator">=</span><span class="token number">2</span> test<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：注释中的两个中文写的地方， sampler和set_epoch， DDP中的sampler可以对不同的进程进行分发数据</strong></p><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><ul><li>需要使用<code>torch.distributed.launch</code> 来启动</li><li>作用<ul><li>–nnodes 有多少台机器</li><li>–note_rank 当前是哪台机器</li><li>–nproc_per_node每台机器有多少个进程</li><li>高级参数（多机模式）<ul><li>通讯的address</li><li>通讯的port</li></ul></li></ul></li><li>实现方式<ul><li>我们需要在每一台机器上（m台） 都运行一次<code>torch.distributed.launch</code></li><li>每个<code>torch.distributed.launch</code> 其中n个进程，并且给每个进程一个 –local_rank &#x3D; i 的参数，所以需要在main文件中新增local_rank 参数的原因</li><li>得到m *n个进程 world_size &#x3D; n* m</li></ul></li></ul><h4 id="单机运行"><a href="#单机运行" class="headerlink" title="单机运行"></a>单机运行</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Bash运行</span><span class="token comment"># 假设我们只在一台机器上运行，可用卡数是8</span>python <span class="token parameter variable">-m</span> torch.distributed.launch <span class="token parameter variable">--nproc_per_node</span> <span class="token number">8</span> main.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="多卡"><a href="#多卡" class="headerlink" title="多卡"></a>多卡</h4><p>master 进程就是rank&#x3D;0的进程</p><ul><li>通信的address <ul><li>–master_address </li><li>master的网络地址</li><li>默认是127.0.0.1 只能单机</li></ul></li><li>通讯的port<ul><li>–master_port</li><li>默认29500</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## Bash运行</span><span class="token comment"># 假设我们在2台机器上运行，每台可用卡数是8</span><span class="token comment">#    机器1：</span>python <span class="token operator">-</span>m torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>launch <span class="token operator">-</span><span class="token operator">-</span>nnodes<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">-</span><span class="token operator">-</span>node_rank<span class="token operator">=</span><span class="token number">0</span> <span class="token operator">-</span><span class="token operator">-</span>nproc_per_node <span class="token number">8</span> \  <span class="token operator">-</span><span class="token operator">-</span>master_adderss $my_address <span class="token operator">-</span><span class="token operator">-</span>master_port $my_port main<span class="token punctuation">.</span>py<span class="token comment">#    机器2：</span>python <span class="token operator">-</span>m torch<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>launch <span class="token operator">-</span><span class="token operator">-</span>nnodes<span class="token operator">=</span><span class="token number">2</span> <span class="token operator">-</span><span class="token operator">-</span>node_rank<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span><span class="token operator">-</span>nproc_per_node <span class="token number">8</span> \  <span class="token operator">-</span><span class="token operator">-</span>master_adderss $my_address <span class="token operator">-</span><span class="token operator">-</span>master_port $my_port main<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>技巧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 假设我们只用4,5,6,7号卡</span><span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token string">"4,5,6,7"</span> python <span class="token parameter variable">-m</span> torch.distributed.launch <span class="token parameter variable">--nproc_per_node</span> <span class="token number">4</span> main.py<span class="token comment"># 假如我们还有另外一个实验要跑，也就是同时跑两个不同实验。</span><span class="token comment">#    这时，为避免master_port冲突，我们需要指定一个新的。</span><span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token string">"4,5,6,7"</span> python <span class="token parameter variable">-m</span> torch.distributed.launch <span class="token parameter variable">--nproc_per_node</span> <span class="token number">4</span> <span class="token punctuation">\</span>    <span class="token parameter variable">--master_port</span> <span class="token number">53453</span> main.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="mp-spawn调用"><a href="#mp-spawn调用" class="headerlink" title="mp.spawn调用"></a>mp.spawn调用</h4><p>pytorch引入了torch.multiprocessing.spawn 是单卡和DDP下的外部调用一直，也就是不使用torch.distributed.launch.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo_fn</span><span class="token punctuation">(</span>rank<span class="token punctuation">,</span> world_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    dist<span class="token punctuation">.</span>init_process_group<span class="token punctuation">(</span><span class="token string">"nccl"</span><span class="token punctuation">,</span> rank<span class="token operator">=</span>rank<span class="token punctuation">,</span> world_size<span class="token operator">=</span>world_size<span class="token punctuation">)</span>    <span class="token comment"># lots of code.</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">run_demo</span><span class="token punctuation">(</span>demo_fn<span class="token punctuation">,</span> world_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    mp<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>demo_fn<span class="token punctuation">,</span>             args<span class="token operator">=</span><span class="token punctuation">(</span>world_size<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             nprocs<span class="token operator">=</span>world_size<span class="token punctuation">,</span>             join<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果算法是提供给别人的，用mp.spawn更方便，如果是自己用launch简单</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">############</span><span class="token comment">## main.py文件</span><span class="token keyword">import</span> argparse<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token comment"># 新增：</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>distributed <span class="token keyword">as</span> dist<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>parallel <span class="token keyword">import</span> DistributedDataParallel <span class="token keyword">as</span> DDP<span class="token comment">### 1. 基础模块 ### </span><span class="token comment"># 假设我们的模型是这个，与DDP无关</span><span class="token keyword">class</span> <span class="token class-name">ToyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ToyModel<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment"># 假设我们的数据是这个</span><span class="token keyword">def</span> <span class="token function">get_dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    transform <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    my_trainset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span>    <span class="token comment"># DDP：使用DistributedSampler，DDP帮我们把细节都封装起来了。</span>    <span class="token comment">#      用，就完事儿！sampler的原理，第二篇中有介绍。</span>    train_sampler <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>distributed<span class="token punctuation">.</span>DistributedSampler<span class="token punctuation">(</span>my_trainset<span class="token punctuation">)</span>    <span class="token comment"># DDP：需要注意的是，这里的batch_size指的是每个进程下的batch_size。</span>    <span class="token comment">#      也就是说，总batch_size是这里的batch_size再乘以并行数(world_size)。</span>    trainloader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>my_trainset<span class="token punctuation">,</span>         batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> sampler<span class="token operator">=</span>train_sampler<span class="token punctuation">)</span>    <span class="token keyword">return</span> trainloader    <span class="token comment">### 2. 初始化我们的模型、数据、各种配置  ###</span><span class="token comment"># DDP：从外部得到local_rank参数</span>parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--local_rank"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>FLAGS <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>local_rank <span class="token operator">=</span> FLAGS<span class="token punctuation">.</span>local_rank<span class="token comment"># DDP：DDP backend初始化</span>torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>set_device<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span>dist<span class="token punctuation">.</span>init_process_group<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'nccl'</span><span class="token punctuation">)</span>  <span class="token comment"># nccl是GPU设备上最快、最推荐的后端</span><span class="token comment"># 准备数据，要在DDP初始化之后进行</span>trainloader <span class="token operator">=</span> get_dataset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 构造模型</span>model <span class="token operator">=</span> ToyModel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span><span class="token comment"># DDP: Load模型要在构造DDP模型之前，且只需要在master上加载就行了。</span>ckpt_path <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> dist<span class="token punctuation">.</span>get_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> ckpt_path <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ckpt_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># DDP: 构造DDP model</span>model <span class="token operator">=</span> DDP<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device_ids<span class="token operator">=</span><span class="token punctuation">[</span>local_rank<span class="token punctuation">]</span><span class="token punctuation">,</span> output_device<span class="token operator">=</span>local_rank<span class="token punctuation">)</span><span class="token comment"># DDP: 要在构造DDP model之后，才能用model初始化optimizer。</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token comment"># 假设我们的loss是这个</span>loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span><span class="token comment">### 3. 网络训练  ###</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>iterator <span class="token operator">=</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> iterator<span class="token punctuation">:</span>    <span class="token comment"># DDP：设置sampler的epoch，</span>    <span class="token comment"># DistributedSampler需要这个来指定shuffle方式，</span>    <span class="token comment"># 通过维持各个进程之间的相同随机数种子使不同进程能获得同样的shuffle效果。</span>    trainloader<span class="token punctuation">.</span>sampler<span class="token punctuation">.</span>set_epoch<span class="token punctuation">(</span>epoch<span class="token punctuation">)</span>    <span class="token comment"># 后面这部分，则与原来完全一致了。</span>    <span class="token keyword">for</span> data<span class="token punctuation">,</span> label <span class="token keyword">in</span> trainloader<span class="token punctuation">:</span>        data<span class="token punctuation">,</span> label <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>local_rank<span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        prediction <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>prediction<span class="token punctuation">,</span> label<span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        iterator<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">"loss = %0.3f"</span> <span class="token operator">%</span> loss        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># DDP:</span>    <span class="token comment"># 1. save模型的时候，和DP模式一样，有一个需要注意的点：保存的是model.module而不是model。</span>    <span class="token comment">#    因为model其实是DDP model，参数是被`model=DDP(model)`包起来的。</span>    <span class="token comment"># 2. 只需要在进程0上保存一次就行了，避免多次保存重复的东西。</span>    <span class="token keyword">if</span> dist<span class="token punctuation">.</span>get_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>module<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%d.ckpt"</span> <span class="token operator">%</span> epoch<span class="token punctuation">)</span><span class="token comment">############</span><span class="token comment">## Bash运行</span><span class="token comment"># DDP: 使用torch.distributed.launch启动DDP模式</span><span class="token comment"># 使用CUDA_VISIBLE_DEVICES，来决定使用哪些GPU</span><span class="token comment"># CUDA_VISIBLE_DEVICES="0,1" python -m torch.distributed.launch --nproc_per_node 2 main.py</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结:</strong></p><ul><li><p>首先需要从外部得到local_rank参数，然后设置device，然后初始化ddp进程组</p></li><li><p>必须要ddp初始化后再准备数据，因为数据需要用到ddp的sampler</p><ul><li>得到dataset</li><li>得到sampler</li><li>得到loader，loader的batch_size为一个线程的batch_size</li></ul></li><li><p>如有需要，主进程上加载模型</p></li><li><p>构建DDP model</p></li><li><p>创建DDPmodel 的optimizer</p></li><li><p>loss function</p></li><li><p>训练</p><ul><li>更新step，控制不同进程之间相同的随机数种子，不同的进程获得同样的shuffle效果</li><li>遍历数据<ul><li>前向传播</li><li>zero_grad</li><li>计算loss， backward·</li><li>step</li></ul></li><li>val<ul><li>在主进程上save model ，值得注意的是需要保存的是model.module.state_dict()</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>torch_dataset</title>
      <link href="/2022/09/07/dlandml/torch-dataset/"/>
      <url>/2022/09/07/dlandml/torch-dataset/</url>
      
        <content type="html"><![CDATA[<h3 id="detaset的-sample的采样关系"><a href="#detaset的-sample的采样关系" class="headerlink" title="detaset的 sample的采样关系"></a>detaset的 sample的采样关系</h3><p>而batch_sampler则是将sampler生成的indices打包分组，得到一个又一个batch的index。</p><p>Pytorch中已经实现的<code>Sampler</code>有如下几种：</p><ul><li><code>SequentialSampler</code></li><li><code>RandomSampler</code></li><li><code>WeightedSampler</code></li><li><code>SubsetRandomSampler</code></li></ul><p>需要注意的是DataLoader的部分初始化参数之间存在互斥关系，这个你可以通过阅读<a href="https://link.zhihu.com/?target=https://github.com/pytorch/pytorch/blob/0b868b19063645afed59d6d49aff1e43d1665b88/torch/utils/data/dataloader.py%23L157-L182">源码</a>更深地理解，这里只做总结：</p><ul><li><p>如果你自定义了<code>batch_sampler</code>,那么这些参数都必须使用默认值：<code>batch_size</code>, <code>shuffle</code>,<code>sampler</code>,<code>drop_last</code>.</p></li><li><p>如果你自定义了<code>sampler</code>，那么<code>shuffle</code>需要设置为<code>False</code></p></li><li><p>如果<code>sampler</code>和<code>batch_sampler</code>都为<code>None</code>,那么<code>batch_sampler</code>使用Pytorch已经实现好的<code>BatchSampler</code>,而<code>sampler</code>分两种情况：</p></li><li><ul><li>若<code>shuffle=True</code>,则<code>sampler=RandomSampler(dataset)</code></li><li>若<code>shuffle=False</code>,则<code>sampler=SequentialSampler(dataset)</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nltk下载配置</title>
      <link href="/2022/08/08/cs/nltk-xia-zai-pei-zhi/"/>
      <url>/2022/08/08/cs/nltk-xia-zai-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/shomy_liu/article/details/48637683">https://blog.csdn.net/shomy_liu/article/details/48637683</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>评价指标and损失函数等</title>
      <link href="/2022/08/07/dlandml/ping-jie-zhi-biao-and-sun-shi-han-shu-deng/"/>
      <url>/2022/08/07/dlandml/ping-jie-zhi-biao-and-sun-shi-han-shu-deng/</url>
      
        <content type="html"><![CDATA[<h5 id="ROC"><a href="#ROC" class="headerlink" title="ROC"></a>ROC</h5><blockquote><p>对所有样本进行划分区间，并且遍历所有阈值查看模型分类效果，查看模型对两类数据的区分度是否够大，类间距是否足够明显</p></blockquote><p>在遍历不同的阈值的时候，需要刻画两种指标，</p><ul><li>纵坐标是用 <code>TPR</code>即预测为正，实际为占所有实际为正的比例，</li><li>2横坐标 <code>FPR</code> 预测为正，实际为负所有实际为负样本的比例</li></ul><p><img src="/BlogImgs/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87and%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E7%AD%89/image-20220807083759846.png" alt="image-20220807083759846"></p><p>当阈值为0.6的时候，预测为正实际为正的概率为0.8 预测为正实际为负的概率为0.2</p><h5 id="AUC"><a href="#AUC" class="headerlink" title="AUC"></a>AUC</h5><p>一般情况下，</p><ol><li><strong>AUC&#x3D; ROC曲线下的面积</strong></li></ol><p>但是存在另外一种算法，该算法可以看成是一种积分的方式，假设正样本和负样本分隔的很开，那么由于横坐标变化的范围一般可以说是负样本的个数，于是，当理想情况下， 在遍历所有正样本的时候，每个正样本都比N个负样本大，于是预测为正，实际为负的就一直是0，故可以理解为积分变量一直是N，一直持续M次，故积分面积是M*N，且x，y区域面积为AUC，于是，理想情况下AUC为 1</p><ol start="2"><li>另一个算法为</li></ol><p>在所有正样本中，当阈值为0.9 时，有5个负样本在前面，记为5， 同理0.8， 0.7的时候有5个负样本在前。而当阈值为0.6对的时候有4个负样本在前，记为4，当概率等于0.4的时候，有三个负样本在前，记为3 交叉区域为5*5&#x3D;25 故最终也等于0.88<br>$$<br>A U C&#x3D;\frac{\sum_{i \in \text { PositiveClass }} r_{a n k_{i}}-\frac{M *(1+M)}{2}}{M \times N}<br>$$</p><h5 id="GAUC"><a href="#GAUC" class="headerlink" title="GAUC"></a>GAUC</h5><blockquote><p><strong>推荐模型目前比较成熟的模式是训练分类模型，这个分类模型的任务是预测用户是否会点击给定的商品，因此，推荐系统的核心，仍然是一个二分类问题，但是是更细力度的二分类</strong></p></blockquote><p>$$<br>G A U C&#x3D;\frac{\sum_{(u, p)} w_{(u, p)} * A U C_{(u, p)}}{\sum_{(u, p)} w_{(u, p)}}<br>$$</p><p><strong>而在计算广告领域，我们实际要衡量的是不同用户对不同广告之间的排序能力</strong></p><p><strong>因此实际应该更关注的是同一个用户对不同广告间的排序能力。</strong></p><p>GAUC 实际更关注同一个用户对不同广告间的排序能力，然后加权平均，最后得到group auc， 这样就可以减少不同用户间排序结果不太好比较这一个影响</p><h5 id="nn-NLLLoss"><a href="#nn-NLLLoss" class="headerlink" title="nn.NLLLoss()"></a>nn.NLLLoss()</h5><p>该损失函数搭配 <code>F.log_softmax</code>一起使用，他的输入是predict <code>(n, category)</code>和 label<code>(n, )</code>，具体计算方式是将label中的对应的值取出作为predict的index，取负号输出。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">predict <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>label <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>nllloss<span class="token punctuation">(</span>predict<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token comment"># index 分别是1 和2 ，取3,9 做平均输出</span><span class="token comment"># output: tensor(-6)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其与<code>torch.nn.CrossEntropyLoss</code>等价，即 <code>nn.NLLLoss(F.log_softmax(predict), label)</code>  <code>nn.NLLLoss(torch.log(torch.softmax(predict)), label)</code> </p>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wv音频转化</title>
      <link href="/2022/08/01/cs/wv-yin-pin-zhuan-hua/"/>
      <url>/2022/08/01/cs/wv-yin-pin-zhuan-hua/</url>
      
        <content type="html"><![CDATA[<p>本来要跑一个语音分离的baseline，要用到一个数据集，数据格式为<code>wv</code> 于是要用到sph2pipe转化</p><h5 id="如何正确安装kaldi－－同时安装sph2pipe"><a href="#如何正确安装kaldi－－同时安装sph2pipe" class="headerlink" title="如何正确安装kaldi－－同时安装sph2pipe"></a>如何正确安装kaldi－－同时安装sph2pipe</h5><p><a href="https://blog.csdn.net/m17551052704/article/details/97392228">ref</a></p><ol><li>从github上的kaldi代码复制到本地</li></ol><blockquote><p>git clone <a href="https://github.com/kaldi-asr/kaldi.git">https://github.com/kaldi-asr/kaldi.git</a></p></blockquote><ol start="2"><li><p>配置</p><ol><li><p>进入kaldi文件 <code>cd kaldi</code></p></li><li><blockquote><ul><li><p>cd kaldi</p></li><li><p>cd tools</p><ul><li><code>extras/check_dependencies.sh</code>(检查C++依赖是否有问题)</li><li>如果出现缺少kaldi.mk文件，则执行：<code>extras/install_mkl.sh</code></li><li>如果还有其它问题，可直接观察报错信息，报错信息上会有详细指示</li><li>在以上步骤结束后，仍然在tools文件夹下输入<code>make</code>指令</li><li>在make解决如果遇到github文件未下载下来后，需要手动执行报错的下载的命令，然后再下载</li></ul></li><li><p>进入src文件夹进行安装</p></li><li><p>按顺序输入以下三个指令：<code>./configure --shared</code>, <code>make depend -j 8</code>,<code>make -j 8</code></p></li></ul></blockquote></li></ol></li></ol><p>sph2pipe的使用</p><ol><li><p>sph2pipe在kaldi中的相对路径:&#x2F;kaldi&#x2F;tools&#x2F;sph2pipe_v2.5。</p></li><li><p>进入该文件夹后，可以看到sph2pipe文件，使用<code>./sph2pipe a b</code>指令即可实现文件a到文件b的转换。<br>例如，<code>./sph2pipe xxx.WAV xxx.wav</code>即可将sphere格式的音频文件转换为Riff开头的wav文件。</p></li></ol><h5 id="wsj0原数据集（LDC93S6A-或者-LDC93S6B）"><a href="#wsj0原数据集（LDC93S6A-或者-LDC93S6B）" class="headerlink" title="wsj0原数据集（LDC93S6A 或者 LDC93S6B）"></a>wsj0原数据集（LDC93S6A 或者 LDC93S6B）</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""# example:# 11-1.1/wsj0/si_tr_s/01t/01to030v.wv1 is converted to wav and # stored in YOUR_PATH/wsj0/si_tr_s/01t/01to030v.wav"""</span><span class="token keyword">import</span> os<span class="token comment"># the root dir for WSJ0 corpus</span>root_dir <span class="token operator">=</span> <span class="token string">""</span> <span class="token comment">#here add your original wsj0 dataset directory</span><span class="token comment"># the disc number</span>disc_dir <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> list_disc <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> list_disc <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"doc"</span><span class="token punctuation">,</span> <span class="token string">"11-13.1"</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#doc file and 11-13.1 file do not contain .wv files</span>        <span class="token comment"># the data dir for each disc</span>        disc_dir<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> list_disc<span class="token punctuation">,</span> <span class="token string">"wsj0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_path <span class="token operator">=</span> <span class="token string">"YOUR PATH\\wsj0"</span> <span class="token comment">#here add your target directory</span><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>my_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>my_path<span class="token punctuation">)</span><span class="token comment"># the sub_data dir for each disc</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> list_sub_data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>disc_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> sub_data_dir <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>list_sub_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        s_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>my_path<span class="token punctuation">,</span> sub_data_dir<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>s_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>s_dir<span class="token punctuation">)</span>        <span class="token keyword">if</span> sub_data_dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'s'</span><span class="token punctuation">:</span>            datatype_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>list_sub_data<span class="token punctuation">,</span> sub_data_dir<span class="token punctuation">)</span>            <span class="token keyword">for</span> list_spk <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>datatype_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                spk_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>s_dir<span class="token punctuation">,</span> list_spk<span class="token punctuation">)</span>                spk_dir_abs <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>datatype_dir<span class="token punctuation">,</span> list_spk<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>spk_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>spk_dir<span class="token punctuation">)</span>                <span class="token keyword">for</span> wv_file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>spk_dir_abs<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token keyword">not</span> wv_file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.wv1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#only convert the .wv1 files, you can note the two lines to choose converting .wv1 and .wv2 files</span>                        <span class="token keyword">continue</span>                    speech_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>spk_dir_abs<span class="token punctuation">,</span> wv_file<span class="token punctuation">)</span>                    target_name <span class="token operator">=</span> wv_file<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.wav'</span>                    target_dir <span class="token operator">=</span> spk_dir <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> target_name                    <span class="token comment"># rif(wav)</span>                    cmd <span class="token operator">=</span> <span class="token string">"YOUR PATH\\sph2pipe -f rif "</span> <span class="token operator">+</span> speech_dir <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> target_dir                    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token comment"># FOR LDC93S6B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""# example:# 11-1.1/wsj0/si_tr_s/01t/01to030v.wv1 is converted to wav and# stored in YOUR_PATH/wsj0/si_tr_s/01t/01to030v.wav"""</span><span class="token keyword">import</span> os<span class="token comment"># the root dir for WSJ0 corpus</span>root_dir <span class="token operator">=</span> <span class="token string">""</span><span class="token comment"># the disc number</span>disc_dir <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> list_disc <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>root_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> list_disc <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"11-13.1"</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#doc file and 11-13.1 file do not contain .wv files</span>        <span class="token comment"># the data dir for each disc</span>        disc_dir<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span> list_disc<span class="token punctuation">,</span> <span class="token string">"wsj0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_path <span class="token operator">=</span> <span class="token string">"YOUR PATH\\wsj0"</span><span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>my_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>my_path<span class="token punctuation">)</span><span class="token comment"># # the sub_data dir for each disc</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> list_sub_data <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>disc_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> sub_data_dir <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>list_sub_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> sub_data_dir<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"si"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token keyword">not</span> sub_data_dir<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"sd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        s_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>my_path<span class="token punctuation">,</span> sub_data_dir<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>s_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>s_dir<span class="token punctuation">)</span>        <span class="token keyword">if</span> sub_data_dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'s'</span><span class="token punctuation">:</span>            datatype_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>list_sub_data<span class="token punctuation">,</span> sub_data_dir<span class="token punctuation">)</span>            <span class="token keyword">for</span> list_spk <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>datatype_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                spk_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>s_dir<span class="token punctuation">,</span> list_spk<span class="token punctuation">)</span>                spk_dir_abs <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>datatype_dir<span class="token punctuation">,</span> list_spk<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>spk_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>spk_dir<span class="token punctuation">)</span>                <span class="token keyword">for</span> wv_file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>spk_dir_abs<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> wv_file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.wv1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token keyword">not</span> wv_file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.wv2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    speech_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>spk_dir_abs<span class="token punctuation">,</span> wv_file<span class="token punctuation">)</span>                    <span class="token keyword">if</span> wv_file<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"wv1"</span><span class="token punctuation">:</span>                        target_name <span class="token operator">=</span> wv_file<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.wav'</span>                    <span class="token keyword">elif</span> wv_file<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'wv2'</span><span class="token punctuation">:</span>                        target_name <span class="token operator">=</span> wv_file<span class="token punctuation">.</span>split<span class="token punctuation">(</span>sep<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'_1.wav'</span>                    target_dir <span class="token operator">=</span> spk_dir <span class="token operator">+</span> <span class="token string">'\\'</span> <span class="token operator">+</span> target_name                    <span class="token comment"># rif == wav</span>                    cmd <span class="token operator">=</span> <span class="token string">"YOUR PATH\\sph2pipe -f wav "</span> <span class="token operator">+</span> speech_dir <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> target_dir                    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token comment"># for LDC93S6A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qv2Ray</title>
      <link href="/2022/07/25/cs/qv2ray/"/>
      <url>/2022/07/25/cs/qv2ray/</url>
      
        <content type="html"><![CDATA[<p><a href="https://baiyunju.cc/7273">https://baiyunju.cc/7273</a></p><h1 id="一些基本的概念"><a href="#一些基本的概念" class="headerlink" title="一些基本的概念"></a>一些基本的概念</h1><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>阻断(Block) 拦截向外发送的连接请求，禁止联网</li><li>直连（Direct ） 直接访问外部网络，不走代理</li><li>代理（Proxy）允许通过代理连接上网</li></ul><h3 id="查看某个网站域名或者ip是代理还是直接的办法"><a href="#查看某个网站域名或者ip是代理还是直接的办法" class="headerlink" title="查看某个网站域名或者ip是代理还是直接的办法"></a>查看某个网站域名或者ip是代理还是直接的办法</h3><p>可以通过查看V2RayN或QV2Ray客户端日志信息了解是如何连接网站的，如下图：</p><p><img src="/BlogImgs/Qv2Ray/image-20220725200702788.png" alt="image-20220725200702788"></p><p>如图，github走的就是proxy</p><h1 id="如何在代理，直连，和阻止中填写"><a href="#如何在代理，直连，和阻止中填写" class="headerlink" title="如何在代理，直连，和阻止中填写"></a>如何在代理，直连，和阻止中填写</h1><h2 id="一、域名路由规则的写法："><a href="#一、域名路由规则的写法：" class="headerlink" title="一、域名路由规则的写法："></a>一、域名路由规则的写法：</h2><h3 id="预定义域名列表-geosite"><a href="#预定义域名列表-geosite" class="headerlink" title="预定义域名列表 geosite:"></a>预定义域名列表 geosite:</h3><p>以 geosite: 开头，后面是一个预定义域名列表名称，如 geosite:google ，意思是包含了Google旗下绝大部分域名；或者 geosite:cn，意思是包含了常见的大陆站点域名。<strong>常用名称及域名列表：</strong></p><blockquote><p><strong>category-ads：</strong>包含了常见的广告域名。<br><strong>category-ads-all：</strong>包含了常见的广告域名，以及广告提供商的域名。<br><strong>cn：</strong>相当于 geolocation-cn 和 tld-cn 的合集。<br><strong>apple：</strong>包含了 Apple 旗下绝大部分域名。<br><strong>google：</strong>包含了 Google 旗下绝大部分域名。<br><strong>microsoft：</strong>包含了 Microsoft 旗下绝大部分域名。<br><strong>facebook：</strong>包含了 Facebook 旗下绝大部分域名。<br><strong>twitter：</strong>包含了 Twitter 旗下绝大部分域名。<br><strong>telegram：</strong>包含了 Telegram 旗下绝大部分域名。<br><strong>geolocation-cn：</strong>包含了常见的大陆站点域名。<br><strong>geolocation-!cn：</strong>包含了常见的非大陆站点域名，同时包含了 tld-!cn。<br><strong>tld-cn：</strong>包含了 CNNIC 管理的用于中国大陆的顶级域名，如以 .cn、.中国 结尾的域名。<br><strong>tld-!cn：</strong>包含了非中国大陆使用的顶级域名，如以 .hk（香港）、.tw（台湾）、.jp（日本）、.sg（新加坡）、.us（美国）.ca（加拿大）等结尾的域名。<br><strong>更多域名类别</strong>，请查看 <a href="https://github.com/v2fly/domain-list-community/tree/master/data">data 目录</a></p></blockquote><h3 id="域名-domain"><a href="#域名-domain" class="headerlink" title="域名 domain:"></a>域名 domain:</h3><p>由 domain: 开始，后面是一个域名。例如 domain:baiyunju.cc ，匹配 <a href="http://www.baiyunju.cc/">www.baiyunju.cc</a> 、baiyunju.cc，以及其他baiyunju.cc主域名下的子域名。</p><p>不过，前缀domain:可以省略，只输入域名，其实也就成了纯字符串了。</p><h3 id="完整匹配-full"><a href="#完整匹配-full" class="headerlink" title="完整匹配 full:"></a>完整匹配 full:</h3><p>由 full: 开始，后面是一个域名。例如 full:baiyunju.cc 只匹配 baiyunju.cc，但不匹配 <a href="http://www.baiyunju.cc/">www.baiyunju.cc</a> 。</p><h3 id="纯字符串"><a href="#纯字符串" class="headerlink" title="纯字符串"></a>纯字符串</h3><p>比如直接输入 sina.com, 可以分行，也可以不分行以“,”隔开，可以匹配 sina.com、sina.com.cn 和 <a href="http://www.sina.com,但不匹配/">www.sina.com，但不匹配</a> sina.cn。</p><h3 id="正则表达式-regexp"><a href="#正则表达式-regexp" class="headerlink" title="正则表达式 regexp:"></a>正则表达式 regexp:</h3><p>由 regexp: 开始，后面是一个正则表达式。例如 regexp:.goo.*.com$ 匹配 <a href="http://www.google.com、fonts.googleapis.com,但不匹配/">www.google.com、fonts.googleapis.com，但不匹配</a> google.com。</p><h3 id="从外部文件中加载域名规则-ext"><a href="#从外部文件中加载域名规则-ext" class="headerlink" title="从外部文件中加载域名规则 ext:"></a>从外部文件中加载域名规则 ext:</h3><p>比如 ext:file:tag，必须以 ext:（全部小写）开头，后面跟文件名（不含扩展名）file 和标签 tag，文件必须存放在 V2Ray 核心的资源目录中，文件格式与 geosite.dat 相同，且指定的标签 tag 必须在文件中存在。</p><p>说明：普通用户常用的也就是上面的“纯字符串”规则写法，比如，在代理（或直连）栏下填写 baiyunju.cc,　就可以让网站通过代理（或直连）上网。</p><h2 id="二、IP-路由规则的写法："><a href="#二、IP-路由规则的写法：" class="headerlink" title="二、IP 路由规则的写法："></a>二、IP 路由规则的写法：</h2><p>以 geoip:（全部小写）开头，后面跟双字符国家代码，如 geoip:cn ，意思是所有中国大陆境内的 IP 地址，geoip:us 代表美国境内的 IP 地址。</p><h3 id="特殊值："><a href="#特殊值：" class="headerlink" title="特殊值："></a>特殊值：</h3><p>geoip:private，包含所有私有地址，如127.0.0.1（本条规则仅支持 V2Ray 3.5 以上版本）。</p><h3 id="IP："><a href="#IP：" class="headerlink" title="IP："></a>IP：</h3><p>如 127.0.0.1，20.194.25.232</p><h3 id="CIDR："><a href="#CIDR：" class="headerlink" title="CIDR："></a>CIDR：</h3><p>如 10.0.0.0&#x2F;8。</p><h3 id="从外部文件中加载-IP-规则："><a href="#从外部文件中加载-IP-规则：" class="headerlink" title="从外部文件中加载 IP 规则："></a>从外部文件中加载 IP 规则：</h3><p>如 ext:file:tag，必须以 ext:（全部小写）开头，后面跟文件名（不含扩展名）file 和标签 tag，文件必须存放在 V2Ray 核心的资源目录中，文件格式与 geoip.dat 相同，且指定的 tag 必须在文件中存在。</p><h1 id="V2Ray域名解析策略的含义、区别，以及最佳选择"><a href="#V2Ray域名解析策略的含义、区别，以及最佳选择" class="headerlink" title="V2Ray域名解析策略的含义、区别，以及最佳选择"></a>V2Ray域名解析策略的含义、区别，以及最佳选择</h1><p>在V2Ray的安卓、苹果、Windows等手机和电脑客户端中，路由设置的域名解析策略有三项选择，分别是 <strong>“AsIs”、”IPIfNonMatch”、”IPOnDemand”</strong>。</p><p><strong>“AsIs”：</strong><br>只使用域名进行路由选择。快速解析，不精确分流。默认值。</p><p><strong>“IPOnDemand”：</strong><br>当匹配时碰到任何基于 IP 的规则，将域名立即解析为 IP 进行匹配。解析最精确，也最慢。</p><p><strong>“IPIfNonMatch”：</strong><br>当域名没有匹配任何规则时，将域名解析成 IP（A 记录或 AAAA 记录）再次进行匹配；<br>当一个域名有多个 A 记录时，会尝试匹配所有的 A 记录，直到其中一个与某个规则匹配为止；<br>解析后的 IP 仅在路由选择时起作用，转发的数据包中依然使用原始域名；<br>理论上解析比”AsIs”稍慢，但使用中通常不会觉察到。</p><h2 id="V2Ray域名策略解析选择哪个更好？"><a href="#V2Ray域名策略解析选择哪个更好？" class="headerlink" title="V2Ray域名策略解析选择哪个更好？"></a>V2Ray域名策略解析选择哪个更好？</h2><p>虽然V2Ray官方解释”AsIs”是默认值，但是实际上，在几款<strong>主流客户端中，有的默认值是”AsIs”，有的是”IPIfNonMatch”</strong>。</p><p>因此，选择”AsIs”或”IPIfNonMatch”都可以。</p><p>但是，如果在自定义路由设置规则时，添加了匹配IP的路由代理规则，比如geoip:cn、geoip:private，或者直接添加的IP地址规则，<strong>必须选择位于中间的”IPIfNonMatch”，不然，匹配IP地址的路由规则不会生效</strong></p><p>因此，在V2Ray客户端的域名解析策略中，最好选择”IPIfNonMatch”。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>环境问题</title>
      <link href="/2022/07/25/cs/huan-jing-wen-ti/"/>
      <url>/2022/07/25/cs/huan-jing-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="nvidia-smi-报错：无法与-nvidia-driver-通信"><a href="#nvidia-smi-报错：无法与-nvidia-driver-通信" class="headerlink" title="nvidia-smi 报错：无法与 nvidia driver 通信"></a>nvidia-smi 报错：无法与 nvidia driver 通信</h4><blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>原因：可能由于升级了系统组件，于是出现了组件版本不匹配的问题</p><p>解决办法:</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> dkms<span class="token function">sudo</span> dkms <span class="token function">install</span> <span class="token parameter variable">-m</span> nvidia <span class="token parameter variable">-v</span> <span class="token number">418.87</span>.00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>其中，418.87.00 是之前安装 nvidia 驱动的版本号，可通过下面方法查到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /usr/src <span class="token operator">|</span> <span class="token function">grep</span> nvidia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="nvidia-smi出现的比较慢"><a href="#nvidia-smi出现的比较慢" class="headerlink" title="nvidia-smi出现的比较慢"></a>nvidia-smi出现的比较慢</h4><p>重新上个问题后出现显卡启动缓慢，解决办法</p><blockquote><p>sudo nvidia-persistenced –persistence-mode</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>typora破解</title>
      <link href="/2022/07/25/cs/typora-po-jie/"/>
      <url>/2022/07/25/cs/typora-po-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="在百度网盘-破解器中"><a href="#在百度网盘-破解器中" class="headerlink" title="在百度网盘 破解器中"></a>在百度网盘 破解器中</h4><ol><li><p>下载后直接安装Typora ，然后将将解压出的 <code>app.asar</code> 文件移动到 Typora 安装目录<code>resource</code> 文件夹下，替换掉原本的 <code>app.asar</code>:</p></li><li><p>替换掉 <code>app.asar</code> 后，重启 Typora。然后点击输入激活码， 任意邮箱号，</p></li><li><blockquote><p> E8Q9Y5-KXMTL5-7578SL-4S5XKS</p></blockquote></li></ol><p><img src="/BlogImgs/typora%E7%A0%B4%E8%A7%A3/165121892881286.png" alt="typora输入破解序列号"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux重装备份和环境配置</title>
      <link href="/2022/07/06/cs/linux-chong-zhuang-bei-fen-he-huan-jing-pei-zhi/"/>
      <url>/2022/07/06/cs/linux-chong-zhuang-bei-fen-he-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="记录一次linux从发现异常到直接重装整机再安装环境的过程"><a href="#记录一次linux从发现异常到直接重装整机再安装环境的过程" class="headerlink" title="记录一次linux从发现异常到直接重装整机再安装环境的过程"></a>记录一次linux从发现异常到直接重装整机再安装环境的过程</h3><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>linux莫名其妙崩溃，型号是dell 7920，具体表现是界面卡死，键盘卡死，皆无响应，即<code>ctrl+alt+f</code> 系列不管用，并且安全重启也不起作用，在强制关机后，dell主机电源开关显示灯闪烁情况是2黄4白，屏幕一点都不亮，怀疑操作系统都没打开；另外还有就是往往需要重启n次才会随机进入系统，但是进入系统后又会卡住。</p><h4 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h4><p>首先经过简单的排查后推测是内核错误，遂更新过内核，不起作用，但是重启后发现内核并没有完全更新，于是不确定这条路是否正确，其二是推测温度太高，导致硬盘宕机，系统卡死，后续将空调调低也没有改变现状，遂排除。</p><p>通过打售后电话后，了解到可能是内存条氧化问题，需要拔除内存条进行擦拭铜芯，以及上面的灰，为了排除是哪个内存条出了问题，于是还需逐一擦拭内存条并且开机测试，所幸，在擦完第一根内存条后就成功解决问题，系统可以正常进入。于是遂打算先将所有东西备份再做处理</p><h4 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h4><p>没有遇到什么问题，下载镜像，这里选择的是20版本，因为22版本实在太高，官方并没有进行测试，保险选择20，不选18是因为原系统就是18，存在内核问题，需要升级，综合考虑20最佳，选择rufus烧录，然后关机，再开机狂摁F12进入BIOS，选择U盘启动，正常安装</p><h4 id="重装之后bug"><a href="#重装之后bug" class="headerlink" title="重装之后bug"></a>重装之后bug</h4><p>不知道是dell的原因，还是原来磁盘的另一个ubuntu18引导没有删干净的原因，在开机的时候会进入grub引导程序，如果在这里不操作启动默认的ubuntu版本的话，在这里会浪费接近10s的时间，于是想删去ubuntu18的引导程序，并且让grub直接选择最新安装的ubuntu。节省开机时间</p><p>但是有点失败，没有找到合适的解决方案，只是成功将等待10s变为等待1s</p><p>方案为</p><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><p>一开始bug在一开始找了一个教程，似乎是很早之前的帖子被新拿出来了，整个过程极其复杂，需要新建用户，修改权限，新建用户home目录，绑定用户目录，赋权等一系列操作，还不包含ssh登录等一系列配置</p><p>但是后面找了几个操作的流程，如下：</p><blockquote><p>sudo adduser csdn # 次数的用户名需要符合一般命名规范，开始不能以数字，不包含大写字母，之后会让直接输入密码</p><p>  <strong>useradd</strong>：需要使用参数选项指定上述基本设置，如果不使用任何参数，则创建的用户无密码、无主目录、没有指定shell版本</p><p> <strong>adduser</strong>： 会自动为创建的用户指定主目录、系统shell版本，会在创建时输入用户密码。因此建议使用这个命令。</p><table><thead><tr><th>–home</th><th>指定创建主目录的路径，默认是在&#x2F;home目录下创建用户名同名的目录，这里可以指定；如果主目录同名目录存在，则不再创建，仅在登录时进入主目录。</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></blockquote><p>添加sudo 权限</p><blockquote><p>su</p><p>chmod u+w &#x2F;etc&#x2F;sudoers</p><p>vim &#x2F;etc&#x2F;sudoers </p><p>csdn    ALL&#x3D;(ALL:ALL) ALL  # 在root ALL&#x3D;(ALL:ALL) ALL 后添加</p></blockquote><p>删除用户</p><blockquote><p>deluser</p><p>root@user:~# userdel -rf 20testuser #一次性删除用户以及主目录</p><p>root@user:~#userdel 20testuser 不删除主目录</p></blockquote><h4 id="解决ssh远程登录问题"><a href="#解决ssh远程登录问题" class="headerlink" title="解决ssh远程登录问题"></a>解决ssh远程登录问题</h4><h4 id="安装cuda环境"><a href="#安装cuda环境" class="headerlink" title="安装cuda环境"></a>安装cuda环境</h4><p><a href="https://segmentfault.com/a/1190000040322236">refer</a></p><p>首先高版本的驱动兼容低版本的cuda，所以不用纠结驱动提示cuda和实际安装cuda是否一致</p><h5 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h5><ol><li><p>下载驱动<br><a href="https://link.segmentfault.com/?enc=O1qf+sP1st+tXy5KX/h0YQ==.hZ9h/hEttwki/7KNeD6Dj+IhZYlCrEoKeJKSiYB3nJbiE/siMbKAYmBOuJaUBnALGYpH/41WON+QZMwwrHXlLQKR/v96mWh6uqtltQggHSj4uRLXZG0FxM4XUzPHnLMAOgaLwNhr/IlPChB4TPRXhw==">website</a></p></li><li><p>禁用nouveau</p><blockquote><p>sudo gedit &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf </p><p>在blacklist.conf文件末尾加上这两行，并保存</p><p>blacklist nouveau</p><p>sudo update-initramfs -u  &#x2F;&#x2F;应用更改 重启电脑，验证是否禁用nouveau，这一条是用来禁用nouveau驱动，之后也不需要改回来。</p><p>lsmod | grep nouveau</p></blockquote></li><li><p>安装NVIDIA驱动</p><blockquote><p>开terminal卸载旧版本NVIDIA驱动：<br>sudo apt-get remove –purge nvidia*<br>sudo chmod  a+x NVIDIA-Linux-x86_64-460.84.run &#x2F;&#x2F;对应自己下载的驱动名称 可执行权力</p><p>sudo .&#x2F;NVIDIA-Linux-x86_64-460.84.run -no-x-check -no-nouveau-check -no-opengl-files<br>&#x2F;&#x2F; 注意：后面三个选项的前面都是：减号“-”</p><pre class="line-numbers language-none"><code class="language-none">The distribution-provided pre-install script failed! Are you sure you want to continue? 选择 yes 继续。Would you like to register the kernel module souces with DKMS? This will allow DKMS to automatically build a new module, if you install a different kernel later?  选择 No 继续。问题没记住，选项是：install without signing问题大概是：Nvidia&#39;s 32-bit compatibility libraries? 选择 No 继续。Would you like to run the nvidia-xconfigutility to automatically update your x configuration so that the NVIDIA x driver will be used when you restart x? Any pre-existing x confile will be backed up.  选择 Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h5 id="cuda"><a href="#cuda" class="headerlink" title="cuda"></a>cuda</h5><p><a href="https://link.segmentfault.com/?enc=B/9NC6w9mYt2HwsLdkKMCw==.VU9GQWsu5lBrEdP2Q3rUNlja5CeUhiqgkkEVkCGIZzptFZ0J0p+nCH2HB91QsrP+PUpl8bDc49iBcfUHMiTkFsuTOGxSR+lnVvCCIiyICkMT8yyp9wu0T63rEvh/0XQS">website</a></p><ol><li><p>下载</p><p>最后一项<code>Installer Type</code>建议选择<code>runfile [local]</code>，因为命令行少，更方便。</p></li><li><blockquote><p>sudo sh cuda_11.4.0_470.42.01_linux.run<br>输入accept<br>回车这个地方不要下载Driver，因为之前已经安装完了，一定要选择CUDA Toolkit 10.2。</p><blockquote><p>取消选择的方法是：光标停留在<code>Driver</code>那一行上，然后回车，<strong>使<code>[]</code>里的<code>X</code>消失</strong></p></blockquote><p>选择Install回车,</p><p>检查cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;version.txt</p><p>如果显示没有这个文件，就到该文件夹下去看看有没有一个<code>version.txt</code>，里面如果有<code>version.json</code>，且json中有版本信息，也可以</p></blockquote></li><li><p>环境变量设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gedit ~/.bashrc加入如下环境变量<span class="token punctuation">(</span>注意修改为自己的路径<span class="token punctuation">)</span>：<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/cuda-11.4/bin<span class="token punctuation">\</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span><span class="token operator">:+</span><span class="token operator">:</span>\$&#123;<span class="token environment constant">PATH</span>&#125;</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/usr/local/cuda-11.4/lib64<span class="token variable">$&#123;LD_LIBRARY_PATH<span class="token operator">:+</span><span class="token operator">:</span>$&#123;LD_LIBRARY_PATH&#125;</span><span class="token punctuation">&#125;</span>保存退出，终端运行：source ~/.bashrc测试:nvcc <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="cudnn"><a href="#cudnn" class="headerlink" title="cudnn"></a>cudnn</h5><p>选择合适版本<br>第一种：Debian File形式的安装</p><ol><li><p>选择ubuntu20的这个三文件下载到本地，</p></li><li><p>依次执行</p><blockquote><p>sudo dpkg -i libcudnn8_8.2.2.26-1+cuda11.4_amd64.deb<br>sudo dpkg -i libcudnn8-dev_8.2.2.26-1+cuda11.4_amd64.deb<br>sudo dpkg -i libcudnn8-samples_8.2.2.26-1+cuda11.4_amd64.deb</p></blockquote></li><li><p>验证</p><p>当选择Debian File进行安装时会在<code>/usr/src/cudnn_samples_v8</code>有一些cudnn的例子</p><p>在任意目录下展开终端，运行以下命令，通过编译<code>mnistCUDNN sample</code>进行验证</p><blockquote><p>cp -r &#x2F;usr&#x2F;src&#x2F;cudnn_samples_v8&#x2F; $HOME<br>cd  $HOME&#x2F;cudnn_samples_v8&#x2F;mnistCUDNN<br>make clean &amp;&amp; make<br>.&#x2F;mnistCUDNN</p></blockquote><p><strong>如果在执行sudo make”时报以下编译错误 ：fatal error: FreeImage.h</strong></p><p>则执行：<code>sudo apt-get install libfreeimage3 libfreeimage-dev</code>，然后重新验证。通过有test past</p></li></ol><p>第二种 第二种：Tar File形式的安装</p><ol><li><p>选择cudnn lib for liunx （x86)</p></li><li><p>解压 &gt; tar -xzvf cudnn-11.4-linux-x64-v8.2.2.26.tgz</p></li><li><blockquote><p>sudo cp cuda&#x2F;include&#x2F;cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include<br>sudo cp cuda&#x2F;lib64&#x2F;libcudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64<br>sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h<br>sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn*</p></blockquote><p>完成。解压操作会在当前目录生成一个<code>cuda</code>文件夹，删除即可。</p></li></ol></li></ol><h5 id="多个用户同个cuda"><a href="#多个用户同个cuda" class="headerlink" title="多个用户同个cuda"></a><strong>多个用户同个cuda</strong></h5><p>本人作为超级用户安装完cuda和cudnn，希望其他用户也能正常调用我的程序。<br>只需要打开我的目录下.bashrc文件，将我的cuda的环境变量拷贝到其他用户的.bashrc文件下：<br>export PATH&#x3D;”&#x2F;home&#x2F;zhongjia&#x2F;cuda9.0&#x2F;bin:$PATH”<br>export LD_LIBRARY_PATH&#x3D;”&#x2F;home&#x2F;zhongjia&#x2F;cuda9.0&#x2F;lib64:$LD_LIBRARY_PATH”<br>同时需要修改我的相应目录对其他用户有可读取的权限，所以chmod 755 “相应目录下文件名称“，具体可参考<br><a href="https://www.cnblogs.com/shangzekai/p/5822907.html%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E3%80%82">https://www.cnblogs.com/shangzekai/p/5822907.html修改文件权限。</a><br>修改完成后，其他用户就可以读和执行相应路径下的程序。</p><h5 id="Unable-to-find-the-development-tool-cc"><a href="#Unable-to-find-the-development-tool-cc" class="headerlink" title="Unable to find the development tool cc"></a><strong>Unable to find the development tool cc</strong></h5><p>sudo apt install build-essential</p><h5 id="设置向日葵开机自启动"><a href="#设置向日葵开机自启动" class="headerlink" title="设置向日葵开机自启动"></a>设置向日葵开机自启动</h5><pre class="line-numbers language-none"><code class="language-none">1. gnome-session-properties2. 点击add3. 使用dpkg -L命令查看应用程序安装路径4. 将第3步搜索结果的最后一条写入如下地方，Name自己定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置Anaconda</strong></p><p>设置 Anaconda 的环境变量，打开 <code>/etc/profile</code> 文件添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Anaconda environment</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ANACONDA_HOME</span><span class="token operator">=</span>/usr/local/anaconda3<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ANACONDA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token comment"># 刷新</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/your_install_path/anaconda3/bin:<span class="token environment constant">$PATH</span> <span class="token comment"># your_install_path为你安装anaconda3的路径，由上述步骤可知我的anaconda安装路径为/home/student/anaconda3，</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/home/student/anaconda3/bin:<span class="token environment constant">$PATH</span><span class="token comment"># 刷新</span><span class="token builtin class-name">source</span> /etc/profile<span class="token builtin class-name">source</span> /home/student/anaconda3/etc/profile.d/conda.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="共用cuda"><a href="#共用cuda" class="headerlink" title="共用cuda"></a><strong>共用cuda</strong></h5><p>在自己的当前环境&#x2F;usr&#x2F;local&#x2F;anaconda3&#x2F;bin&#x2F;conda init bash</p><p>source .bashrc</p><h5 id="不进入grub界面，或者减少选择时间"><a href="#不进入grub界面，或者减少选择时间" class="headerlink" title="不进入grub界面，或者减少选择时间"></a><strong>不进入grub界面，或者减少选择时间</strong></h5><blockquote><p> sudo gedit &#x2F;etc&#x2F;default&#x2F;grub</p></blockquote><p>find the line that says GRUB_HIDDEN_TIMEOUT&#x3D;0 or GRUB_TIMEOUT_STYLE&#x3D;hidden put # at the start of this line to comment it out</p><p>#GRUB_HIDDEN_TIMEOUT&#x3D;0<br>or</p><p>#GRUB_TIMEOUT_STYLE&#x3D;hidden<br>and make sure GRUB_TIMEOUT&#x3D;10 or some other number bigger than zero. When done exit nano saving changes and run</p><blockquote><p> sudo update-grub</p></blockquote><h5 id="配置jupyter虚拟环境并设置密码。"><a href="#配置jupyter虚拟环境并设置密码。" class="headerlink" title="配置jupyter虚拟环境并设置密码。"></a><strong>配置jupyter虚拟环境并设置密码。</strong></h5><p>让jupyter可以包含多个虚拟环境</p><blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">conda install nb_conda # 在目标环境中安装，重启<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>设置密码</p><blockquote><ol><li>jupyter notebook –generate-config</li><li>在生成的.jupyter\jupyter_notebook_config.py中  搜索 NotebookApp.allow_password_change，改为：NotebookApp.allow_password_change&#x3D;False ，记得去掉注释的#</li><li>jupyter notebook password</li><li>在生成的.jupyter\jupyter_notebook_config.json 中拿到哈希码</li><li>在第一个jupyter_notebook_config.py配置文件中找到“c.NotebookApp.password“，等于，刚生成的那个密码sha1，效果如下：去掉前面的”#</li><li>c.NotebookApp.password &#x3D; u’码’</li><li>重启</li></ol><p>第三步骤可以换成在ipython中</p><pre class="line-numbers language-none"><code class="language-none">from notebook.auth import passwdpasswd()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h5 id="x2F-usr-x2F-bin-x2F-xauth-file-x2F-root-x2F-Xauthority-does-not-exist"><a href="#x2F-usr-x2F-bin-x2F-xauth-file-x2F-root-x2F-Xauthority-does-not-exist" class="headerlink" title="&#x2F;usr&#x2F;bin&#x2F;xauth: file &#x2F;root&#x2F;.Xauthority does not exist"></a><strong>&#x2F;usr&#x2F;bin&#x2F;xauth: file &#x2F;root&#x2F;.Xauthority does not exist</strong></h5><p>这个不算错误，重新登录即可</p><h5 id="文件后带-或者文件夹是一种被包裹的选中的状态"><a href="#文件后带-或者文件夹是一种被包裹的选中的状态" class="headerlink" title="文件后带 或者文件夹是一种被包裹的选中的状态*"></a><em><em>文件后带</em> 或者文件夹是一种被包裹的选中的状态</em>*</h5><p>表示这个文件是可执行文件</p><p>修改文件权限</p><blockquote><p>chmod (-R) 755 xxx</p></blockquote><p>修改文件归属</p><blockquote><p>chown (-R) owner:owner_group xxx</p></blockquote><h5 id="pycharm-添加快捷方式"><a href="#pycharm-添加快捷方式" class="headerlink" title="pycharm 添加快捷方式"></a><strong>pycharm 添加快捷方式</strong></h5><blockquote><p>tools - create desktop entry</p></blockquote><h5 id="DL-framework-对应cuda关系"><a href="#DL-framework-对应cuda关系" class="headerlink" title="DL framework 对应cuda关系"></a><strong>DL framework 对应cuda关系</strong></h5><p>tensorflow2.8 对应cuda11.4</p><p>torch 1.11或者1.10对应cuda11.3 类似11.4</p><h5 id="ubuntu-弹出硬盘"><a href="#ubuntu-弹出硬盘" class="headerlink" title="ubuntu 弹出硬盘"></a><strong>ubuntu 弹出硬盘</strong></h5><p> 首先使用umount解除所有挂载</p><blockquote><p>sudo udisksctl power-off -b &#x2F;dev&#x2F;sdb</p></blockquote><h5 id="ubuntu-18-04-5-LTS-安装-NVIDIA-显卡驱动时报错：An-NVIDIA-kernel-module-‘nvidia-drm‘-appears-to-already-be-load"><a href="#ubuntu-18-04-5-LTS-安装-NVIDIA-显卡驱动时报错：An-NVIDIA-kernel-module-‘nvidia-drm‘-appears-to-already-be-load" class="headerlink" title="ubuntu 18.04.5 LTS 安装 NVIDIA 显卡驱动时报错：An NVIDIA kernel module ‘nvidia-drm‘ appears to already be load"></a><strong>ubuntu 18.04.5 LTS 安装 NVIDIA 显卡驱动时报错：An NVIDIA kernel module ‘nvidia-drm‘ appears to already be load</strong></h5><ol><li>通过另一台主机的终端工具 ssh 登录 Ubuntu 系统，依次执行如下两条命令（设置系统默认进入终端命令模式，然后重启系统）</li></ol><blockquote><p>sudo systemctl set-default multi-user.target<br>sudo reboot 0</p></blockquote><ol><li>待系统重启后，通过其他主机的终端工具 ssh 登录 Ubuntu 系统，依次执行如下三条命令，卸载已安装的 NVIDIA 驱动后重启</li></ol><blockquote><p>sudo apt-get purge nvidia*<br>sudo apt-get autoremove<br>sudo reboot</p></blockquote><ol start="3"><li>待系统重启后，通过其他主机的终端工具 ssh 登录 Ubuntu 系统，执行如下两条命令（先进入 NVIDIA 驱动安装文件所在的目录，再安装驱动</li></ol><blockquote><p>cd NVIDIA驱动安装文件所在的目录<br>sudo sh .&#x2F;NVIDIA驱动安装文件.run</p></blockquote><ol start="4"><li>等待 NVIDIA 驱动安装完成并测试显卡正常识别和运行后，再在终端执行如下两条命令（设置系统默认进入图形化界面模式，重启系统）</li></ol><blockquote><p>sudo systemctl set-default graphical.target<br>sudo reboot 0</p></blockquote><p><strong>ubuntu 禁用自带显卡驱动</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 在终端中通过 nano 创建 blacklist-nouveau.conf 文件，终端命令如下：</span><span class="token function">nano</span> /etc/modprobe.d/blacklist-nouveau.conf<span class="token comment"># 2. 在该文件中添加如下内容：</span>blacklist nouveauoptions nouveau <span class="token assign-left variable">modeset</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment"># 3. 按 Ctrl + X，再按 Y，回车保存该文件</span><span class="token comment"># 4. 重新生成 kernel initramfs，终端命令如下：</span>update-initramfs <span class="token parameter variable">-u</span><span class="token comment"># 5. 等待 kernel initramfs 重新生成完毕后，重启系统，终端命令如下：</span><span class="token function">reboot</span><span class="token comment"># 6. 进入系统中即可正常安装 NVIDIA 驱动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="CondaEnvException-Pip-failed"><a href="#CondaEnvException-Pip-failed" class="headerlink" title="CondaEnvException: Pip failed"></a><strong>CondaEnvException: Pip failed</strong></h5><p>在-pip : 前面加上<code>-pip</code></p><h5 id="vim-替换"><a href="#vim-替换" class="headerlink" title="vim 替换"></a><strong>vim 替换</strong></h5><blockquote><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">:&#123;作用范围&#125;s&#x2F;&#123;目标&#125;&#x2F;&#123;替换&#125;&#x2F;&#123;替换标志&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">:</span><span class="token string-literal"><span class="token string">%s/foo/</span></span>bar<span class="token operator">/</span>g <span class="token comment"># 全局 替换所有</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><a href="https://www.jianshu.com/p/b3b2f04c1897">refer</a></p><h5 id="http-x2F-x2F-cn-archive-ubuntu-com-x2F-ubuntu-x2F-dists-x2F-focal-x2F-InRelease-连接失败-IP-91-189-91-38-80"><a href="#http-x2F-x2F-cn-archive-ubuntu-com-x2F-ubuntu-x2F-dists-x2F-focal-x2F-InRelease-连接失败-IP-91-189-91-38-80" class="headerlink" title="http: &#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F;dists&#x2F;focal&#x2F;InRelease 连接失败 IP: 91.189.91.38 80"></a>http: &#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu&#x2F;dists&#x2F;focal&#x2F;InRelease 连接失败 IP: 91.189.91.38 80</h5><ol><li>这是因为<a href="https://so.csdn.net/so/search?q=ubuntu&spm=1001.2101.3001.7020">ubuntu</a>的服务器在国外，使用国内的软件源在下载时更新受到限制，将服务地址修改成国内的地址。</li></ol><p>输入：以下命令找到软件源文件</p><blockquote><p> cd &#x2F;etc&#x2F;apt</p></blockquote><p>2.备份</p><p>输入这个命令进行备份\</p><blockquote><p> sudo tar -zcvf sources.list.tar.gz sources.list\</p></blockquote><p>输入以下命令：sudo vim sources.list</p><p>将地址cn.archive.ubuntu.com 更改为 mirrors.aliyun.com</p><p>3.修改源文件地址</p><p>输入以下命令：sudo vim sources.list</p><p>将地址cn.archive.ubuntu.com 更改为 mirrors.aliyun.com</p><ol start="4"><li>保存退出 sudo apt-get update</li></ol><h5 id="下载段错误"><a href="#下载段错误" class="headerlink" title="下载段错误"></a><strong>下载段错误</strong></h5><p>解决，由于文件太大引起的中断</p><blockquote><p>wget -c url</p></blockquote><h5 id="shell-没有颜色"><a href="#shell-没有颜色" class="headerlink" title="shell 没有颜色"></a><strong>shell 没有颜色</strong></h5><p>在<code>~/.bashrc</code>中其实有了颜色的设置，查看代码可以发现</p><p>最下面有一个<code>PS1</code>的赋值，它就是控制颜色的设置，当终端是某种类型或者满足某些特定条件的时候，它就会显示颜色。</p><p>这里可以看到有个<code>force_color_prompt</code>变量默认被注释了，而如果这个变量的值为<code>yes</code>的时候，下面的<code>color_prompt</code>就也会是<code>yes</code>，然后的颜色设置也就会开启。</p><p>所以可以手动把这个注释去掉，使<code>force_color_prompt</code>的值等于<code>yes</code>，然后<code>source ~/.bashrc</code>就能看到效果了：</p><h5 id="解决linux系统-不在sudoers-文件中，此事将被报告"><a href="#解决linux系统-不在sudoers-文件中，此事将被报告" class="headerlink" title="解决linux系统 不在sudoers 文件中，此事将被报告"></a><strong>解决linux系统 不在sudoers 文件中，此事将被报告</strong></h5><p><a href="https://zhuanlan.zhihu.com/p/143388819">refer</a></p><blockquote><p>在<code>root ALL=(ALL) ALL</code> 的下一行添加代码：<code>86god ALL=(ALL) ALL</code></p></blockquote><blockquote><p>chmod u+w &#x2F;etc&#x2F;sudoers</p><p>“vim &#x2F;etc&#x2F;sudoers”</p><p>在<code>root ALL=(ALL) ALL</code> 的下一行添加代码：<code>86god ALL=(ALL) ALL</code></p><p>chmod 440 &#x2F;etc&#x2F;sudoers</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux异常关机及分析</title>
      <link href="/2022/07/03/cs/linux-yi-chang-guan-ji-ji-fen-xi/"/>
      <url>/2022/07/03/cs/linux-yi-chang-guan-ji-ji-fen-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_29599033/article/details/116556850">来源</a></p><p>who  -b  查看最后一次系统启动的时间</p><p>who  -r   查看当前系统运行时间</p><p>top &#x2F; w查看系统运行了多长时间</p><p>last -x |grep shutdown</p><p>last -x |grep shutdown |head -1 # 查看linux系统关机的时间</p><p>查看过去登录用户</p><p><strong>last命令</strong> 用于显示用户最近登录信息。单独执行last命令，它会读取<code>/var/log/wtmp</code>的文件，并把该给文件的内容记录的登入系统的用户名单全部显示出来</p><p>-a：把从何处登入系统的主机名称或ip地址，显示在最后一行；<br>-d：将IP地址转换成主机名称；<br>-f &lt;记录文件&gt;：指定记录文件。<br>-n &lt;显示列数&gt;或-&lt;显示列数&gt;：设置列出名单的显示列数；<br>-R：不显示登入系统的主机名称或IP地址；<br>-x：显示系统关机，重新开机，以及执行等级的改变等信息。</p><p><a href="https://unix.stackexchange.com/questions/9819/how-to-find-out-from-the-logs-what-caused-system-shutdown">https://unix.stackexchange.com/questions/9819/how-to-find-out-from-the-logs-what-caused-system-shutdown</a></p><pre class="line-numbers language-none"><code class="language-none">last -x | head | tac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Display list of last reboot entries: <code>last reboot | less</code></p><p>Display list of last shutdown entries: <code>last -x | less</code></p><p>or more precisely: <code>last -x | grep shutdown | less</code></p><p><a href="https://web.archive.org/web/20170904210829/http://scofaq.aplawrence.com:80/FAQ_scotec1haltcatch.html">https://web.archive.org/web/20170904210829/http://scofaq.aplawrence.com:80/FAQ_scotec1haltcatch.html</a></p><pre class="line-numbers language-none"><code class="language-none">who -a &#x2F;etc&#x2F;wtmp | grep uadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">last | grep shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法二：安全重启</p><p>首先，无论Ubuntu出现什么状况，千万不要强制重启</p><p>如果方法一无效，可以尝试安全重启</p><ol><li><p>同时按住 Ctrl 和 Alt 键，按住不要放</p></li><li><p>按一下 SysRq 键（有的键盘是PrtSc）</p></li><li><p>按一下 R 键</p></li><li><p>按一下 E 键</p></li><li><p>依次按下 I , S , U , B 键</p></li></ol><p>这些步骤做完后，系统就会安全重启</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>multilabel</title>
      <link href="/2022/05/11/dlandml/multilabel/"/>
      <url>/2022/05/11/dlandml/multilabel/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前打了一个心电图的比赛，比赛方采用的多标签的f1作为损失函数，于是当时是针对每一类进行阈值划分来得到一个最好的结果。但是这样处理非常麻烦，并且没有考虑到任何标签相关性，并且并且还面临着样本分布及其不均衡的情况，但是后来看到了苏神的多标签分类的softmax函数，故想自己实现一个pytorch版本的</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>苏神在<a href="https://kexue.fm/archives/7359">这篇文章</a>中提到在<a href="https://arxiv.org/abs/2002.10857">Circle Loss</a>中，有一个简洁的方案，<br>$$<br>\log \left(1+\sum_{i \in \Omega_{\text {neg }}, j \in \Omega_{p o s}} e^{s_i-s_j}\right)&#x3D;\log \left(1+\sum_{i \in \Omega_{\text {neg }}} e^{s_i} \sum_{j \in \Omega_{\text {pos }}} e^{-s_j}\right)<br>$$<br>其思想是 每个目标类得分都不小与每个非目标类的得分。对于K不固定的多标签来说，我们还需要一个阈值来确定输出哪些类$s_0$, 希望目标类的分数都大于 $s_0$, 非目标类的分数都小于$s_0$ 我们希望$s_i&lt;s_j$ 我们就可以往log中加入$e^{s_i-s_j}$ 所以上式变为<br>$$<br>\begin{aligned}<br>&amp; \log \left(1+\sum_{i \in \Omega_{\text {neg }}, j \in \Omega_{\text {pos }}} e^{s_i-s_j}+\sum_{i \in \Omega_{\text {neg }}} e^{s_i-s_0}+\sum_{j \in \Omega_{\text {pos }}} e^{s_0-s_j}\right) \<br>&#x3D; &amp; \log \left(e^{s_0}+\sum_{i \in \Omega_{\text {neg }}} e^{s_i}\right)+\log \left(e^{-s_0}+\sum_{j \in \Omega_{\text {pos }}} e^{-s_j}\right)<br>\end{aligned}<br>$$<br><strong>当指定阈值为0，简化为</strong><br>$$<br>\log \left(1+\sum_{i \in \Omega \Omega_{\text {neg }}} e^{s_i}\right)+\log \left(1+\sum_{j \in \Omega_{p o s}} e^{-s_j}\right)<br>$$<br><em>不得不说，确实非常精妙，佩服得五体投地</em></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>由于苏神给的是keras实现，所以这里重新实现一个pytroch实现</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MultiLabelLoss</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'mean'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        >>> multi_loss = MultiLabelLoss()        >>> y_pred = torch.tensor([[-9, 4, 4, -2], [-3, 4, 4, -2]])        >>> y_true = torch.tensor([[0, 1, 1, 0], [0, 1, 1, 0]])        >>> print(multi_loss(y_true, y_pred))        """</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>MultiLabelLoss<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reduction <span class="token operator">=</span> reduction        self<span class="token punctuation">.</span>reduction_fun <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> reduction<span class="token operator">==</span><span class="token string">"mean"</span> <span class="token keyword">else</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> y_true<span class="token punctuation">.</span>shape <span class="token operator">==</span> y_pred<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">"the shape of y_pred don't match y_true's"</span>        y_pred <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> y_true<span class="token punctuation">)</span> <span class="token operator">*</span> y_pred        y_pred_neg <span class="token operator">=</span> y_pred <span class="token operator">-</span> y_true <span class="token operator">*</span> <span class="token number">1e12</span>        y_pred_pos <span class="token operator">=</span> y_pred <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>y_true<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token number">1e12</span>        concat_zeros <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>y_pred<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>y_pred<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        y_pred_pos <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>y_pred_pos<span class="token punctuation">,</span> concat_zeros<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        y_pred_neg <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>y_pred_neg<span class="token punctuation">,</span> concat_zeros<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        neg_loss <span class="token operator">=</span> torch<span class="token punctuation">.</span>logsumexp<span class="token punctuation">(</span>y_pred_neg<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        pos_loss <span class="token operator">=</span> torch<span class="token punctuation">.</span>logsumexp<span class="token punctuation">(</span>y_pred_pos<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>reduction_fun<span class="token punctuation">(</span>neg_loss <span class="token operator">+</span> pos_loss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>可能存在的问题：这个损失函数在具体的问题上的效果还有待尝试，另外这个损失函数可能会导致模型过于自信，经过测试，当模型的输出非常自信后，损失函数才会变的非常小，这会不会导致hard sample 难以训练？或者模型的泛化性变差？</p>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些日常bug</title>
      <link href="/2022/03/04/cs/yi-xie-ri-chang-bug/"/>
      <url>/2022/03/04/cs/yi-xie-ri-chang-bug/</url>
      
        <content type="html"><![CDATA[<h4 id="安装mpi4py-导入MPI显示找不到指定文件DLLnot-load"><a href="#安装mpi4py-导入MPI显示找不到指定文件DLLnot-load" class="headerlink" title="安装mpi4py 导入MPI显示找不到指定文件DLLnot load"></a>安装mpi4py 导入MPI显示找不到指定文件DLLnot load</h4><p>安装微软的MPI软件补全文件</p><h4 id="yum-安装出错"><a href="#yum-安装出错" class="headerlink" title="yum 安装出错"></a>yum 安装出错</h4><p>; Unknown error”<br>Trying other mirror.<br>epel-release-7-11.noarch.rpm   FAILED<br><a href="http://mirrors.dgut.edu.cn/centos/7.9.2009/extras/x86_64/Packages/epel-release-7-11.noarch.rpm">http://mirrors.dgut.edu.cn/centos/7.9.2009/extras/x86_64/Packages/epel-release-7-11.noarch.rpm</a>: [Errno 14] curl#6 - “Could not resolve host: mirrors.dgut.edu.cn; Unknown error”<br>Trying other mirror.</p><p>Error downloading packages:<br>  epel-release-7-11.noarch: [Errno 256] No more mirrors to try.</p><p>解决：</p><blockquote><pre class="line-numbers language-none"><code class="language-none">#vi &#x2F;etc&#x2F;resolv.confnameserver 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="mysql-bug"><a href="#mysql-bug" class="headerlink" title="mysql bug"></a>mysql bug</h4><p>安装出现</p><blockquote><p>mysql-community-common(x86-64) &gt;&#x3D; 5.7.9 is needed by mysql-community-libs-5.7.21-1.el7.x86_64</p></blockquote><p><a href="https://blog.csdn.net/liukai6/article/details/79795293">https://blog.csdn.net/liukai6/article/details/79795293</a></p><p><a href="https://blog.csdn.net/qq_42025798/article/details/114199096">https://blog.csdn.net/qq_42025798/article/details/114199096</a></p><p>&#x2F;opt&#x2F;module&#x2F;hadoop-3.1.3&#x2F;bin&#x2F;yarn jar lib&#x2F;hbase-server-1.3.1.jar importtsv -Dimporttsv.columns&#x3D;HBASE_ROW_KEY,info:name,info:color fruit hdfs:&#x2F;&#x2F;hadoop102:9000&#x2F;input_fruit</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">/</span>opt<span class="token operator">/</span>module<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.7</span><span class="token number">.2</span><span class="token operator">/</span>bin<span class="token operator">/</span>yarn jar lib<span class="token operator">/</span>hbase<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">1.3</span><span class="token number">.1</span><span class="token punctuation">.</span>jar importtsv \<span class="token operator">-</span>Dimporttsv<span class="token punctuation">.</span>columns<span class="token operator">=</span><span class="token constant">HBASE_ROW_KEY</span><span class="token punctuation">,</span><span class="token literal-property property">info</span><span class="token operator">:</span>name<span class="token punctuation">,</span><span class="token literal-property property">info</span><span class="token operator">:</span>color fruit \<span class="token literal-property property">hdfs</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hadoop002<span class="token operator">:</span><span class="token number">8020</span><span class="token operator">/</span>input_fruit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/03/03/cs/git/"/>
      <url>/2022/03/03/cs/git/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900937935629664">学习网站-廖雪峰</a></p><h2 id="7-21"><a href="#7-21" class="headerlink" title="7.21"></a>7.21</h2><h3 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h3><h3 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h3><h4 id="P1-基本操作"><a href="#P1-基本操作" class="headerlink" title="P1 基本操作"></a>P1 基本操作</h4><ol><li><p>git 全局设置</p><pre class="line-numbers language-none"><code class="language-none">$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址</p><blockquote><p>git config -l  # 查看git情况</p></blockquote><ol start="2"><li><p>将一个目录转化为git管理的目录</p><blockquote><p>git init</p></blockquote></li></ol><p>目录下多了一个<code>.git</code>的目录,这个目录是Git来跟踪管理版本库的,这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见</p><ol start="3"><li><p>将文件加入到git仓库</p><pre class="line-numbers language-none"><code class="language-none">git add readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>执行上面的命令，没有任何显示，这就对了</p><ol start="4"><li><p>把文件提交到仓库</p><pre class="line-numbers language-none"><code class="language-none">git commit -m &quot;wrote a readme file&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p></li></ol><p>Git添加文件需要<code>add</code>，<code>commit</code>一共两步， 因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件</p><pre class="line-numbers language-none"><code class="language-none">$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="P1小结"><a href="#P1小结" class="headerlink" title="P1小结"></a>P1小结</h4><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol><h4 id="P2-常用"><a href="#P2-常用" class="headerlink" title="P2 常用"></a>P2 常用</h4><ol><li>运行<code>git status</code>命令看看结果</li></ol><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，如果文件被修改了，会发出提示， readme.txt&#96;被修改过了，但还没有准备提交的修改。</p><p>虽然Git告诉我们<code>readme.txt</code>被修改了，但如果能看看具体修改了什么内容，自然是很好的。如果已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用<code>git diff</code>这个命令看看</p><p><img src="/BlogImgs/git/image-20210721191728547.png" alt="image-20210721191728547"></p><ol start="2"><li>将修改内容覆盖之前的版本还是要用<strong>git add</strong> 和<strong>git commit</strong></li></ol><p><img src="/BlogImgs/git/image-20210721192002370.png" alt="image-20210721192002370"></p><p>现在使用git status 能够发现<code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code></p><ol start="3"><li><p>提交修改</p><blockquote><pre class="line-numbers language-none"><code class="language-none">git commit -m &quot;add distributed&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li></ol><p>将会提交修改</p><ol start="4"><li><p>再次查看状态</p><p>再用<code>git status</code>命令看看仓库的当前状态：</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p></li></ol><h4 id="P2小结"><a href="#P2小结" class="headerlink" title="P2小结"></a>P2小结</h4><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h4 id="p3-版本控制"><a href="#p3-版本控制" class="headerlink" title="p3 版本控制"></a>p3 版本控制</h4><ol><li>版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用<code>git log</code>命令查看</li></ol><p><code>git log</code>命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次是<code>wrote a readme file</code></p><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数</p><pre class="line-numbers language-none"><code class="language-none">git log --pretty&#x3D;oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间</p><ol start="2"><li><p>回退</p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p></li></ol><pre class="line-numbers language-none"><code class="language-none">git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>^是cmd.exe的escape字符，属于特殊字符，命令里要用到文字 ^ 时必须用双引号把它夹起来，因此只要如下就可以正确执行：</p><p>git reset head”^”或者git reset “head^”</p><ol start="3"><li><p>误删回退（没有忘记版本号</p><p>最新的那个版本<code>add</code>已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个<code>最新版本</code>的<code>commit id</code>是<code>a0ecfea...</code>，于是就可以指定回到未来的某个版本</p></li></ol><pre class="line-numbers language-none"><code class="language-none">git reset --hard a0ecfea<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p><ol start="4"><li><p>忘记版本号</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌────┐│HEAD│└────┘   │   └──&gt; ○ append GPL        │        ○ add distributed        │        ○ wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为指向<code>add distributed</code>：</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">┌────┐│HEAD│└────┘   │   │    ○ append GPL   │    │   └──&gt; ○ add distributed        │        ○ wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本，找不到新版本的<code>commit id</code></p><p>在Git中，当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git refloga0ecfea (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to a0ecd1692ec HEAD@&#123;1&#125;: reset: moving to HEAD^a0ecfea (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: add new lined1692ec HEAD@&#123;3&#125;: commit: add distributedfdd6369 HEAD@&#123;4&#125;: commit (initial): wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出可知，<code>append GPL</code>的commit id是<code>a0ecfea</code>现在可以根据这个重返未来</p></li></ol><h4 id="P3总结"><a href="#P3总结" class="headerlink" title="P3总结"></a>P3总结</h4><p>   现在总结一下：</p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><h4 id="P4-与其他版本区别-名词"><a href="#P4-与其他版本区别-名词" class="headerlink" title="P4 与其他版本区别(名词)"></a>P4 与其他版本区别(名词)</h4><ol><li>工作区</li></ol><p>就是你在电脑里能看到的目录，比如我的<code>learngit</code>文件夹就是一个工作区</p><ol start="2"><li>版本库</li></ol><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="/BlogImgs/git/0" alt="git-repo"></p><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p>先用<code>git status</code>查看一下状态：</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)modified:   readme.txtUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)LICENSEno changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p><p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)new file:   LICENSEmodified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，暂存区的状态就变成这样了：</p><p><img src="/BlogImgs/git/0" alt="git-stage"></p><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git statusOn branch masterChanges to be committed:  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)        new file:   lience.txt        modified:   readme.txtD:\Coding\Python\gitExercise\helloWorld&gt;git commit -m &quot;add Two files&quot;[master 307c305] add Two files 2 files changed, 2 insertions(+), 1 deletion(-) create mode 100644 lience.txt一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：D:\Coding\Python\gitExercise\helloWorld&gt;git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P5-管理修改"><a href="#P5-管理修改" class="headerlink" title="P5 管理修改"></a>P5 管理修改</h4><ol><li>git 存储的修改而不是内容</li></ol><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p><p>你看，我们前面讲了，Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>提交后，用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git diff HEAD -- readme.txtdiff --git a&#x2F;readme.txt b&#x2F;readme.txtindex fe6bcdf..16b0682 100644--- a&#x2F;readme.txt+++ b&#x2F;readme.txt@@ -2,4 +2,4 @@ git is free software！！！！！！！！！！！ git is very comfortable！ git is very succesed! Git has a mutable index called stage.-hahaha66666666666\ No newline at end of file+hahaha66666666666 ？？？？\ No newline at end of file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中</p><h4 id="P6-撤销修改"><a href="#P6-撤销修改" class="headerlink" title="P6 撤销修改"></a>P6 撤销修改</h4><ol><li>当发现自己新增了自己不想要的内容的时候，还没有提交到暂存区的时候</li></ol><p>，需要读档的时候，首先<code>git status</code>确认当前的状态，随后，<code>git checkout -- file</code>可以丢弃工作区的修改</p><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><ol start="2"><li>当自己写的已经提交到暂存区的时候，需要做一些修改</li></ol><p>用<code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交</p><p>用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><pre class="line-numbers language-none"><code class="language-none">$ git reset HEAD readme.txtUnstaged changes after reset:Mreadme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>再用<code>git status</code>查看一下，现在暂存区是干净的，工作区有修改：然后丢弃工作区的修改</p><p>假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程</p><h4 id="P6小结"><a href="#P6小结" class="headerlink" title="P6小结"></a>P6小结</h4><p>又到了小结时间。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</p><h4 id="p7-删除文件"><a href="#p7-删除文件" class="headerlink" title="p7 删除文件"></a>p7 删除文件</h4><p>当你在本地被删除文件后，，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了</p><ol><li>你想删除库中的文件，</li></ol><p>确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p><pre class="line-numbers language-none"><code class="language-none">$ git rm test.txtrm &#39;test.txt&#39;$ git commit -m &quot;remove test.txt&quot;[master d46f35e] remove test.txt 1 file changed, 1 deletion(-) delete mode 100644 test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小提示：先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。</p><ol start="2"><li><p>你误删了，想恢复文件</p><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout -- test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p> 注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</p></li></ol><h4 id="P7小结"><a href="#P7小结" class="headerlink" title="P7小结"></a>P7小结</h4><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><h4 id="P8-github与本地同步"><a href="#P8-github与本地同步" class="headerlink" title="P8 github与本地同步"></a>P8 github与本地同步</h4><ul><li>前期配置</li></ul><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416</a></p><p>步骤1： 需要本地配置</p><blockquote><pre class="line-numbers language-none"><code class="language-none">&gt;ssh-keygen -t rsa -C &quot;youremail@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>步骤2：将本地产生的公钥保存在github上面</p><ul><li><p>同步文件</p><p>先在github上新建一个仓库，记录下仓库的名字和你的id</p></li></ul><pre class="line-numbers language-none"><code class="language-none">git remote add origin git@github.com:Name&#x2F;CangKuName.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt; git push -u origin masterThe authenticity of host &#39;github.com (13.229.188.59)&#39; can&#39;t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yPlease type &#39;yes&#39;, &#39;no&#39; or the fingerprint: yesWarning: Permanently added &#39;github.com,13.229.188.59&#39; (RSA) to the list of known hosts.Enumerating objects: 19, done.Counting objects: 100% (19&#x2F;19), done.Delta compression using up to 8 threadsCompressing objects: 100% (13&#x2F;13), done.Writing objects: 100% (19&#x2F;19), 1.48 KiB | 304.00 KiB&#x2F;s, done.Total 19 (delta 4), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (4&#x2F;4), done.To github.com:CrescentMoonL&#x2F;helloWorld.git * [new branch]      master -&gt; masterBranch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送结束后就能看到在github中的页面和本地的是一样的</p><p>从现在起，只要本地作了提交，就可以通过命令：</p><pre class="line-numbers language-none"><code class="language-none">git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把本地<code>master</code>分支的最新修改推送至GitHub</p><ul><li>删除远程库</li></ul><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p><p>然后，根据名字删除，比如删除<code>origin</code>：</p><pre class="line-numbers language-none"><code class="language-none">$ git remote rm origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h4 id="P8-小结"><a href="#P8-小结" class="headerlink" title="P8 小结"></a>P8 小结</h4><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联一个远程库时必须给远程库指定一个名字，<code>origin</code>是默认习惯命名；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><h2 id="2021年7月22日"><a href="#2021年7月22日" class="headerlink" title="2021年7月22日"></a>2021年7月22日</h2><h3 id="git-命令-1"><a href="#git-命令-1" class="headerlink" title="git 命令"></a>git 命令</h3><h4 id="p1-远程克隆"><a href="#p1-远程克隆" class="headerlink" title="p1 远程克隆"></a>p1 远程克隆</h4><pre class="line-numbers language-none"><code class="language-none">git clone git@github.com:michaelliao&#x2F;gitskills.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当协同开发的时候， 每个人各自从远程克隆一份就可以了。</p><p>GitHub给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code></p><h4 id="P1-小结"><a href="#P1-小结" class="headerlink" title="P1 小结"></a>P1 小结</h4><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p><h4 id="P2-分支管理"><a href="#P2-分支管理" class="headerlink" title="P2 分支管理"></a>P2 分支管理</h4><p>假设准备开发一个新功能，但是需要两周才能完成，第一周写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>。创建了一个属于自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><p>其他版本控制系统如SVN等都有分支管理</p><p>但Git的分支无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论版本库是1个文件还是1万个文件。</p><h4 id="P3创建分支"><a href="#P3创建分支" class="headerlink" title="P3创建分支"></a>P3创建分支</h4><p>在[版本回退]里，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点</p><p><img src="/BlogImgs/git/0" alt="git-br-initial"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="/BlogImgs/git/l-1626924593800" alt="git-br-create"></p><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变</p><p><img src="/BlogImgs/git/l.png" alt="git-br-dev-fd"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="/BlogImgs/git/0-16462817977361.png" alt="git-br-ff-merge"></p><p>Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支</p><p><img src="/BlogImgs/git/0-1626924568945" alt="git-br-rm"></p><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout -b devSwitched to a new branch &#39;dev&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch dev$ git checkout devSwitched to branch &#39;dev&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，用<code>git branch</code>命令查看当前分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* dev  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git commit -m &quot;branch dev test&quot;[dev bfa54ef] branch dev test 1 file changed, 2 insertions(+), 1 deletion(-)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout masterSwitched to branch &#39;master&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout masterSwitched to branch &#39;master&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><p><img src="/BlogImgs/git/0-1626927034870" alt="git-br-on-master"></p><p>把<code>dev</code>分支的工作成果合并到<code>master</code>分支上</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git merge devUpdating 0eb2254..bfa54efFast-forward readme.txt | 3 ++- 1 file changed, 2 insertions(+), 1 deletion(-)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code></p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git branch -d devDeleted branch dev (was bfa54ef).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><ul><li>switch</li></ul><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</p><p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p><p>创建并切换到新的<code>dev</code>分支，可以使用：</p><pre class="line-numbers language-none"><code class="language-none">$ git switch -c dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接切换到已有的<code>master</code>分支，可以使用：</p><pre class="line-numbers language-none"><code class="language-none">$ git switch master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解</p><h4 id="P3-小结"><a href="#P3-小结" class="headerlink" title="P3 小结"></a>P3 小结</h4><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code>  也可以用<code>switch</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h4 id="P4-解决冲突"><a href="#P4-解决冲突" class="headerlink" title="P4 解决冲突"></a>P4 解决冲突</h4><p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p><pre class="line-numbers language-none"><code class="language-none">$ git switch -c feature1Switched to a new branch &#39;feature1&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改<code>readme.txt</code>最后一行</p><p>在<code>feature1</code>分支上提交：</p><pre class="line-numbers language-none"><code class="language-none">$ git add readme.txt$ git commit -m &quot;AND simple&quot;[feature1 14096d0] AND simple 1 file changed, 1 insertion(+), 1 deletion(-)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换到<code>master</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">git switch master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到<code>master</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git switch masterSwitched to branch &#39;master&#39;Your branch is ahead of &#39;origin&#x2F;master&#39; by 1 commit.  (use &quot;git push&quot; to publish your local commits)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p><p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改变</p><p>重新提交</p><pre class="line-numbers language-none"><code class="language-none">$ git add readme.txt $ git commit -m &quot;&amp; simple&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交</p><p><img src="/BlogImgs/git/0-1626941550690" alt="git-br-feature1"></p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git merge feature1Auto-merging readme.txtCONFLICT (content): Merge conflict in readme.txtAutomatic merge failed; fix conflicts and then commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突</p><p>Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git statusOn branch masterYour branch is ahead of &#39;origin&#x2F;master&#39; by 2 commits.  (use &quot;git push&quot; to publish your local commits)You have unmerged paths.  (fix conflicts and run &quot;git commit&quot;)  (use &quot;git merge --abort&quot; to abort the merge)Unmerged paths:  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)        both modified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在查看readme.txt 可以看到不同的内容 </p><p><img src="/BlogImgs/git/image-20210722162557106-1626942359885.png" alt="image-20210722162557106"></p><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><p>之后再重新提交，即可解决冲突</p><pre class="line-numbers language-none"><code class="language-none"> git add readme.txt $ git commit -m &quot;conflict fixed&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><p><img src="/BlogImgs/git/0-1626942656294" alt="git-br-conflict-merged"></p><pre class="line-numbers language-none"><code class="language-none">git log --graph --pretty&#x3D;oneline --abbrev-commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">*   5fe255a (HEAD -&gt; master) conflict fixed|\| * 0acaa33 (feature1) add feature* | a2ca2e9 master go ahead|&#x2F;* bfa54ef branch dev test* 0eb2254 (origin&#x2F;master) add a test for remove* 5d2b3de test one* 307c305 add Two files* a0ecfea add new line* d1692ec add distributed* fdd6369 wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，删除<code>feature1</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch -d feature1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="P4小结"><a href="#P4小结" class="headerlink" title="P4小结"></a>P4小结</h4><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><h4 id="P5-分支管理策略"><a href="#P5-分支管理策略" class="headerlink" title="P5 分支管理策略"></a>P5 分支管理策略</h4><p>合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息</p><p>下面将尝试使用<code>--no-ff</code>方式的<code>git merge</code></p><pre class="line-numbers language-none"><code class="language-none">git switch -c dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改其中的文件， 然后重新提交新的commit</p><blockquote><p>git add readme.txt</p><p>git commit -m “add merge”</p></blockquote><p>切换会master</p><blockquote><p>git switch master</p></blockquote><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><pre class="line-numbers language-none"><code class="language-none">git merge --no-ff -m &quot;merge with no-ff&quot; dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p><p>合并后，我们用<code>git log</code>看看分支历史</p><pre class="line-numbers language-none"><code class="language-none">$ git log --graph --pretty&#x3D;oneline --abbrev-commit*   e1e9c68 (HEAD -&gt; master) merge with no-ff|\  | * f52c633 (dev) add merge|&#x2F;  *   cf810e4 conflict fixed...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样</p><p><img src="/BlogImgs/git/0-1626944574531" alt="git-no-ff-mode"></p><h4 id="P5-总结"><a href="#P5-总结" class="headerlink" title="P5 总结"></a>P5 总结</h4><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="/BlogImgs/git/0-1626944658674" alt="git-br-policy"></p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h4 id="P6-bug-分支"><a href="#P6-bug-分支" class="headerlink" title="P6 bug 分支"></a>P6 bug 分支</h4><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，当前正在<code>dev</code>上进行的工作还没有提交</p><blockquote><p>get status </p></blockquote><p>查看工作状态</p><p>而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p><blockquote><p>git stash</p></blockquote><p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>然后通过选择在master 上新建分支</p><blockquote><p> git checkout master</p><p> git switch master</p></blockquote><p>然后新建分支issue-101 来进行bug修改</p><blockquote><p>git checkout -b issue-101</p></blockquote><p>当bug修复后，重新提交</p><blockquote><p>git add readme.txt</p><p>git commit -m “fix bug 101”</p></blockquote><p>换回原来的分支</p><p>git switch master </p><p>合并原来的分支，并且删除issue-101分支</p><pre class="line-numbers language-none"><code class="language-none">git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新回到switch</p><p>git switch dev</p><p> git status 查看目录是空的</p><p>然后恢复原来存储的东西</p><p>git stash list 查看存储区有哪些东西</p><p>恢复方法：</p><blockquote><p> git stash apply  恢复后stash 内容不删除，需要用git stash drop来删除</p><p> git stash pop 恢复的同时把stash 也删除了</p></blockquote><p>可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令、</p><pre class="line-numbers language-none"><code class="language-none">git stash apply stash@&#123;0&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在master上产生的分支，说明在dev 上也有同样的分支，所以需要把issue-101上面做的修改复制到dev分支，只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。注意是在dev上的操作</p><pre class="line-numbers language-none"><code class="language-none">git cherry-pick 4c805e2 # 这个代码是新建分支的标识码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍</p><p>可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从dev分支切换到master分支</p><h3 id="2021年7月23日"><a href="#2021年7月23日" class="headerlink" title="2021年7月23日"></a>2021年7月23日</h3><h4 id="P6-小结"><a href="#P6-小结" class="headerlink" title="P6 小结"></a>P6 小结</h4><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动</p><h4 id="P7-新功能开发"><a href="#P7-新功能开发" class="headerlink" title="P7 新功能开发"></a>P7 新功能开发</h4><p>git switch -c feature</p><p>开发 提交之后如果要删除则用git branch -D feature</p><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删</p><h4 id="P8-多人协作"><a href="#P8-多人协作" class="headerlink" title="P8 多人协作"></a>P8 多人协作</h4><p>查看远程库信息</p><blockquote><p>git remote( -v)</p></blockquote><p>推送分支</p><blockquote><p> git push origin master </p></blockquote><p>如果要推送其他分支，比如<code>dev</code>，就改成：</p><p> git push origin dev</p><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于合作在上面开发。</li></ul><p>总之，就是在Git中，分支完全可以在本地，是否推送，视你的心情而定！</p><p>正常开发时， 大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改</p><p>当同伴从远程库clone时，</p><blockquote><pre class="line-numbers language-none"><code class="language-none">git clone git@github.com:michaelliao&#x2F;learngit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>默认情况下，同伴只能看到本地的<code>master</code>分支。</p><p>同伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支</p><p>同伴在新的分支上用dev提交</p><blockquote><p>git add </p><p>git commit -m “”</p><p>git push origin dev 向dev推送</p></blockquote><p>当你同时用相同的步骤提交会报错</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git push origin devTo github.com:CrescentMoonL&#x2F;helloWorld.git ! [rejected]        dev -&gt; dev (fetch first)error: failed to push some refs to &#39;github.com:CrescentMoonL&#x2F;helloWorld.git&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><pre class="line-numbers language-none"><code class="language-none">$ git pullThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details.    git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with:    git branch --set-upstream-to&#x3D;origin&#x2F;&lt;branch&gt; dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch --set-upstream-to&#x3D;origin&#x2F;dev devBranch &#39;dev&#39; set up to track remote branch &#39;dev&#39; from &#39;origin&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再拉取任务</p><pre class="line-numbers language-none"><code class="language-none">D:\Coding\Python\gitExercise\helloWorld&gt;git pullCONFLICT (add&#x2F;add): Merge conflict in env.txtAuto-merging env.txtAutomatic merge failed; fix conflicts and then commit the result.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344">解决冲突</a>完全一样。解决后，提交，再push：</p><pre class="line-numbers language-none"><code class="language-none">$ git commit -m &quot;fix env conflict&quot;[dev 57c53ab] fix env conflict$ git push origin devCounting objects: 6, done.Delta compression using up to 4 threads.Compressing objects: 100% (4&#x2F;4), done.Writing objects: 100% (6&#x2F;6), 621 bytes | 621.00 KiB&#x2F;s, done.Total 6 (delta 0), reused 0 (delta 0)To github.com:michaelliao&#x2F;learngit.git   7a5e5dd..57c53ab  dev -&gt; dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多人工作模式一般是：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><h4 id="P8-小结："><a href="#P8-小结：" class="headerlink" title="P8 小结："></a>P8 小结：</h4><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h4 id="P9-大乱炖"><a href="#P9-大乱炖" class="headerlink" title="P9 大乱炖"></a>P9 大乱炖</h4><ol><li>创建标签命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：</li></ol><pre class="line-numbers language-none"><code class="language-none">git tag v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，</p><p>方法是找到历史提交的commit id，然后打上就可以了：</p><pre class="line-numbers language-none"><code class="language-none">git log --pretty&#x3D;oneline --abbrev-commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git log --pretty&#x3D;oneline --abbrev-commit12a631b (HEAD -&gt; master, tag: v1.0, origin&#x2F;master) merged bug fix 1014c805e2 fix bug 101e1e9c68 merge with no-fff52c633 add mergecf810e4 conflict fixed5dc6824 &amp; simple14096d0 AND simpleb17d20e branch testd46f35e remove test.txtb84166e add test.txt519219b git tracks changese43a48b understand how stage works1094adb append GPLe475afc add distributedeaadf4e wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比方说要对<code>add merge</code>这次提交打标签，它对应的commit id是<code>f52c633</code>，敲入命令：</p><pre class="line-numbers language-none"><code class="language-none">$ git tag v0.9 f52c633<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再用命令<code>git tag</code>查看标签：</p><pre class="line-numbers language-none"><code class="language-none">$ git tagv0.9v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p><pre class="line-numbers language-none"><code class="language-none">$ git show v0.9commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:56:54 2018 +0800    add mergediff --git a&#x2F;readme.txt b&#x2F;readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>v0.9</code>确实打在<code>add merge</code>这次提交上。</p><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字</p><pre class="line-numbers language-none"><code class="language-none">git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：</p><pre class="line-numbers language-none"><code class="language-none">$ git show v0.1tag v0.1Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 22:48:43 2018 +0800version 0.1 releasedcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:06:15 2018 +0800    append GPLdiff --git a&#x2F;readme.txt b&#x2F;readme.txt...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p><ul><li>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</li><li>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>光伏_存于jupyter</title>
      <link href="/2022/02/25/competition/guang-fu-cun-yu-jupyter/"/>
      <url>/2022/02/25/competition/guang-fu-cun-yu-jupyter/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 比赛相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019vedio_predict_图灵联邦</title>
      <link href="/2022/02/25/competition/2019vedio-predict-tu-ling-lian-bang/"/>
      <url>/2022/02/25/competition/2019vedio-predict-tu-ling-lian-bang/</url>
      
        <content type="html"><![CDATA[<p>baseline拓展：</p><p><a href="https://github.com/BBKing49/tllb_vedio_ctr/blob/master/TI_vedio_ctr">https://github.com/BBKing49/tllb_vedio_ctr/blob/master/TI_vedio_ctr</a></p><p>top3</p><p><a href="https://github.com/LogicJake/tuling-video-click-top3">https://github.com/LogicJake/tuling-video-click-top3</a></p><p>top9</p><p><a href="https://github.com/Tersaiz/Turingtopia_Videos_CTR">https://github.com/Tersaiz/Turingtopia_Videos_CTR</a></p><p>top6</p><p><a href="https://github.com/ljhzxc/turingtopia_video_ctr">https://github.com/ljhzxc/turingtopia_video_ctr</a></p><p>top4</p><p><a href="https://github.com/biaobiao2/video-click-top4">https://github.com/biaobiao2/video-click-top4</a></p><p>top7</p><p><a href="https://github.com/zavierhan/turing_video_ctr_top7">https://github.com/zavierhan/turing_video_ctr_top7</a></p><p>top2</p><p><a href="https://zhuanlan.zhihu.com/p/112682833">https://zhuanlan.zhihu.com/p/112682833</a></p><p>top8</p><p><a href="https://zhuanlan.zhihu.com/p/114155783">https://zhuanlan.zhihu.com/p/114155783</a></p><p>top5</p><p><a href="https://zhuanlan.zhihu.com/p/112439827?utm_source=wechat_session">https://zhuanlan.zhihu.com/p/112439827?utm_source=wechat_session</a></p><p>top1</p><p><a href="https://github.com/ouc16020021031/video-click-TOP1">https://github.com/ouc16020021031/video-click-TOP1</a></p><p><strong>vedio predict baseline学习</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>    train_df<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">click_df<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> click_df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>dayclick_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>click_df<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>click_df<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> click_df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>hourclick_df<span class="token punctuation">[</span><span class="token string">'total_hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> click_df<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token punctuation">(</span>click_df<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>click_df<span class="token punctuation">[</span><span class="token string">'exposure_click_gap'</span><span class="token punctuation">]</span> <span class="token operator">=</span> click_df<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">-</span> click_df<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span> <span class="token comment"># 从曝光到点击的时间差（反应时间）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>count_encoder</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">map_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>duizip<span class="token punctuation">(</span>df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>map_dict<span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int32'</span><span class="token punctuation">)</span>click_df<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> click_df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>map_dict<span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int32'</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>各种特征</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=============================================== feat eng ==============================================='</span><span class="token punctuation">)</span>sort_df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'ts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>mode_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> f <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'deviceid'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'=============================================== &#123;&#125; ==============================================='</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'************** exposure_click_gap stats **************'</span><span class="token punctuation">)</span>    <span class="token comment"># 对前一天的样本的所有反应时间进行统计量提取</span>    tmp <span class="token operator">=</span> click_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'exposure_click_gap'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_max'</span><span class="token punctuation">:</span> <span class="token string">'max'</span><span class="token punctuation">,</span> f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_min'</span><span class="token punctuation">:</span> <span class="token string">'min'</span><span class="token punctuation">,</span>        f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_median'</span><span class="token punctuation">:</span> <span class="token string">'median'</span><span class="token punctuation">,</span> f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_mean'</span><span class="token punctuation">:</span> <span class="token string">'mean'</span><span class="token punctuation">,</span>        f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_std'</span><span class="token punctuation">:</span> <span class="token string">'std'</span><span class="token punctuation">,</span>        f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_skew'</span><span class="token punctuation">:</span> <span class="token string">'skew'</span><span class="token punctuation">,</span> f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_kurt'</span><span class="token punctuation">:</span> kurtosis<span class="token punctuation">,</span>        f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_q1'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span>x<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_q3'</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span>x<span class="token punctuation">,</span> q<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_ptp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_max'</span><span class="token punctuation">]</span> <span class="token operator">-</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_min'</span><span class="token punctuation">]</span>    tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_iqr'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_q3'</span><span class="token punctuation">]</span> <span class="token operator">-</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_q1'</span><span class="token punctuation">]</span>    tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_mean_ratio_std'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_mean'</span><span class="token punctuation">]</span> <span class="token operator">/</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_std'</span><span class="token punctuation">]</span>    tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_mean_ratio_ptp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_mean'</span><span class="token punctuation">]</span> <span class="token operator">/</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_ptp'</span><span class="token punctuation">]</span>    tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_mean_ratio_iqr'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_mean'</span><span class="token punctuation">]</span> <span class="token operator">/</span> tmp<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_exposure_click_gap_iqr'</span><span class="token punctuation">]</span>    <span class="token comment"># 将day加1再merge即表示前一天，同理减1再merge表示后一天，但会穿越，而且测试集没有后一天</span>    tmp<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runtime:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'************** click_count stats **************'</span><span class="token punctuation">)</span>    <span class="token comment"># 对前一天的点击次数进行统计</span>    tmp <span class="token operator">=</span> click_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_click_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_click_count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_click_count'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment"># 对前一小时的点击次数进行统计（也可以试试统计后一小时的点击次数，但涉及到label的统计量+时间穿越带来的问题是标签泄露）</span>    <span class="token comment"># 一小时也可以拓展到两小时、6小时等</span>    tmp <span class="token operator">=</span> click_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'total_hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'&#123;&#125;_prev_total_hour_click_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">[</span><span class="token string">'total_hour'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'total_hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_click_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_click_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runtime:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'************** exposure_count stats **************'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_day_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_hour_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_day_hour_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">,</span> <span class="token string">'hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        <span class="token comment"># 对前一天的曝光量进行统计</span>    tmp <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'day'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_count'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 计算前一天的点击率</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_ctr'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_click_count'</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_count'</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_day_count'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 对前一小时的曝光量进行统计</span>    tmp <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'total_hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_total_hour_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">[</span><span class="token string">'total_hour'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'total_hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_total_hour_count'</span><span class="token punctuation">:</span> <span class="token string">'&#123;&#125;_prev_total_hour_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment"># 计算前一小时的点击率</span>    df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_ctr'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_click_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>      df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev_total_hour_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 对后一小时的曝光量进行统计（不涉及label的统计量穿越也无妨，但实际应用场景中该类特征无法获取）</span>    tmp<span class="token punctuation">[</span><span class="token string">'total_hour'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">2</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'total_hour'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_total_hour_count'</span><span class="token punctuation">:</span> <span class="token string">'&#123;&#125;_next_total_hour_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment"># 对历史总曝光量进行统计（由于每个样本的时间尺度都不同，所以用历史点击率可能比历史曝光好些）</span>    sort_df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_before_count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sort_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>cumcount<span class="token punctuation">(</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> sort_df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">,</span> f <span class="token operator">+</span> <span class="token string">'_before_count'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runtime:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'************** exposure_ts_gap stats **************'</span><span class="token punctuation">)</span>    <span class="token comment"># 第一次曝光到当前的时间差</span>    tmp <span class="token operator">=</span> sort_df<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>f<span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'ts'</span><span class="token punctuation">:</span> f <span class="token operator">+</span> <span class="token string">'_first_exposure_ts'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_first_exposure_ts_gap'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span> <span class="token operator">-</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_first_exposure_ts'</span><span class="token punctuation">]</span>    <span class="token keyword">del</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_first_exposure_ts'</span><span class="token punctuation">]</span>        <span class="token comment"># 当前到最后一次曝光的时间差</span>    tmp <span class="token operator">=</span> sort_df<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>f<span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'last'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tmp<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'ts'</span><span class="token punctuation">:</span> f <span class="token operator">+</span> <span class="token string">'_last_exposure_ts'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_last_exposure_ts_gap'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_last_exposure_ts'</span><span class="token punctuation">]</span> <span class="token operator">-</span> df<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span>    <span class="token keyword">del</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_last_exposure_ts'</span><span class="token punctuation">]</span>        prev_gap_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    next_gap_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    tmp <span class="token operator">=</span> sort_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token comment"># 前x次、后x次曝光到当前的时间差</span>    <span class="token keyword">for</span> gap <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        sort_df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_prev&#123;&#125;_exposure_ts_gap'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> tmp<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span>gap<span class="token punctuation">)</span>        sort_df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_next&#123;&#125;_exposure_ts_gap'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token operator">-</span>gap<span class="token punctuation">)</span> <span class="token operator">-</span> tmp<span class="token punctuation">[</span><span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        tmp2 <span class="token operator">=</span> sort_df<span class="token punctuation">[</span>            <span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">,</span> <span class="token string">'&#123;&#125;_prev&#123;&#125;_exposure_ts_gap'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&#123;&#125;_next&#123;&#125;_exposure_ts_gap'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">'ts'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        prev_gap_cols<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;&#125;_prev&#123;&#125;_exposure_ts_gap'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">)</span>        next_gap_cols<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;&#125;_next&#123;&#125;_exposure_ts_gap'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> gap<span class="token punctuation">)</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_prev_exposure_ts_gap_mean'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>prev_gap_cols<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_next_exposure_ts_gap_mean'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>next_gap_cols<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">del</span> tmp2    gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runtime:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'************** interactive feat **************'</span><span class="token punctuation">)</span>    <span class="token comment"># 各离散特征之间的交互</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> cate_cols<span class="token punctuation">:</span>        <span class="token keyword">if</span> col <span class="token operator">==</span> f <span class="token keyword">or</span> col <span class="token operator">==</span> <span class="token string">'guid'</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>        df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token string">'&#123;&#125;_&#123;&#125;_nunique'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">'nunique'</span><span class="token punctuation">,</span>          <span class="token string">'&#123;&#125;_&#123;&#125;_ent'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> entropy<span class="token punctuation">(</span>x<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 熵</span>          <span class="token string">'&#123;&#125;_&#123;&#125;_mode'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 众数（即出现次数最多的item）</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> col<span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token string">'&#123;&#125;_&#123;&#125;_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">'count'</span> <span class="token comment"># 共现次数</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> col<span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_count_ratio'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span> <span class="token comment"># 比例偏好</span>        df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_count_ratio'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span> <span class="token comment"># 比例偏好</span>        df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_nunique_ratio_&#123;&#125;_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_nunique'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span>        df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_mode_count'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_mode'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_mode'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mode_cols<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;&#125;_&#123;&#125;_mode'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runtime:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>    df <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">del</span> tmp    gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runtime:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>cate_cols<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>mode_cols<span class="token punctuation">)</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 比赛相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python_各类脚本</title>
      <link href="/2022/02/23/cs/python-ge-lei-jiao-ben/"/>
      <url>/2022/02/23/cs/python-ge-lei-jiao-ben/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import collectionscollections.defaultdict(    collections.Counter)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>计数字典</strong></p><h4 id="百度爬虫"><a href="#百度爬虫" class="headerlink" title="百度爬虫"></a>百度爬虫</h4><ul><li>思路：访问url，构造header，破解密码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_image</span><span class="token punctuation">(</span>keywords<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> yuzhi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    page_num <span class="token operator">=</span> <span class="token string">'30'</span>    page_c <span class="token operator">=</span> <span class="token string">'1e'</span>    url <span class="token operator">=</span> <span class="token string">'https://image.baidu.com/search/acjson?tn=resultjson_com&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;queryWord=%E6%B0%B4%E7%89%9B&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=-1&amp;z=&amp;ic=&amp;hd=&amp;latest=&amp;copyright=&amp;word=%E6%B0%B4%E7%89%9B&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;qc=&amp;nc=1&amp;fr=&amp;expermode=&amp;force=&amp;pn='</span><span class="token operator">+</span>page_num<span class="token operator">+</span><span class="token string">'&amp;rn=30&amp;gsm='</span><span class="token operator">+</span>page_c<span class="token operator">+</span><span class="token string">'&amp;1563441550094='</span>    headers <span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'image.baidu.com'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">'https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=result&amp;fr=&amp;sf=1&amp;fmq=1563441523158_R&amp;pv=&amp;ic=&amp;nc=1&amp;z=&amp;hd=&amp;latest=&amp;copyright=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;sid=&amp;word=%E6%B0%B4%E7%89%9B'</span><span class="token punctuation">,</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token triple-quoted-string string">'''  tn: resultjson_com    ipn: rj    ct: 201326592    is:    fp: result    queryWord: 煮玉米    cl: 2    lm: -1    ie: utf-8    oe: utf-8    adpicid:    st: -1    z:    ic:    hd:    latest:    copyright:    word: 煮玉米    s:    se:    tab:    width:    height:    face: 0    istype: 2    qc:    nc: 1    fr:    expermode:    force:    pn: 30    rn: 30    gsm: 1e    1563499326921:    '''</span>    sendData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    send_data <span class="token operator">=</span> data<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> send_data<span class="token punctuation">:</span>            data_list <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                key<span class="token punctuation">,</span>value <span class="token operator">=</span> data_list                <span class="token keyword">if</span> key <span class="token keyword">and</span> value<span class="token punctuation">:</span>                    sendData<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    sendData<span class="token punctuation">[</span><span class="token string">'word'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sendData<span class="token punctuation">[</span><span class="token string">'queryWord'</span><span class="token punctuation">]</span> <span class="token operator">=</span> keywords    i <span class="token operator">=</span> <span class="token number">1</span>    gsm_1 <span class="token operator">=</span> <span class="token number">1</span>    gsm_2 <span class="token operator">=</span> <span class="token number">0xe</span>    succed <span class="token operator">=</span> <span class="token number">0</span>    passed <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span>    <span class="token keyword">while</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">:</span>        gsm <span class="token operator">=</span> <span class="token string">''</span>        gsm <span class="token operator">+=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>gsm_1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        gsm <span class="token operator">+=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>gsm_2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> gsm_1<span class="token operator">==</span><span class="token number">0xf</span><span class="token punctuation">:</span>            gsm_1 <span class="token operator">=</span> <span class="token number">0x10</span>        <span class="token keyword">elif</span> gsm_1 <span class="token operator">==</span><span class="token number">0x1e</span><span class="token punctuation">:</span>            gsm_1 <span class="token operator">=</span> <span class="token number">0x1f</span>        <span class="token keyword">elif</span> gsm_1 <span class="token operator">==</span><span class="token number">0x2d</span><span class="token punctuation">:</span>            gsm_1 <span class="token operator">=</span> <span class="token number">0x2e</span>        <span class="token keyword">elif</span> gsm_1 <span class="token operator">==</span><span class="token number">0x3c</span><span class="token punctuation">:</span>            gsm_1 <span class="token operator">=</span> <span class="token number">0x3d</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            gsm_1 <span class="token operator">=</span>gsm_1 <span class="token operator">+</span> <span class="token number">2</span>        gsm_2 <span class="token operator">=</span> gsm_2<span class="token operator">-</span><span class="token number">2</span>        <span class="token keyword">if</span> gsm_2<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>            gsm_2 <span class="token operator">=</span> <span class="token number">0xe</span>        <span class="token keyword">if</span> i<span class="token operator">></span>yuzhi<span class="token punctuation">:</span>            sendData<span class="token punctuation">[</span><span class="token string">'rn'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_num <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token operator">*</span>i<span class="token punctuation">)</span>            sendData<span class="token punctuation">[</span><span class="token string">'gsm'</span><span class="token punctuation">]</span> <span class="token operator">=</span> page_c <span class="token operator">=</span> gsm            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"rn:%s  gsm:%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>page_num<span class="token punctuation">,</span>page_c<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                headers<span class="token punctuation">[</span><span class="token string">'User-Agent'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0'</span>            url <span class="token operator">=</span> <span class="token string">'https://image.baidu.com/search/acjson?tn=resultjson_com&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;queryWord=%E6%B0%B4%E7%89%9B&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=-1&amp;z=&amp;ic=&amp;hd=&amp;latest=&amp;copyright=&amp;word=%E6%B0%B4%E7%89%9B&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;qc=&amp;nc=1&amp;fr=&amp;expermode=&amp;force=&amp;pn='</span><span class="token operator">+</span>page_num<span class="token operator">+</span><span class="token string">'&amp;rn=30&amp;gsm='</span><span class="token operator">+</span>page_c<span class="token operator">+</span><span class="token string">'&amp;1563441550094='</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>params<span class="token operator">=</span>sendData<span class="token punctuation">)</span>                content <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                passed <span class="token operator">+=</span> <span class="token number">30</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">for</span> index<span class="token punctuation">,</span>src <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># index =str(index).zfill(2)</span>                image_url <span class="token operator">=</span> src<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'objURL'</span><span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token string">'http://'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> image_url<span class="token punctuation">:</span>                        image_url <span class="token operator">=</span> convert<span class="token punctuation">(</span>image_url<span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                <span class="token comment">#if os.path.exists('image'):</span>                    <span class="token comment">#pass</span>                <span class="token comment">#else:</span>                    <span class="token comment">#os.mkdir('image')</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'huawei.csv'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">,</span>newline<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    csv_write <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>                    csv_write<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span>image_url<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> image_url<span class="token punctuation">:</span>                    name <span class="token operator">=</span> <span class="token string">'huawei/'</span><span class="token operator">+</span>keywords<span class="token operator">+</span> <span class="token string">'/image%s.jpg'</span><span class="token operator">%</span><span class="token punctuation">(</span>index<span class="token operator">+</span>count<span class="token punctuation">)</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>url<span class="token operator">=</span>image_url<span class="token punctuation">,</span>filename<span class="token operator">=</span>name<span class="token punctuation">)</span>                        <span class="token comment">#print('%s is download'%name)</span>                        time2 <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>                        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>time2<span class="token punctuation">)</span>                        succed <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                        passed <span class="token operator">+=</span> <span class="token number">1</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    time2 <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>                    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>time2<span class="token punctuation">)</span>            count <span class="token operator">+=</span> <span class="token number">30</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s time download'</span><span class="token operator">%</span>i<span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>succed<span class="token punctuation">,</span> passed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="python-操作word文档"><a href="#python-操作word文档" class="headerlink" title="python 操作word文档"></a>python 操作word文档</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span class="token keyword">from</span> docx<span class="token punctuation">.</span>shared <span class="token keyword">import</span> Inches<span class="token comment"># look_str = '统筹'</span>look_str1 <span class="token operator">=</span> <span class="token string">'黑社会性质'</span><span class="token keyword">for</span> each <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'docx'</span> <span class="token keyword">in</span> each <span class="token keyword">and</span> <span class="token string">"$"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> each<span class="token punctuation">:</span>        <span class="token comment">#print(each)</span>        document <span class="token operator">=</span> Document<span class="token punctuation">(</span>each<span class="token punctuation">)</span>        text <span class="token operator">=</span> document<span class="token punctuation">.</span>paragraphs        <span class="token keyword">for</span> each_p <span class="token keyword">in</span> text<span class="token punctuation">:</span>            each_p1 <span class="token operator">=</span> each_p<span class="token punctuation">.</span>text            <span class="token keyword">if</span> look_str <span class="token keyword">in</span> each_p1 <span class="token keyword">and</span> look_str1 <span class="token keyword">in</span> each_p1<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>each_p1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="keras-callback函数"><a href="#keras-callback函数" class="headerlink" title="keras callback函数"></a>keras callback函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">logdir <span class="token operator">=</span> pathlib<span class="token punctuation">.</span>Path<span class="token punctuation">(</span><span class="token string">r'./cnn-callbacks'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> logdir<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logdir<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token punctuation">)</span>output_model_file <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>logdir <span class="token operator">/</span> <span class="token string">'fashion_minist_model.h5'</span><span class="token punctuation">)</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>TensorBoard<span class="token punctuation">(</span>log_dir<span class="token operator">=</span>logdir<span class="token punctuation">,</span> histogram_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> profile_batch<span class="token operator">=</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>ModelCheckpoint<span class="token punctuation">(</span>output_model_file<span class="token punctuation">,</span> save_best_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tf<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span>EarlyStopping<span class="token punctuation">(</span>patience<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> min_delta<span class="token operator">=</span><span class="token number">1e-3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> validation_data<span class="token operator">=</span>valid_set<span class="token punctuation">,</span>                     steps_per_epoch<span class="token operator">=</span><span class="token number">6500</span> <span class="token operator">//</span> <span class="token number">32</span><span class="token punctuation">,</span> validation_steps<span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">//</span> <span class="token number">32</span><span class="token punctuation">,</span>                    epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>                    callbacks<span class="token operator">=</span>callbacks                   <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>目标检测集成工具</strong></p><p><a href="https://github.com/ZFTurbo/Weighted-Boxes-Fusion">https://github.com/ZFTurbo/Weighted-Boxes-Fusion</a></p><p>@</p><h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> scipy <span class="token keyword">as</span> sp<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> f1_score<span class="token keyword">class</span> <span class="token class-name">OptimizedRounder</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>coef_ <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">_kappa_loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coef<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        X_p <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> pred <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>X_p<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>        ll <span class="token operator">=</span> quadratic_weighted_kappa<span class="token punctuation">(</span>y<span class="token punctuation">,</span> X_p<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ll    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss_partial <span class="token operator">=</span> partial<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_kappa_loss<span class="token punctuation">,</span> X<span class="token operator">=</span>X<span class="token punctuation">,</span> y<span class="token operator">=</span>y<span class="token punctuation">)</span>        initial_coef <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>coef_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss_partial<span class="token punctuation">,</span> initial_coef<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'nelder-mead'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> coef<span class="token punctuation">)</span><span class="token punctuation">:</span>        X_p <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> pred <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>X_p<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">elif</span> pred <span class="token operator">>=</span> coef<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">and</span> pred <span class="token operator">&lt;</span> coef<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                X_p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>        <span class="token keyword">return</span> X_p    <span class="token keyword">def</span> <span class="token function">coefficients</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ThresholdOptimizer</span><span class="token punctuation">:</span>  <span class="token comment"># ？？？？</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loss_fn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>coef_ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>loss_fn <span class="token operator">=</span> loss_fn        self<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">_loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coef<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        ll <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_fn<span class="token punctuation">(</span>y<span class="token punctuation">,</span> X<span class="token punctuation">,</span> coef<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ll    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss_partial <span class="token operator">=</span> partial<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_loss<span class="token punctuation">,</span> X<span class="token operator">=</span>X<span class="token punctuation">,</span> y<span class="token operator">=</span>y<span class="token punctuation">)</span>        initial_coef <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>coef_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>            loss_partial<span class="token punctuation">,</span> initial_coef<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"nelder-mead"</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">coefficients</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">calc_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> coef<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>loss_fn<span class="token punctuation">(</span>y<span class="token punctuation">,</span> X<span class="token punctuation">,</span> coef<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">row_multi_f1_score</span><span class="token punctuation">(</span>y_true<span class="token punctuation">,</span> y_pred<span class="token punctuation">,</span> weights_<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">'macro'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据 weights 计算 f1分数    :param y_true: shape(n,)    :param y_pred: shape(n,num_class)    :param weights_: weights of each class    :return: f1_score(y_true, np.argmax(y_pred*weights))    """</span>    <span class="token keyword">if</span> weights_ <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Warning weight is None"</span><span class="token punctuation">)</span>        weights_ <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> y_pred<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weights_<span class="token punctuation">)</span> <span class="token operator">==</span> y_pred<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"the shape of weight != the shape of y_pred"</span>    <span class="token comment"># print(y_pred)</span>    <span class="token keyword">return</span> f1_score<span class="token punctuation">(</span>        y_true<span class="token operator">=</span>y_true<span class="token punctuation">,</span> y_pred<span class="token operator">=</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_pred <span class="token operator">*</span> weights_<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> average<span class="token operator">=</span>average    <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MultiF1Optimizer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loss_fn<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>coef_ <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>loss_fn <span class="token operator">=</span> loss_fn <span class="token keyword">if</span> loss_fn <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> row_multi_f1_score        self<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> num_classes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_class <span class="token operator">=</span> num_classes    <span class="token keyword">def</span> <span class="token function">_loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coef<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        ll <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_fn<span class="token punctuation">(</span>y<span class="token punctuation">,</span> X<span class="token punctuation">,</span> coef<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>ll    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss_partial <span class="token operator">=</span> partial<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_loss<span class="token punctuation">,</span> X<span class="token operator">=</span>X<span class="token punctuation">,</span> y<span class="token operator">=</span>y<span class="token punctuation">)</span>        initial_coef <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>num_class<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>coef_ <span class="token operator">=</span> sp<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>            loss_partial<span class="token punctuation">,</span> initial_coef<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"nelder-mead"</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">coefficients</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token string">"x"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">calc_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> coef<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>loss_fn<span class="token punctuation">(</span>y<span class="token punctuation">,</span> X<span class="token punctuation">,</span> coef<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    thresholder <span class="token operator">=</span> MultiF1Optimizer<span class="token punctuation">(</span><span class="token punctuation">)</span>    y_true <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> y_true<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>thresholder<span class="token punctuation">.</span>calc_score<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span><span class="token punctuation">)</span>    thresholder<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">)</span>    coef <span class="token operator">=</span> thresholder<span class="token punctuation">.</span>coefficients<span class="token punctuation">(</span><span class="token punctuation">)</span>    f1_score <span class="token operator">=</span> thresholder<span class="token punctuation">.</span>calc_score<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_true<span class="token punctuation">,</span> coef<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>coef<span class="token punctuation">,</span> f1_score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux使用杂记3</title>
      <link href="/2021/12/29/cs/linux-shi-yong-za-ji-3/"/>
      <url>/2021/12/29/cs/linux-shi-yong-za-ji-3/</url>
      
        <content type="html"><![CDATA[<h4 id="Mount-is-denied-because-the-NTFS-volume-is-already-exclusively-opened"><a href="#Mount-is-denied-because-the-NTFS-volume-is-already-exclusively-opened" class="headerlink" title="Mount is denied because the NTFS volume is already exclusively opened."></a>Mount is denied because the NTFS volume is already exclusively opened.</h4><p>首先去解决已经挂载好的问题</p><blockquote><p>df -h 查看分区和挂载情况</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> blkid<span class="token comment"># 查看卷标以及uuid</span>/dev/sda1: <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"win7"</span> <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"40305E93305E9030"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ntfs"</span>/dev/sda5: <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"software"</span> <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"823E2D6213AF89BD"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ntfs"</span>/dev/sdb1: <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"learning"</span> <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"CCBC9A082598C349"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ntfs"</span>/dev/sdb2: <span class="token assign-left variable">LABEL</span><span class="token operator">=</span><span class="token string">"datadisk"</span> <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"40e93235-b5d1-48c4-936c-212029bda05a"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ext4"</span>/dev/sdc1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"7350922f-c69c-4f33-84e0-befd8b42d2f6"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"swap"</span>/dev/sdd1: <span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"3002feb1-dceb-441d-bfd2-31243e336d39"</span> <span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"ext4"</span>、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>sudo e2label &#x2F;dev&#x2F;sdb2 data #为了更好的区分硬盘分区，修改卷标</p></blockquote><blockquote><p>sudo umount &#x2F;dev&#x2F;sdb2 # 弹出挂载</p><p>sudo mount &#x2F;dev&#x2F;sdb2  &#x2F;home&#x2F;data # 挂载， 挂载路径必须存在</p><p>sudo mount &#x2F;dev&#x2F;sdc2 &#x2F;home&#x2F;data&#x2F;</p></blockquote><h4 id="修改自动挂载"><a href="#修改自动挂载" class="headerlink" title="修改自动挂载"></a>修改自动挂载</h4><ul><li><blockquote><p>sudo vim &#x2F;etc&#x2F;fstab</p></blockquote></li><li><p>&#96;&#96;&#96;shell<br>&#x2F;dev&#x2F;sdb2  &#x2F;home&#x2F;data ext4 defaults 0 1</p><h1 id="or"><a href="#or" class="headerlink" title="or"></a>or</h1><h1 id="编号，查看第一步"><a href="#编号，查看第一步" class="headerlink" title="编号，查看第一步"></a>编号，查看第一步</h1><p>UUID&#x3D;”40e93235-b5d1-48c4-936c-212029bda05a” &#x2F;home&#x2F;data ext4 defaults 0 1</p><pre class="line-numbers language-none"><code class="language-none">* &#96;&#96;&#96;shell  sudo chown -R 你的用户名 &#x2F;home&#x2F;data  sudo chmod 777 &#x2F;home&#x2F;data    # or   sudo chome -R 775 &#x2F;home&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-dos" data-language="dos"><code class="language-dos">netstat -ano | findstr &lt;端口号&gt;taskkill &#x2F;F &#x2F;pid &lt;查询到的pid&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>windows 关闭端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> psmisc<span class="token function">fuser</span> <span class="token parameter variable">-v</span> /dev/nvidia*<span class="token function">lsof</span> /dev/nvidia* <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token function">kill</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">ps</span> x <span class="token operator">|</span><span class="token function">grep</span> python<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'$5 ~ /lybTorch/ &#123;print $1&#125;'</span> <span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">kill</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决linux 内存泄露</p><p>###Mount is denied because the NTFS volume is already exclusively opened.</p><h5 id="解决类似umount-target-is-busy挂载盘卸载不掉问题"><a href="#解决类似umount-target-is-busy挂载盘卸载不掉问题" class="headerlink" title="解决类似umount target is busy挂载盘卸载不掉问题"></a><a href="https://www.cnblogs.com/ding2016/p/9605526.html">解决类似umount target is busy挂载盘卸载不掉问题</a></h5><p>问题： Linux下挂载后的分区或者磁盘某些时候需要umount的时候出现类似“umount: &#x2F;mnt: target is busy.”等字样，或者“umount: &#x2F;xxx: device is busy.”。</p><p>原因： 该报错通常是由于待卸载磁盘正在使用，导致无法直接卸载。需要将当前使用数据盘的进程杀掉，才能卸载。</p><p>解决方法：</p><p>​<strong>方法一、</strong> <strong>使用fuser命令处理</strong></p><p>安装fuser命令</p><pre class="line-numbers language-none"><code class="language-none">yum install psmisc <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看在使用的进程</p><pre class="line-numbers language-none"><code class="language-none">fuser -mv &#x2F;mnt&#x2F; # &#x2F;mnt是磁盘<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>杀死占用的进程，并再次查看</p><pre class="line-numbers language-none"><code class="language-none">fuser -kv &#x2F;mnt&#x2F;fuser -mv &#x2F;mnt&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>卸载</p><pre class="line-numbers language-none"><code class="language-none">umount &#x2F;mnt&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数说明</p><blockquote><p>-k,–kill kill 　　processes accessing the named file<br>-m,–mount 　　 show all processes using the named filesystems or block device<br>-v,–verbose 　　 verbose output</p></blockquote><p>可以使用 fuser -km &#x2F;mnt 进行 kill 进程。<br>可以使用 kill 命令杀掉查到对应的进程 。<br>强制 kill 进程可能会导致数据丢失，请确保数据得到有效备份后，再进行相关操作。</p><p><strong>方法2通过lsof命令处理</strong> </p><pre class="line-numbers language-none"><code class="language-none">lsof &#x2F;mnt&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到PID对应的进程或者服务，然后杀死或者停止相应服务即可</p><p><strong>ubuntu上安装matlab</strong><br><a href="https://blog.csdn.net/qq_36477562/article/details/95103549?spm=1001.2101.3001.6650.11&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-11-95103549-blog-115167728.pc_relevant_aa_2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-11-95103549-blog-115167728.pc_relevant_aa_2&utm_relevant_index=17">ref</a>  &amp; <a href="https://zhuanlan.zhihu.com/p/138870330">ref2</a></p><h5 id="tar解压出错：gzip-stdin-unexpected-end-of-file的解决"><a href="#tar解压出错：gzip-stdin-unexpected-end-of-file的解决" class="headerlink" title="tar解压出错：gzip: stdin: unexpected end of file的解决"></a>tar解压出错：gzip: stdin: unexpected end of file的解决</h5><p><strong>解压文件快捷指令</strong></p><blockquote><p>tar zxvf  MY_NAME.tar.gz</p><p>tar zxvf  MY_NAME.tgz</p></blockquote><blockquote><p>zip -O GBK xxx.zip</p></blockquote><h5 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h5><blockquote><p>zip -r myfile.zip .&#x2F;*</p></blockquote><h5 id="查看分区大小"><a href="#查看分区大小" class="headerlink" title="查看分区大小"></a>查看分区大小</h5><pre class="line-numbers language-none"><code class="language-none">sudo fdisk -l显示的是各个分区的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2021/10/30/cs/mysql/"/>
      <url>/2021/10/30/cs/mysql/</url>
      
        <content type="html"><![CDATA[<p>多个实例可以共用这些软件</p><p>tar -zxvf (查看)</p><p>socket链接</p><p>ps -ef |grep mysql</p><p>一个守护进程，一个拉取进程</p><p>o%;Yrmqx9.ex</p><p>&#x2F;iddbs&#x2F;mysql-5.7.31&#x2F;bin&#x2F;mysql -uroot -p’o%;Yrmqx9.ex’ -S &#x2F;dbdata&#x2F;3306&#x2F;mysql.sock –connect-expired-password -e “alter user root@localhost identified by ‘081634’;flush privileges;”</p><p>&#x2F;iddbs&#x2F;mysql-5.7.31&#x2F;bin&#x2F;mysql -uroot -p’081634’ -S &#x2F;dbdata&#x2F;3306&#x2F;mysql.sock </p><p>去掉 -p 后面的密码</p><p><img src="/BlogImgs/mysql/935329-20200526090333526-551783472.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux使用杂记2</title>
      <link href="/2021/10/30/cs/linux-shi-yong-za-ji-2/"/>
      <url>/2021/10/30/cs/linux-shi-yong-za-ji-2/</url>
      
        <content type="html"><![CDATA[<p>一、用户管理类命令</p><p>1.添加用户</p><p>格式：useradd  [选项]  用户名范例：</p><p>useradd david</p><p>-添加名字为david的用户，当用户创建成功后，会在&#x2F;home&#x2F; 目录下生成与用户名同名的目录。</p><p><strong>2.</strong>  <strong>删除用户</strong></p><p>格式：userdel [选项] [用户名]范例：</p><p>userdel –r david</p><p>-删除名字为smb的用户, “-r”选项会使</p><p>&#x2F;home目录下的该用户目录也被删除。</p><p><strong>3.</strong>  <strong>修改密码</strong></p><p>格式：passwd   [选项]  [用户名]</p><p>范例：</p><p>passwd david</p><p>修改david用户的密码</p><p><strong>4.</strong>  <strong>切换用户</strong></p><p>格式：su [选项] [用户名]</p><p>范例：</p><p>su – root</p><p>切换到root用户，并将root用户的环境变量同时带入</p><p><strong>5.</strong>  <strong>添加用户组</strong></p><p>格式：groupadd [选项] [用户组名]</p><p>范例：</p><p>groupadd group1</p><p>添加组名为“group1”的用户组</p><p><strong>6.</strong>  <strong>删除用户组</strong></p><p>格式：groupdel [用户组名]</p><p>范例：</p><p>groupdel group1</p><p>删除组名为“group1”的用户组</p><p><strong>二、</strong> <strong>文件与目录类命令</strong></p><p><strong>1.</strong>  <strong>查看目录</strong></p><p>格式：ls [选项] [目录或文件]</p><p>范例：</p><p>1.ls &#x2F;home</p><p>显示&#x2F;home目录下的文件与目录（不包含隐藏文件）</p><p>2.ls –a &#x2F;home</p><p>显示&#x2F;home目录下的所有文件与目录（含隐藏文件）</p><p>3.ls –l &#x2F;home</p><p>显示&#x2F;home目录下的文件与目录的详细信息</p><p><strong>2.</strong>  <strong>改变工作目录</strong></p><p>格式：cd 目录名</p><p>范例：</p><p>1.cd &#x2F;home&#x2F;</p><p>进入&#x2F;home目录</p><p>2.cd ..</p><p>退回到上一级目录</p><p><strong>3.</strong>  <strong>复制文件&#x2F;目录</strong></p><p>格式：cp [选项]  源文件或目录    目标文件或目录</p><p>范例：</p><p>1.cp &#x2F;home&#x2F;test &#x2F;tmp&#x2F;</p><p>将  &#x2F;home目录下的test文件copy到&#x2F;tmp目录下</p><p>2.cp –r &#x2F;home&#x2F;dir1 &#x2F;tmp&#x2F;</p><p>将  &#x2F;home目录下的dir1目录copy到&#x2F;tmp目录下</p><p><strong>4.</strong>  <strong>移动或更名</strong></p><p>格式：mv [选项] 源文件或目录 目标文件或目录</p><p>范例：</p><p>1.mv &#x2F;home&#x2F;test &#x2F;home&#x2F;test1</p><p>将  &#x2F;home目录下的test文件更名为test1 2.mv &#x2F;home&#x2F;dir1 &#x2F;tmp&#x2F;</p><p>将  &#x2F;home目录下dir1目录移动（剪切）到&#x2F;tmp目录下</p><p><strong>5.</strong>  <strong>删除文件&#x2F;目录</strong></p><p>格式：rm [选项] 文件或目录</p><p>范例：</p><p>1.rm &#x2F;home&#x2F;test</p><p>删除&#x2F;home目录下的test文件</p><p>2.rm –r &#x2F;home&#x2F;dir</p><p>删除&#x2F;home目录下的dir目录</p><p><strong>6.</strong>  <strong>改变文件的权限</strong></p><p>格式： chmod [who] [+ | - | &#x3D;] [mode] 文件名参数：</p><p>who:</p><p>u 表示文件的所有者。</p><p>g 表示与文件所有者同组的用户。</p><p>o 表示“其他用户”。</p><p>a 表示“所有用户”。它是系统默认值。</p><p>mode:</p><p>+ 添加某个权限</p><p>- 取消某个权限</p><p>&#x3D; 赋予给定权限</p><p>例：chmod g+w hello.c</p><p><strong>7.</strong>  <strong>创建目录</strong></p><p>格式：mkdir [选项] 目录名</p><p>范例：</p><p>1.mkdir &#x2F;home&#x2F;workdir</p><p>在&#x2F;home目录下创建workdir目录</p><p>2.mkdir –p &#x2F;home&#x2F;dir1&#x2F;dri4&#x2F;dir3&#x2F;dir2</p><p>创建&#x2F;home&#x2F;dir1&#x2F;dir2目录，如果dir1不存在，先创建dir1</p><p><strong>8.</strong>  <strong>查看目录大小</strong></p><p>格式：du 目录名</p><p>范例：</p><p>\1. du &#x2F;tmp</p><p><strong>9.</strong>  <strong>查看当前路径</strong></p><p>格式：pwd</p><p>范例：</p><p>\1. pwd</p><p>显示当前工作目录的绝对路径</p><p><strong>三、 压缩打包类命令</strong></p><p><strong>1****、压缩解压</strong></p><p>在Linux环境中，压缩文件的扩展名通常为*.tar; *.tar.gz;</p><p>*.tgz; *.gz; *.bz2。而不同后缀名的文件，则需要使用不同</p><p>的命令来处理。</p><p>*.gz &lt;-&gt; gzip命令压缩的文件</p><p>*.bz2 &lt;-&gt; bzip2命令压缩的文件</p><p>*.tar &lt;-&gt; tar命令打包的文件</p><p>*.tar.gz &lt;-&gt; tar打包后，再经过gzip压缩的文件</p><p>*.tar.bz2 &lt;-&gt; tar命令打包后，再经过bzip2压缩的文件</p><p><strong>2****、压缩解压-gzip</strong></p><p>格式：gzip [选项] 文件名</p><p>范例：</p><p>1.gzip &#x2F;root&#x2F;anaconda-ks.cfg</p><p>压缩文件</p><p>2.gzip –d &#x2F;root&#x2F;anaconda-ks.cfg.gz</p><p>解压文件</p><p><strong>3****、压缩解压-bzip2</strong></p><p>格式：bzip2 [选项] 文件名</p><p>范例：</p><p>1.bzip2 &#x2F;root&#x2F;anaconda-ks.cfg</p><p>压缩文件</p><p>2.bzip2 –d &#x2F;root&#x2F;anaconda-ks.cfg.bz2</p><p>解压文件</p><p><strong>4****、打包压缩-tar</strong></p><p>格式：tar [选项] 目录或者文件范例：</p><p>1.tar cvf tmp.tar &#x2F;tmp</p><p>将tmp目录打包为一个文件</p><p>2.tar xvf tmp.tar</p><p>将打包文件解开</p><p>3.tar cvzf tmp.tar.gz &#x2F;tmp</p><p>将tmp目录打包为一个文件</p><p>4.tar xvzf tmp.tar.gz</p><p>将打包文件解开</p><p><strong>四、</strong> 磁盘管理类命令</p><p><strong>1、****加载光盘-mount</strong></p><p>格式：mount    [选项]   设备名  挂载目录</p><p>范例：</p><p>\1. mount &#x2F;dev&#x2F;cdrom &#x2F;mnt</p><p><strong>2、****卸载光盘-umount</strong></p><p>格式：umount  挂载目录</p><p>范例：</p><p>\1. umount &#x2F;mnt</p><p><strong>3、****查看磁盘-df</strong></p><p>格式：df [选项]</p><p>范例：</p><p>1.df -hl</p><p><strong>4、****创建新文件 -touch</strong></p><p>格式：touch 文件名</p><p>范例：</p><p>1.touch newfile</p><p>创建一个名字为“newfile”的空白文件</p><p><strong>5、****文件链接 -ln</strong></p><p>在Linux系统中，存在类似于windows中“快捷方式”的</p><p>链接文件。链接文件又分为“软链接”和“硬链接”。</p><p>格式：ln [选项] 文件名   链接名</p><p>范例：</p><p>\1. ln oldfile hlink</p><p>为oldfile文件创建一个硬链接hlink</p><p>\1. ln –s oldfile slink</p><p>为oldfile文件创建一个软链接slink</p><p><strong>五、</strong> <strong>查找类命令</strong></p><p><strong>1.</strong>  <strong>查找文件&#x2F;目录-find</strong></p><p>格式：find 查找路径 -name 文件名</p><p>范例：</p><p>\1. find &#x2F;root&#x2F; -name install.log</p><p>在root目录下寻找名字为intall.log的文件</p><p><strong>2.</strong>  <strong>查找字符串</strong></p><p>格式：grep “字符串”路径 [选项]</p><p>范例：</p><p>1.grep “hello” .&#x2F; -rn</p><p>在当前路径下寻找包含字符串”hello”的文件</p><p>2.grep “he*” .&#x2F; -rn</p><p>在当前路径下寻找包含以”he”开头的字符串的文件</p><p><strong>六、</strong> 进程管理类命令</p><p><strong>1、****查看进程-PS</strong></p><p>格式：ps    [选项]</p><p>范例：</p><p>\1. ps aux</p><p><strong>2、****杀死进程-kill</strong></p><p>格式：kill [选项] pid</p><p>范例：</p><p>1.vi hello.c</p><p>2.ps aux</p><p>3.kill</p><p><strong>3、****查看内存-free</strong></p><p>格式：free [选项]</p><p>范例：</p><p>\1. free</p><p><strong>4、<strong><strong>CPU</strong></strong>占有率 -top</strong></p><p>格式：top [选项]</p><p>范例：</p><p>\1. top</p><p><strong>七、</strong> <strong>杂项命令大聚合</strong></p><p><strong>1、****软件管理 -rpm</strong></p><p>格式：rpm [选项] [软件包]</p><p>范例：</p><p>1.rpm –ivh &#x2F;mnt&#x2F;Packages&#x2F;xinetd-2.3.14- 34.el6.i686.rpm</p><p>安装xinetd-2.3.14-34.el6.i686.rpm</p><p>2.rpm –qa</p><p>查看系统中已经安装的所有软件包</p><p>\3. rpm –e xinetd-2.3.14-34.el6.i686</p><p>卸载已经安装的xinetd-2.3.14-34.el6.i686</p><p><strong>2、****管道操作 -|</strong></p><p>格式    命令1 | 命令2 范例：</p><p>\1.  rpm –qa|grep tar</p><p>查询系统中安装的所有软件包，并从中找出带有字符串”tar”的。</p><p><strong>3、****查看帮助 -man</strong></p><p>格式：man 命令名范例：</p><p>\1.  man find</p><p>查看find命令的用法</p><p><strong>4、****关闭Linux系统</strong></p><p>格式：shutdown [选项] 时间</p><p>范例：</p><p>\1.  shutdown now</p><p>立刻关机</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络知识</title>
      <link href="/2021/10/24/cs/wang-luo-zhi-shi/"/>
      <url>/2021/10/24/cs/wang-luo-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p>（1）桥接模式的虚拟机，就像一个在路由器”民政局”那里”上过户口”的成年人，有自己单独的居住地址，虽然和主机住在同一个大院里，但好歹是有户口的人，可以大摇大摆地直接和外面通信。</p><p>（2）NAT模式的虚拟机，纯粹就是一个没上过户口的黑户，路由器”民政局”根本不知道有这么个人，自然也不会主动和它通信。即使虚拟机偶尔要向外面发送点的信件，都得交给主机以主机的名义转发出去，主机还专门请了一位叫做NAT的老大爷来专门负责这些虚拟机的发信、收信事宜。</p><p>（3）仅主机模式的虚拟机，纯粹是一个彻彻底底的黑奴，不仅没有户口、路由器”民政局”不知道这么号人，还被主机关在小黑屋里，连信件也不准往外发。</p><p>其中这个仅主机模式能够保障我们在拔掉网线的情况下继续连接我们的虚拟机，不依靠公网连接，而是依靠物理机和虚拟机的关系连接。在断网的情况下，利用这个模式，我们可以继续连接虚拟机，实现我们的操作。</p><blockquote><p>nat 模式解释，也就是可以单独设置vm8的网络的地址。</p></blockquote><p><img src="/BlogImgs/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/160926204664451-1635044350829.png" alt="img"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">TYPE</span><span class="token operator">=</span><span class="token string">"Ethernet"</span><span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span><span class="token string">"dhcp"</span><span class="token assign-left variable">DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">PEERDNS</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">PEERROUTES</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV4_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">IPV6INIT</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_AUTOCONF</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_DEFROUTE</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_PEERDNS</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_PEERROUTES</span><span class="token operator">=</span><span class="token string">"yes"</span><span class="token assign-left variable">IPV6_FAILURE_FATAL</span><span class="token operator">=</span><span class="token string">"no"</span><span class="token assign-left variable">IPV6_ADDR_GEN_MODE</span><span class="token operator">=</span><span class="token string">"stable-privacy"</span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"ens33"</span><span class="token assign-left variable">UUID</span><span class="token operator">=</span><span class="token string">"0a984214-81f5-4156-bd8e-d5fdca33aa40"</span><span class="token assign-left variable">DEVICE</span><span class="token operator">=</span><span class="token string">"ens33"</span><span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span><span class="token string">"yes"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>固定ip可以替换为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-ens33<span class="token assign-left variable">DEVICE</span><span class="token operator">=</span>ens33<span class="token assign-left variable">TYPE</span><span class="token operator">=</span>Ethernet<span class="token assign-left variable">CONTROLLED</span><span class="token operator">=</span>yes<span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span class="token assign-left variable">BOOTPROTO</span><span class="token operator">=</span>static<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.248.132<span class="token assign-left variable">NETMASK</span><span class="token operator">=</span><span class="token number">255.255</span>.255.0<span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.248.2<span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">192.168</span>.248.2<span class="token assign-left variable">DNS2</span><span class="token operator">=</span><span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>service network restart</code> 进行重启网卡</p><p>当在虚拟机上访问不了外部网，但是能访问外部的网路的时候可能是dns的服务器出现了问题，需要查看相应的设置</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>stl容器用法</title>
      <link href="/2021/10/09/cs/stl-rong-qi-yong-fa/"/>
      <url>/2021/10/09/cs/stl-rong-qi-yong-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; map::begin&#x2F;end#include &lt;iostream&gt;#include &lt;map&gt;int main ()&#123;  std::map&lt;char,int&gt; mymap;  mymap[&#39;b&#39;] &#x3D; 100;  mymap[&#39;a&#39;] &#x3D; 200;  mymap[&#39;c&#39;] &#x3D; 300;  &#x2F;&#x2F; show content:  for (std::map&lt;char,int&gt;::iterator it&#x3D;mymap.begin(); it!&#x3D;mymap.end(); ++it)    std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &#x3D;&gt; &quot; &lt;&lt; it-&gt;second &lt;&lt; &#39;\n&#39;;  return 0;&#125;&#x2F;&#x2F; Output:&#x2F;&#x2F;a &#x3D;&gt; 200&#x2F;&#x2F;b &#x3D;&gt; 100&#x2F;&#x2F;c &#x3D;&gt; 300mymap.empty()mymap.begin()mymap.size()&#x2F;&#x2F; ----------- std::map&lt;std::string,int&gt; mymap &#x3D; &#123;               &#123; &quot;alpha&quot;, 0 &#125;,               &#123; &quot;beta&quot;, 0 &#125;,               &#123; &quot;gamma&quot;, 0 &#125; &#125;; mymap.at(&quot;alpha&quot;) &#x3D; 10; mymap[&quot;beta&quot;] &#x3D; 20; mymap.at(&quot;gamma&quot;) &#x3D; 30;&#x2F;&#x2F;————————————————<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h5><p>方法一：直接插入键值对mymap.insert ( std::pair&lt;char,int&gt;(‘a’,100) );<br>方法二：通过迭代器指定位置并插入std::map&lt;char,int&gt;::iterator it &#x3D; mymap.begin(); mymap.insert (it, std::pair&lt;char,int&gt;(‘b’,300)); &#x2F;&#x2F; max efficiency inserting<br>方法三：通过迭代器范围插入，区间半包含（[ , )）</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; map::insert (C++98)#include &lt;iostream&gt;#include &lt;map&gt;int main ()&#123; std::map&lt;char,int&gt; mymap; &#x2F;&#x2F; first insert function version (single parameter): mymap.insert ( std::pair&lt;char,int&gt;(&#39;a&#39;,100) ); mymap.insert ( std::pair&lt;char,int&gt;(&#39;z&#39;,200) ); std::pair&lt;std::map&lt;char,int&gt;::iterator,bool&gt; ret; ret &#x3D; mymap.insert ( std::pair&lt;char,int&gt;(&#39;z&#39;,500) ); &#x2F;&#x2F; 返回的是一个位置和插入是否成功 if (ret.second&#x3D;&#x3D;false) &#123;   std::cout &lt;&lt; &quot;element &#39;z&#39; already existed&quot;;   std::cout &lt;&lt; &quot; with a value of &quot; &lt;&lt; ret.first-&gt;second &lt;&lt; &#39;\n&#39;; &#125; &#x2F;&#x2F; second insert function version (with hint position): std::map&lt;char,int&gt;::iterator it &#x3D; mymap.begin(); mymap.insert (it, std::pair&lt;char,int&gt;(&#39;b&#39;,300));  &#x2F;&#x2F; max efficiency inserting mymap.insert (it, std::pair&lt;char,int&gt;(&#39;c&#39;,400));  &#x2F;&#x2F; no max efficiency inserting &#x2F;&#x2F; third insert function version (range insertion): std::map&lt;char,int&gt; anothermap; anothermap.insert(mymap.begin(),mymap.find(&#39;c&#39;)); &#x2F;&#x2F; showing contents: std::cout &lt;&lt; &quot;mymap contains:\n&quot;; for (it&#x3D;mymap.begin(); it!&#x3D;mymap.end(); ++it)   std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &#x3D;&gt; &quot; &lt;&lt; it-&gt;second &lt;&lt; &#39;\n&#39;; std::cout &lt;&lt; &quot;anothermap contains:\n&quot;; for (it&#x3D;anothermap.begin(); it!&#x3D;anothermap.end(); ++it)   std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &#x3D;&gt; &quot; &lt;&lt; it-&gt;second &lt;&lt; &#39;\n&#39;; return 0;&#125;&#x2F;&#x2F;Output:&#x2F;&#x2F;element &#39;z&#39; already existed with a value of 200&#x2F;&#x2F;mymap contains:&#x2F;&#x2F;a &#x3D;&gt; 100&#x2F;&#x2F;b &#x3D;&gt; 300&#x2F;&#x2F;c &#x3D;&gt; 400&#x2F;&#x2F;z &#x3D;&gt; 200&#x2F;&#x2F;anothermap contains:&#x2F;&#x2F;a &#x3D;&gt; 100&#x2F;&#x2F;b &#x3D;&gt; 300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; erasing from map#include &lt;iostream&gt;#include &lt;map&gt;int main ()&#123; std::map&lt;char,int&gt; mymap; std::map&lt;char,int&gt;::iterator it; &#x2F;&#x2F; insert some values: mymap[&#39;a&#39;]&#x3D;10; mymap[&#39;b&#39;]&#x3D;20; mymap[&#39;c&#39;]&#x3D;30; mymap[&#39;d&#39;]&#x3D;40; mymap[&#39;e&#39;]&#x3D;50; mymap[&#39;f&#39;]&#x3D;60; it&#x3D;mymap.find(&#39;b&#39;); mymap.erase (it);                   &#x2F;&#x2F; erasing by iterator mymap.erase (&#39;c&#39;);                  &#x2F;&#x2F; erasing by key it&#x3D;mymap.find (&#39;e&#39;); mymap.erase ( it, mymap.end() );    &#x2F;&#x2F; erasing by range &#x2F;&#x2F; show content: for (it&#x3D;mymap.begin(); it!&#x3D;mymap.end(); ++it)   std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &#x3D;&gt; &quot; &lt;&lt; it-&gt;second &lt;&lt; &#39;\n&#39;; return 0;&#125;&#x2F;&#x2F;Output:&#x2F;&#x2F;a &#x3D;&gt; 10&#x2F;&#x2F;d &#x3D;&gt; 40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="swap-交换"><a href="#swap-交换" class="headerlink" title="swap 交换"></a>swap 交换</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">std::map&lt;char,int&gt; foo,bar; foo[&#39;x&#39;]&#x3D;100; foo[&#39;y&#39;]&#x3D;200; bar[&#39;a&#39;]&#x3D;11; bar[&#39;b&#39;]&#x3D;22; bar[&#39;c&#39;]&#x3D;33; foo.swap(bar);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="clear清除"><a href="#clear清除" class="headerlink" title="clear清除"></a>clear清除</h5><h5 id="mymap-count-c-对某个元素进行计数"><a href="#mymap-count-c-对某个元素进行计数" class="headerlink" title="mymap.count(c) 对某个元素进行计数"></a>mymap.count(c) 对某个元素进行计数</h5><h5 id="find-获得指向元素的迭代器"><a href="#find-获得指向元素的迭代器" class="headerlink" title="find 获得指向元素的迭代器"></a>find 获得指向元素的迭代器</h5><h5 id="lower-bound-返回下边界的迭代器-upper-bound-返回上边界"><a href="#lower-bound-返回下边界的迭代器-upper-bound-返回上边界" class="headerlink" title="lower_bound 返回下边界的迭代器 upper_bound 返回上边界"></a>lower_bound 返回下边界的迭代器 upper_bound 返回上边界</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; map::lower_bound&#x2F;upper_bound#include &lt;iostream&gt;#include &lt;map&gt;int main ()&#123; std::map&lt;char,int&gt; mymap; std::map&lt;char,int&gt;::iterator itlow,itup; mymap[&#39;a&#39;]&#x3D;20; mymap[&#39;b&#39;]&#x3D;40; mymap[&#39;c&#39;]&#x3D;60; mymap[&#39;d&#39;]&#x3D;80; mymap[&#39;e&#39;]&#x3D;100; itlow&#x3D;mymap.lower_bound (&#39;b&#39;);  &#x2F;&#x2F; itlow points to b itup&#x3D;mymap.upper_bound (&#39;d&#39;);   &#x2F;&#x2F; itup points to e (not d!) mymap.erase(itlow,itup);        &#x2F;&#x2F; erases [itlow,itup) &#x2F;&#x2F; print content: for (std::map&lt;char,int&gt;::iterator it&#x3D;mymap.begin(); it!&#x3D;mymap.end(); ++it)   std::cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &#x3D;&gt; &quot; &lt;&lt; it-&gt;second &lt;&lt; &#39;\n&#39;; return 0;&#125;&#x2F;&#x2F;Output:&#x2F;&#x2F;a &#x3D;&gt; 20&#x2F;&#x2F;e &#x3D;&gt; 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unorder-set"><a href="#unorder-set" class="headerlink" title="unorder_set"></a>unorder_set</h3><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">typedef std::unordered_map&lt;std::string, std::string&gt; stringmap;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h5><p>返回元素所在的桶号</p><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>确定哈希表中是否包含了该元素</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;unordered_map&gt;&#x2F;&#x2F; reference: http:&#x2F;&#x2F;www.cplusplus.com&#x2F;reference&#x2F;unordered_map&#x2F;unordered_map&#x2F;at&#x2F;typedef std::unordered_map&lt;std::string, std::string&gt; stringmap;&#x2F;&#x2F; 将 a, b 融合为一个 unordered_mapstringmap merge(stringmap a, stringmap b) &#123;&#x2F;&#x2F; unordered_map 复制构造函数stringmap temp(a);&#x2F;&#x2F; 范围插入，将 b 全部插入进 a 中temp.insert(b.begin(), b.end());return temp;&#125;int main()&#123;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   1. unordered_map 元素计算与基础遍历&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 定义第一个 unordered_mapstd::unordered_map&lt;std::string, int&gt; mymap &#x3D; &#123; &#123; &quot;Mars&quot;, 3000 &#125;, &#123; &quot;Saturn&quot;, 60000 &#125;, &#123; &quot;Jupiter&quot;, 70000 &#125; &#125;;&#x2F;&#x2F; 对元素进行计算mymap.at(&quot;Mars&quot;) &#x3D; 3396;mymap.at(&quot;Saturn&quot;) +&#x3D; 272;mymap.at(&quot;Jupiter&quot;) &#x3D; mymap.at(&quot;Saturn&quot;) + 9638;&#x2F;&#x2F; auto：自动判断类型&#x2F;&#x2F; 基于范围的 for 循环，遍历 mymapfor (auto&amp; x : mymap) &#123;std::cout &lt;&lt; x.first &lt;&lt; &quot;: &quot; &lt;&lt; x.second &lt;&lt; std::endl;&#125;std::cout &lt;&lt; &quot;mymap.size() is &quot; &lt;&lt; mymap.size() &lt;&lt; std::endl ;std::cout &lt;&lt; &quot;mymap.bucket_count() is &quot; &lt;&lt; mymap.bucket_count() &lt;&lt; std::endl &lt;&lt; std::endl;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   2. iterator, 迭代器遍历&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 定义第二个 unordered_mapstd::unordered_map&lt;std::string, std::string&gt; mymap2 &#x3D; &#123; &#123; &quot;Australia&quot;, &quot;Canberra&quot; &#125;, &#123; &quot;U.S.&quot;, &quot;Washington&quot; &#125;, &#123; &quot;France&quot;, &quot;Paris&quot; &#125; &#125;;std::cout &lt;&lt; &quot;mymap2 contains:&quot; &lt;&lt; std::endl;&#x2F;&#x2F; 遍历 mymap2for (auto it &#x3D; mymap2.begin(); it !&#x3D; mymap2.end(); ++it)std::cout &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;first &lt;&lt; &quot;:&quot; &lt;&lt; it-&gt;second &lt;&lt; std::endl;std::cout &lt;&lt; std::endl;&#x2F;&#x2F; mymap2 分配的各桶中的元素std::cout &lt;&lt; &quot;mymap2&#39;s buckets contain:\n&quot;;for (unsigned i &#x3D; 0; i &lt; mymap2.bucket_count(); ++i) &#123;std::cout &lt;&lt; &quot;bucket #&quot; &lt;&lt; i &lt;&lt; &quot; contains:&quot;;for (auto local_it &#x3D; mymap2.begin(i); local_it !&#x3D; mymap2.end(i); ++local_it)std::cout &lt;&lt; &quot; &quot; &lt;&lt; local_it-&gt;first &lt;&lt; &quot;:&quot; &lt;&lt; local_it-&gt;second;std::cout &lt;&lt; std::endl;&#125;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   3. bucker, 桶操作&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 定义第三个 unordered_mapstd::unordered_map&lt;std::string, std::string&gt; mymap3 &#x3D; &#123;&#123; &quot;us&quot;, &quot;United States&quot; &#125;,&#123; &quot;uk&quot;, &quot;United Kingdom&quot; &#125;,&#123; &quot;fr&quot;, &quot;France&quot; &#125;,&#123; &quot;de&quot;, &quot;Germany&quot; &#125;&#125;;&#x2F;&#x2F; 遍历 mymap3for (auto&amp; x : mymap3) &#123;std::cout &lt;&lt; &quot;Element [&quot; &lt;&lt; x.first &lt;&lt; &quot;:&quot; &lt;&lt; x.second &lt;&lt; &quot;]&quot;;&#x2F;&#x2F; 返回元素所在桶号std::cout &lt;&lt; &quot; is in bucket #&quot; &lt;&lt; mymap3.bucket(x.first) &lt;&lt; std::endl;&#125;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   4. count ，判断元素是否在容器中&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 定义第四个 unordered_mapstd::unordered_map&lt;std::string, double&gt; mymap4 &#x3D; &#123;&#123; &quot;Burger&quot;, 2.99 &#125;,&#123; &quot;Fries&quot;, 1.99 &#125;,&#123; &quot;Soda&quot;, 1.50 &#125; &#125;;&#x2F;&#x2F; 遍历 mymap4for (auto&amp; x : &#123; &quot;Burger&quot;, &quot;Pizza&quot;, &quot;Salad&quot;, &quot;Soda&quot; &#125;)&#123;&#x2F;&#x2F; 判断 x 是否在容器中if (mymap4.count(x) &gt; 0)std::cout &lt;&lt; &quot;mymap4 has &quot; &lt;&lt; x &lt;&lt; std::endl;elsestd::cout &lt;&lt; &quot;mymap4 has no &quot; &lt;&lt; x &lt;&lt; std::endl;&#125;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   5. erase ，删除操作&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 定义第五个 unordered_mapstd::unordered_map&lt;std::string, std::string&gt; mymap5;mymap5[&quot;U.S.&quot;] &#x3D; &quot;Washington&quot;;mymap5[&quot;U.K.&quot;] &#x3D; &quot;London&quot;;mymap5[&quot;France&quot;] &#x3D; &quot;Paris&quot;;mymap5[&quot;Russia&quot;] &#x3D; &quot;Moscow&quot;;mymap5[&quot;China&quot;] &#x3D; &quot;Beijing&quot;;mymap5[&quot;Germany&quot;] &#x3D; &quot;Berlin&quot;;mymap5[&quot;Japan&quot;] &#x3D; &quot;Tokyo&quot;;&#x2F;&#x2F; 通过迭代器删除mymap5.erase(mymap5.begin());&#x2F;&#x2F; 通过 Key 值删除mymap5.erase(&quot;France&quot;);&#x2F;&#x2F; 通过迭代器范围删除mymap5.erase(mymap5.find(&quot;China&quot;), mymap5.end());&#x2F;&#x2F; 基于范围的 for 循环，遍历展示删除后的 mymapfor (auto&amp; x : mymap5)std::cout &lt;&lt; x.first &lt;&lt; &quot;: &quot; &lt;&lt; x.second &lt;&lt; std::endl;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   6. find ，搜索操作&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 定义第六个 unordered_mapstd::unordered_map&lt;std::string, double&gt; mymap6 &#x3D; &#123;&#123; &quot;mom&quot;, 5.4 &#125;,&#123; &quot;dad&quot;, 6.1 &#125;,&#123; &quot;bro&quot;, 5.9 &#125; &#125;;std::string input;std::cout &lt;&lt; &quot;who? &quot;;&#x2F;&#x2F; 输入 mom, dad, bro 中的一个，否则搜索失败返回 Not Foundgetline(std::cin, input);&#x2F;&#x2F; 根据输入参数 Key 值进行搜索，返回一个迭代器std::unordered_map&lt;std::string, double&gt;::const_iterator got &#x3D; mymap6.find(input);&#x2F;&#x2F; find 返回值若为 unordered_map 的尾部，则没有在容器中找到if (got &#x3D;&#x3D; mymap6.end())std::cout &lt;&lt; &quot;not found&quot;;elsestd::cout &lt;&lt; got-&gt;first &lt;&lt; &quot; is &quot; &lt;&lt; got-&gt;second;std::cout &lt;&lt; std::endl;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   6. insert ，插入操作&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 定义第七、八个 unordered_mapstd::unordered_map&lt;std::string, double&gt;myrecipe,mypantry &#x3D; &#123; &#123; &quot;milk&quot;, 2.0 &#125;, &#123; &quot;flour&quot;, 1.5 &#125; &#125;;&#x2F;&#x2F; 定义插入元素，类型为 pair 的对象std::pair&lt;std::string, double&gt; myshopping(&quot;baking powder&quot;, 0.3);&#x2F;&#x2F; 复制插入myrecipe.insert(myshopping);&#x2F;&#x2F; 移动插入myrecipe.insert(std::make_pair&lt;std::string, double&gt;(&quot;eggs&quot;, 6.0));&#x2F;&#x2F; 范围插入myrecipe.insert(mypantry.begin(), mypantry.end());  &#x2F;&#x2F; range insertion&#x2F;&#x2F; 初始化列表插入myrecipe.insert(&#123; &#123; &quot;sugar&quot;, 0.8 &#125;, &#123; &quot;salt&quot;, 0.1 &#125; &#125;);    &#x2F;&#x2F; initializer list insertionstd::cout &lt;&lt; &quot;myrecipe contains:&quot; &lt;&lt; std::endl;for (auto&amp; x : myrecipe)std::cout &lt;&lt; x.first &lt;&lt; &quot;: &quot; &lt;&lt; x.second &lt;&lt; std::endl;std::cout &lt;&lt; std::endl;&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F;   7. 等于运算符 &#x3D; 操作&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 初始化列表stringmap first &#x3D; &#123; &#123; &quot;AAPL&quot;, &quot;Apple&quot; &#125;, &#123; &quot;MSFT&quot;, &quot;Microsoft&quot; &#125; &#125;;stringmap second &#x3D; &#123; &#123; &quot;GOOG&quot;, &quot;Google&quot; &#125;, &#123; &quot;ORCL&quot;, &quot;Oracle&quot; &#125; &#125;;&#x2F;&#x2F; 移动stringmap third &#x3D; merge(first, second);&#x2F;&#x2F; 复制first &#x3D; third;std::cout &lt;&lt; &quot;first contains:&quot;;for (auto&amp; elem : first) std::cout &lt;&lt; &quot; &quot; &lt;&lt; elem.first &lt;&lt; &quot;:&quot; &lt;&lt; elem.second;std::cout &lt;&lt; std::endl;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些算法题</title>
      <link href="/2021/10/09/codingalgorithm/question-list1/"/>
      <url>/2021/10/09/codingalgorithm/question-list1/</url>
      
        <content type="html"><![CDATA[<h4 id="Two-Sum"><a href="#Two-Sum" class="headerlink" title="Two Sum"></a>Two Sum</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++"> vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        map&lt;int,int&gt; value_key;        for(int i&#x3D;0;i&lt;nums.size();i++)&#123;            map&lt;int, int&gt;::iterator iter;            iter &#x3D; value_key.find(nums[i]);            if(iter &#x3D;&#x3D; value_key.end())                value_key.insert(pair&lt;int, int&gt;(target-nums[i], i));            else                return vector&lt;int&gt;&#123;iter-&gt;second, i&#125;;        &#125;         return vector&lt;int&gt;&#123;0, 0&#125;;    &#125;&#x2F;&#x2F; 遇到的bug，就算是这个函数已经能返回所有的值了，也必须在条件外再加一个返回，另外找到一个用的内存比我少的vector 能直接返回&#123;&#125;vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123;        unordered_map&lt;int, int&gt; indices;        for (int i &#x3D; 0; i &lt; nums.size(); i++) &#123;            if (indices.find(target - nums[i]) !&#x3D; indices.end()) &#123;                return &#123;indices[target - nums[i]], i&#125;;            &#125;            indices[nums[i]] &#x3D; i;        &#125;        return &#123;&#125;;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此题主要是利用空间换取时间，利用哈希表来达到一个快速查询的目的</strong></p><h3 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. <a href="https://leetcode.com/problems/add-two-numbers/">Add Two Numbers</a></h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; 主要的思想就还是同时遍历两个表，同时还要注意进位问题ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;        ListNode * p1&#x3D;l1, *p2&#x3D; l2, * p&#x3D;NULL, * p_temp&#x3D;NULL;        int weishu &#x3D; 0;        int up &#x3D; 0, sum&#x3D;0;&#x2F;&#x2F;        print(p1);&#x2F;&#x2F;        print(p2);&#x2F;&#x2F;        vector&lt;int&gt; values;        while (p1&amp;&amp;p2)&#123;            sum &#x3D; p1-&gt;val + p2-&gt;val+ up;            if (!p_temp)                p_temp &#x3D; new ListNode(sum%10);            else&#123;                p_temp-&gt;next &#x3D; new ListNode(sum % 10);                p_temp &#x3D; p_temp-&gt;next;            &#125;            if(!p)                p &#x3D; p_temp;            up &#x3D; sum &#x2F; 10;&#x2F;&#x2F;            cout&lt;&lt;&quot;------------&quot;&lt;&lt;endl;&#x2F;&#x2F;            print(p);            p1 &#x3D; p1-&gt;next;            p2 &#x3D; p2-&gt;next;        &#125;        while (p1)&#123;            sum &#x3D; p1-&gt;val + up;            p_temp-&gt;next &#x3D; new ListNode(sum % 10);            p_temp &#x3D; p_temp-&gt;next;            up &#x3D; sum &#x2F; 10;            p1 &#x3D; p1-&gt;next;        &#125;        while (p2)&#123;            sum &#x3D; p2-&gt;val + up;            p_temp-&gt;next &#x3D; new ListNode(sum % 10);            p_temp &#x3D; p_temp-&gt;next;            up &#x3D; sum &#x2F; 10;            p2 &#x3D; p2-&gt;next;        &#125;        if(up)&#123;            p_temp-&gt;next &#x3D; new ListNode(up);            p_temp &#x3D; p_temp-&gt;next;        &#125;        return p;    &#125;# 这个版本所耗费了55msListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123;        queue&lt;int&gt; l1V, l2V;        ListNode* result;        ListNode* iter;        while (l1) &#123;                l1V.emplace(l1-&gt;val);                l1 &#x3D; l1-&gt;next;        &#125;        while (l2) &#123;                l2V.emplace(l2-&gt;val);                l2 &#x3D; l2-&gt;next;        &#125;        int carry &#x3D; 0;        while (!l1V.empty() || !l2V.empty()) &#123;                int l1val &#x3D; l1V.empty() ? 0 : l1V.front();                if (!l1V.empty()) l1V.pop();                int l2val &#x3D; l2V.empty() ? 0 : l2V.front();                if (!l2V.empty()) l2V.pop();                int val &#x3D; l1val + l2val + carry;                ListNode* node &#x3D; new ListNode(val % 10);                carry &#x3D; val &#x2F; 10;                if (!iter) &#123;                        result &#x3D; node;                        iter &#x3D; result;                &#125; else &#123;                        iter-&gt;next &#x3D; node;                        iter &#x3D; iter-&gt;next;                &#125;        &#125;        if (carry &gt; 0) iter-&gt;next &#x3D; new ListNode(carry);        return result;    &#125;# 网上抄的最快的版本，发现就是只有一个外层训练，并且同时减少了判断的次数，节省了时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="longest-substring"><a href="#longest-substring" class="headerlink" title="longest substring"></a>longest substring</h3><p>思想来去还是python香，所以干脆用python写算法题</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>          char_index <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>          left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>          max_len <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> index<span class="token punctuation">,</span> each_char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> each_char <span class="token keyword">not</span> <span class="token keyword">in</span> char_index<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">or</span> char_index<span class="token punctuation">[</span>each_char<span class="token punctuation">]</span> <span class="token operator">&lt;</span> left<span class="token punctuation">:</span>                  char_index<span class="token punctuation">[</span>each_char<span class="token punctuation">]</span> <span class="token operator">=</span> index              <span class="token keyword">else</span><span class="token punctuation">:</span>                  left <span class="token operator">=</span> char_index<span class="token punctuation">[</span>each_char<span class="token punctuation">]</span>                  char_index<span class="token punctuation">[</span>each_char<span class="token punctuation">]</span> <span class="token operator">=</span> index              max_len <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_len<span class="token punctuation">,</span> index <span class="token operator">-</span> left<span class="token punctuation">)</span>          <span class="token keyword">return</span> max_len<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Runtime: 61 ms, faster than 95.70% of Python3 online submissions for Longest Substring Without Repeating Characters.Memory Usage: 14 MB, less than 49.61% of Python3 online submissions for Longest Substring Without Repeating Characters.</code></p><h5 id="官网最优代码分析"><a href="#官网最优代码分析" class="headerlink" title="官网最优代码分析"></a>官网最优代码分析</h5><ul><li>将我的判断语句综合为了一个比较语句，我的代码会比官网的快，虽然官网的要更简洁一些<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>          char_index <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>          left <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>          max_len <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> index<span class="token punctuation">,</span> each_char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> each_char <span class="token keyword">in</span> char_index<span class="token punctuation">:</span>                  left <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>char_index<span class="token punctuation">[</span>each_char<span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span>              max_len <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_len<span class="token punctuation">,</span> index <span class="token operator">-</span> left<span class="token punctuation">)</span>              char_index<span class="token punctuation">[</span>each_char<span class="token punctuation">]</span> <span class="token operator">=</span> index          <span class="token keyword">return</span> max_len<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>再次优化，因为目标的哈希表很小，assic码只有128位，拓展的只有256位，所以完全可以用一个数组替换哈希表减少查询时间</li></ul><h5 id="别人代码"><a href="#别人代码" class="headerlink" title="别人代码"></a>别人代码</h5><ul><li>投机取巧解法，将字符串中目标字符串分离，拼接，直接以字符串的手段运行，</li></ul><h3 id="Median-of-Two-Sorted-Arrays"><a href="#Median-of-Two-Sorted-Arrays" class="headerlink" title="Median of Two Sorted Arrays"></a>Median of Two Sorted Arrays</h3><h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h5><ul><li>首先需要通过找到这两个数组内部的关系，什么关系呢，就是两个数组如果合在一起的中间的划分点对应 两个数组的划分点是有联系的，比如说呢，一个数据大小为m，另一个为n，假设划分点索引为k1和k2，所以k1+k2&#x3D;(m+n)&#x2F;2</li><li>下面的代码之所以要乘以2是因为我觉得乘以2之后所有的计算会变的简单甚多，而不用费劲心思去考虑什么怎么除以2的问题</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span>          size1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>          size2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>          <span class="token keyword">if</span> size2 <span class="token operator">&lt;</span> size1<span class="token punctuation">:</span>              <span class="token keyword">return</span> self<span class="token punctuation">.</span>findMedianSortedArrays<span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">)</span>            low1<span class="token punctuation">,</span> high1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> size1          <span class="token keyword">while</span> low1 <span class="token operator">&lt;=</span> high1<span class="token punctuation">:</span>              mid1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low1 <span class="token operator">+</span> high1<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>              mid2 <span class="token operator">=</span> size1 <span class="token operator">+</span> size2 <span class="token operator">-</span> mid1              l1 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mid1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> nums1<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>              l2 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mid2 <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> nums2<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mid2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>              r1 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mid1 <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> size1 <span class="token keyword">else</span> nums1<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>mid1 <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>              r2 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> mid2 <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">*</span> size2 <span class="token keyword">else</span> nums2<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>mid2 <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>              <span class="token keyword">if</span> l1 <span class="token operator">></span> r2<span class="token punctuation">:</span>                  high1 <span class="token operator">=</span> mid1 <span class="token operator">-</span> <span class="token number">1</span>              <span class="token keyword">elif</span> l2 <span class="token operator">></span> r1<span class="token punctuation">:</span>                  low1 <span class="token operator">=</span> mid1 <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">min</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>          <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="其他暴力解法"><a href="#其他暴力解法" class="headerlink" title="其他暴力解法"></a>其他暴力解法</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span>        nums3 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums1<span class="token operator">+</span>nums2<span class="token punctuation">)</span>        len1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums3<span class="token punctuation">)</span>        mid <span class="token operator">=</span> len1<span class="token operator">//</span><span class="token number">2</span>        <span class="token keyword">if</span> len1<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>nums3<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums3<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums3<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二分查找k个最优的值"><a href="#二分查找k个最优的值" class="headerlink" title="二分查找k个最优的值"></a>二分查找k个最优的值</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>    <span class="token keyword">if</span> l <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>kth<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> l <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>kth<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> l <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>kth<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> l <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.</span>       <span class="token keyword">def</span> <span class="token function">kth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> a<span class="token punctuation">:</span>        <span class="token keyword">return</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> b<span class="token punctuation">:</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    ia<span class="token punctuation">,</span> ib <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    ma<span class="token punctuation">,</span> mb <span class="token operator">=</span> a<span class="token punctuation">[</span>ia<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>ib<span class="token punctuation">]</span>        <span class="token comment"># when k is bigger than the sum of a and b's median indices </span>    <span class="token keyword">if</span> ia <span class="token operator">+</span> ib <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>  <span class="token comment"># 查找第k个最小值，因为是查找最小值，所以当抛弃掉最大的一半的时候，其实是没啥影响的，所以这个判断语句的else部分并没有做k的变化</span>        <span class="token comment"># if a's median is bigger than b's, b's first half doesn't include k</span>        <span class="token keyword">if</span> ma <span class="token operator">></span> mb<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>kth<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">[</span>ib <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">-</span> ib <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>kth<span class="token punctuation">(</span>a<span class="token punctuation">[</span>ia <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> k <span class="token operator">-</span> ia <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># when k is smaller than the sum of a and b's indices</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># if a's median is bigger than b's, a's second half doesn't include k</span>        <span class="token keyword">if</span> ma <span class="token operator">></span> mb<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>kth<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span>ia<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>kth<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span>ib<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 程序算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习小记</title>
      <link href="/2021/10/02/competition/ji-qi-xue-xi-xiao-ji/"/>
      <url>/2021/10/02/competition/ji-qi-xue-xi-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="内存压缩代码"><a href="#内存压缩代码" class="headerlink" title="内存压缩代码"></a>内存压缩代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reduce_mem</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    start_mem <span class="token operator">=</span> df<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">**</span> <span class="token number">2</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        col_type <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>dtypes        <span class="token keyword">if</span> col_type <span class="token operator">!=</span> <span class="token builtin">object</span><span class="token punctuation">:</span>            c_min <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            c_max <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>col_type<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'int'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    end_mem <span class="token operator">=</span> df<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">**</span> <span class="token number">2</span>    <span class="token keyword">if</span> show<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>start_mem <span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> Mb, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>end_mem <span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> Mb (</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>start_mem <span class="token operator">-</span> end_mem<span class="token punctuation">)</span> <span class="token operator">/</span> start_mem <span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string"> %)'</span></span><span class="token punctuation">)</span>    gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="释放显存-清理所有使用显卡的进程！！！慎用"><a href="#释放显存-清理所有使用显卡的进程！！！慎用" class="headerlink" title="释放显存(清理所有使用显卡的进程！！！慎用)"></a><strong>释放显存(清理所有使用显卡的进程！！！慎用)</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fuser</span> <span class="token parameter variable">-v</span> /dev/nvidia* <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;for(i=1;i&lt;=NF;i++)print "kill -9 " $i;&#125;'</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mmdetection训练-amp-预测"><a href="#mmdetection训练-amp-预测" class="headerlink" title="mmdetection训练&amp;预测"></a><strong>mmdetection训练</strong>&amp;预测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CUDA_VISIBLE_DEVICE</span><span class="token operator">=</span><span class="token number">0,1</span> <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">29502</span> ./tools/dist_train.sh configs/cascade_rcnn_r101_fpn_1x_coco.py <span class="token number">2</span><span class="token assign-left variable">CUDA_VISIBLE_DEVICE</span><span class="token operator">=</span><span class="token number">0</span> python tools/train.py configs/cascade_rcnn_r50_fpn_1x_coco.pypython tools/test.py configs/cascade_rcnn_r101_fpn_1x_coco.py work_dir/epoch_12.pth --format-only <span class="token parameter variable">--options</span> <span class="token string">"jsonfile_prefix=./data/infer_data/epoch_12_2048_00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置GPU"><a href="#设置GPU" class="headerlink" title="设置GPU"></a><strong>设置GPU</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"CUDA_VISIBLE_DEVICES"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略警告"><a href="#忽略警告" class="headerlink" title="忽略警告"></a>忽略警告</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">"ignore"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="pandas行列数量控制"><a href="#pandas行列数量控制" class="headerlink" title="pandas行列数量控制"></a>pandas行列数量控制</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Target-Encoder"><a href="#Target-Encoder" class="headerlink" title="Target Encoder"></a>Target Encoder</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kfold_mean</span><span class="token punctuation">(</span>df_train<span class="token punctuation">,</span> df_test<span class="token punctuation">,</span> target<span class="token punctuation">,</span> target_mean_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    folds <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    mean_of_target <span class="token operator">=</span> df_train<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> fold_<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>            <span class="token builtin">enumerate</span><span class="token punctuation">(</span>folds<span class="token punctuation">.</span>split<span class="token punctuation">(</span>df_train<span class="token punctuation">,</span> y<span class="token operator">=</span>df_train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tr_x <span class="token operator">=</span> df_train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        vl_x <span class="token operator">=</span> df_train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> target_mean_list<span class="token punctuation">:</span>            df_train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>vl_x<span class="token punctuation">.</span>index<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc'</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> vl_x<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>                tr_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> target_mean_list<span class="token punctuation">:</span>        df_train<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc'</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>mean_of_target<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        df_test<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc'</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> df_test<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>            df_train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc'</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        df_test<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc'</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>mean_of_target<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df_train<span class="token punctuation">,</span> df_test<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token keyword">def</span> <span class="token function">target_enc</span><span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> test_df<span class="token punctuation">,</span> enc_list<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>enc_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        train_df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        test_df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>skf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> train_df<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            trn_x <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> target<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            val_x <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            enc_df <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>f<span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">:</span> <span class="token string">'mean'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            val_x <span class="token operator">=</span> val_x<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>enc_df<span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>            test_x <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>merge<span class="token punctuation">(</span>enc_df<span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>            val_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            test_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values            test_df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> test_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_target_enc'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values <span class="token operator">/</span> skf<span class="token punctuation">.</span>n_splits    <span class="token keyword">return</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train_df<span class="token punctuation">,</span> test_df<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Bug-坑"><a href="#Bug-坑" class="headerlink" title="Bug 坑"></a>Bug 坑</h3><p>时间相关特征在进行embedding要小心，容易过拟合<br>内存压缩函数慎用，使用后求需要用除法的地方的结果可能会报错或者nan<br>float16类型进行运算会溢出</p><h3 id="数据挖掘比赛中常见的评价指标解读以及应对方法"><a href="#数据挖掘比赛中常见的评价指标解读以及应对方法" class="headerlink" title="数据挖掘比赛中常见的评价指标解读以及应对方法"></a>数据挖掘比赛中常见的评价指标解读以及应对方法</h3><p><a href="https://mp.weixin.qq.com/s/W7HtKwM3X8OE98VlycqTKQ">https://mp.weixin.qq.com/s/W7HtKwM3X8OE98VlycqTKQ</a></p><h3 id="检测训练集测试集数据分布是否一致"><a href="#检测训练集测试集数据分布是否一致" class="headerlink" title="检测训练集测试集数据分布是否一致"></a>检测训练集测试集数据分布是否一致</h3><p><a href="https://mp.weixin.qq.com/s/2UxAPn1_46Q1U0HTWXm2dg">https://mp.weixin.qq.com/s/2UxAPn1_46Q1U0HTWXm2dg</a></p><p>机器学习模型检测<br>    中心思想就是使用特征训练模型来分辨测试集与测试集，若模型效果好的话代表训练集和测试集存在较大差异，否则代表训练集和测试集分布比较相似。<br>    具体做法是构建一个二分类模型，对train-set打上0，测试集打上1，然后shuffle一下进行训练，若分类效果好，代表训练集和测试集区分度很高，那么分布差异就较大。<br>    我感觉它最大的价值是，针对不同的模型检测分布会得到不同的效果，在实践中由于选定了预测模型，它对于某个特定场景的适应效果应该比常规的检测方法好很多。<br>    由此延申出来，我们用训练好的二分类模型对训练集进行预测，然后输出预测概率，根据这个概率为训练集设置权重（概率越接近1代表训练集分布更接近测试集），这样就可以强行过拟合到测试集上！对于非线上测试型的数据挖掘比赛应该会有比较大的提升！</p><h3 id="比赛经验"><a href="#比赛经验" class="headerlink" title="比赛经验"></a>比赛经验</h3><p>数据集如果有多个表文件，尽量把一个表的信息挖掘干净再研究另一个表的信息<br>进行除法运算时分母可以加<strong>1e-7</strong>，避免分母出现0</p>]]></content>
      
      
      <categories>
          
          <category> 比赛相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021_9_22Ubuntu</title>
      <link href="/2021/09/22/cs/2021-9-22ubuntu/"/>
      <url>/2021/09/22/cs/2021-9-22ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="记一次组装机ubuntu安装的辛酸史"><a href="#记一次组装机ubuntu安装的辛酸史" class="headerlink" title="记一次组装机ubuntu安装的辛酸史"></a>记一次组装机ubuntu安装的辛酸史</h2><p>老板掏钱组装一台式机，预算5000</p><p>出发点，因跑深度学习需要工作站，由于本人想组装一个算力好一点的CPU，同时又要考虑预算，在综合考虑之下，选择了排行不错的i9-10900x 这个算上主板需要4k+ 严重超出预算，且不算内存，外存，电源机箱等（老板实际说的是5000左右，但是也不能太过分吧）所以只能退而求其次选择了i7-11700k+B560M-K ，算上2t机械，机箱，水冷，电源，32g内存，已经接近5K，没有显卡，因为有核显。将这套配置发给老板之后，老板招人配好，装好系统发过来。</p><p>当第一次拿到组装好的电脑，里面安装了ubuntu21， 但是感觉有点卡，所以又自己去买了一个1t的固态（因为已经超过老板预算了，当时就想着自己加吧），，同时由于想自己改一个名字，结果改了之后把自己的sudo权限改没了，遂重装，重装20，装了好几次，总是在最后一点卡住，报错pcie error，uid 0 ，acpi bios error什么什么的，网上搜索无果，然后又重装21，然后发现重装21后，CPU占用率及其高，已经占用了1.5 个核了，这可是大问题</p><p>用top仔细查看是哪些进程使用率及其的高，然后发现是irq&#x2F;123-aerdrv占用CPU约50% 以及systemd-journald占用一个核，</p><p>遂使用命令</p><blockquote><p>vim &#x2F;etc&#x2F;systemd&#x2F;journald.conf </p></blockquote><blockquote><p> 将torage改为none</p></blockquote><p>重启生效 </p><blockquote><p>systemctl restart systemd-journald</p></blockquote><p><img src="/BlogImgs/2021_9_22Ubuntu/image-20210922231319972.png" alt="image-20210922231319972"></p><p>systemctl mask systemd-journald</p><p><a href="https://www.cnblogs.com/cpw6/p/13209072.html">https://www.cnblogs.com/cpw6/p/13209072.html</a></p><p><a href="https://bbs.chinauos.com/post/6760">https://bbs.chinauos.com/post/6760</a></p><p><a href="https://blog.csdn.net/weixin_41540362/article/details/105605236">https://blog.csdn.net/weixin_41540362/article/details/105605236</a></p><p><a href="https://blog.csdn.net/weixin_44131414/article/details/104037498?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1.no_search_link">https://blog.csdn.net/weixin_44131414/article/details/104037498?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link</a></p><p><a href="https://blog.csdn.net/qq_25518029/article/details/120010672">https://blog.csdn.net/qq_25518029/article/details/120010672</a></p><h2 id="记录安装中文输入法的bug"><a href="#记录安装中文输入法的bug" class="headerlink" title="记录安装中文输入法的bug"></a>记录安装中文输入法的bug</h2><p>当需要查找某些blog的时候，然后发现不能输入中文，</p><p>于是按照教程安装了fcitx，改变了键盘布局，重启之后发现输入密码之后，直接黑屏，只剩下一个鼠标，排查了一圈后（重新安装桌面等，都不能解决，很奇怪）怀疑到了这个头上</p><p><img src="/BlogImgs/2021_9_22Ubuntu/image-20210923113322836.png" alt="image-20210923113322836"></p><p>当杀死这个进程之后可以看见桌面了，但是还不能点击桌面图标</p><p>于是想卸载fcitx</p><p>sudo apt-get purge fcitx</p><p>删除fcitx相关配置，终端内输入“sudo apt-get autoremove”。重启又能恢复桌面了，21版本的安装搜狗输入法好像会出毛病，所以就将就使用英文的吧</p><h2 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h2><p>ln -s &#x2F;media&#x2F;kaka&#x2F;extroStore&#x2F;Dataset&#x2F; &#x2F;home&#x2F;kaka&#x2F;Dataset</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++使用-图像处理</title>
      <link href="/2021/07/31/dlandml/c-shi-yong-bang-gan-huo-mei-qian/"/>
      <url>/2021/07/31/dlandml/c-shi-yong-bang-gan-huo-mei-qian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="MCSR极值区域检测问题"><a href="#MCSR极值区域检测问题" class="headerlink" title="MCSR极值区域检测问题"></a>MCSR极值区域检测问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p>首先存在检测不完全的办法<br>解决办法：提高图片的对比度，增强亮度</p></li><li><p>还是存在检测不出的情况，大致可以以下两种情况：</p><ol><li>因图片干扰信息太多，比如太脏，表面编码部分被氧化等，没有检测到</li><li>亮度过大，转成灰度值的时候信息丢失</li></ol></li><li><p>从已知检测筛选出目标数字，可能存在以下异常情况</p><ol><li>所有数字均被检测到，但是有很多误导区域，首先从第一个点开始遍历，算出他与其他点之间的斜率，用斜率两两相减，讲斜率差小于0.3的三个点加入集合中，若集合元素个数大于5，再对，对集合中的所有区域按照x轴排序，再重复计算斜率的过程，若存在斜率差大于0.5的结果，舍弃这次结果，若都小于，初步选定目标区域，若元素个数小于5，舍弃，进入下一个循环</li><li>没有检测到所有的区域，按照1的方法筛选，后期不全</li></ol></li><li><p>针对少于的情况，讲最有可能的点筛选出来后，通过间隔筛重新画出目标区域</p></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &quot;core&#x2F;core.hpp&quot;  #include  &quot;opencv2&#x2F;text.hpp&quot;#include  &quot;opencv2&#x2F;highgui.hpp&quot;#include  &quot;opencv2&#x2F;imgproc.hpp&quot;#include &quot;opencv2&#x2F;features2d.hpp&quot;#include &quot;opencv2&#x2F;highgui&#x2F;highgui.hpp&quot;#include &quot;opencv2&#x2F;features2d.hpp&quot;#include &quot;opencv2&#x2F;imgproc&#x2F;imgproc.hpp&quot;#include &lt;opencv2&#x2F;opencv.hpp&gt;#include  &lt;vector&gt;#include  &lt;iostream&gt;#include  &lt;iomanip&gt;using namespace std;using namespace cv;using namespace cv::text;#include &lt;stdio.h&gt;#include &lt;io.h&gt;#include &lt;string&gt;#include &lt;opencv2\opencv.hpp&gt;#include &lt;iostream&gt;using namespace std;using namespace cv;string getfilename(string path) &#123;return path.substr(path.find_last_of(&quot;\\&quot;));&#125;float getDistance(Point pointO, Point pointA)&#123;float distance;distance &#x3D; powf((pointO.x - pointA.x), 2) + powf((pointO.y - pointA.y), 2);distance &#x3D; sqrtf(distance);return distance;&#125;float get_k(Point x, Point y) &#123;return (float)(x.y - y.y) &#x2F; (x.x - y.x);&#125;bool  compare1(cv::Rect a, Rect b) &#123;return a.tl().x &lt; b.tl().x;&#125;void buquan(vector&lt;Rect&gt; &amp;final1) &#123;vector&lt;float&gt; distance;float all_dis &#x3D; 0;int wid &#x3D; 0;int hei &#x3D; 0;int x &#x3D; 0;int y &#x3D; 0;for (int i &#x3D; 0; i &lt; final1.size(); i++) &#123;&#x2F;*if (wid &lt; final1[i].width) &#123;wid &#x3D; final1[i].width;&#125;if (hei &lt; final1[i].height) &#123;hei &#x3D; final1[i].height;&#125;*&#x2F;wid +&#x3D; final1[i].width;hei +&#x3D; final1[i].height;if (i) &#123;distance.push_back(getDistance(final1[i - 1].tl(), final1[i].tl()));all_dis +&#x3D; distance[i - 1];x +&#x3D; (final1[i - 1].tl().x - final1[i].tl().x);y +&#x3D; (final1[i - 1].tl().y - final1[i].tl().y);&#125;&#125;int ssss &#x3D; 0;vector&lt;int &gt; biaozhi(distance.size(), 0);int jiange &#x3D; 0, shu &#x3D; 0;for (int i &#x3D; 0; i &lt; distance.size(); i++) &#123;if (i) &#123;if (abs(distance[i - 1] - distance[i]) &lt; 40) &#123;jiange +&#x3D; abs(final1[i].tl().x - final1[i + 1].tl().x);jiange +&#x3D; abs(final1[i].tl().x - final1[i - 1].tl().x);shu +&#x3D; 2;&#125;&#125;&#125;wid &#x3D; (float)wid &#x2F; final1.size();hei &#x3D; (float)hei &#x2F; final1.size();cout &lt;&lt; &quot;间隔为：&quot; &lt;&lt; jiange &#x2F; (float)shu &lt;&lt; endl;jiange &#x3D; jiange &#x2F; (float)shu;jiange &#x3D; jiange &lt; wid ? jiange : wid;for (int i &#x3D; 0; i &lt; distance.size(); i++) &#123;if (i) &#123;if (abs(distance[i - 1] - distance[i]) &gt; 40) &#123;if (i &#x3D;&#x3D; 1 || i &#x3D;&#x3D; distance.size() - 1)ssss +&#x3D; 2;elsessss++;if (distance[i] &gt; distance[i - 1]) &#123;&#x2F;&#x2F;biaozhi[i] &#x3D; 1;int time &#x3D; abs(final1[i].tl().x - final1[i + 1].tl().x) &#x2F; jiange - 1;if (!biaozhi[i]) &#123;biaozhi[i] &#x3D; time;&#125;else &#123;int s &#x3D; biaozhi[i];biaozhi[i] &#x3D; s &gt; time ? s : time;&#125;ssss &#x3D; ssss + time - 1;&#125;else &#123;int time &#x3D; abs(final1[i].tl().x - final1[i - 1].tl().x) &#x2F; jiange - 1;if (!biaozhi[i - 1]) &#123;biaozhi[i - 1] &#x3D; time;&#125;else &#123;int s &#x3D; biaozhi[i - 1];biaozhi[i - 1] &#x3D; s &gt; time ? s : time;&#125;ssss &#x3D; ssss + time - 1;&#125;&#125;&#125;&#125;if (ssss % 2) &#123;cout &lt;&lt; &quot;有问题啊啊啊啊&quot; &lt;&lt; ssss &lt;&lt; endl;&#125;if (ssss &#x2F; 2 + final1.size() &lt; 10) &#123;x &#x3D; (float)x &#x2F; (final1.size() - 1 + ssss &#x2F; 2);y &#x3D; (float)y &#x2F; (final1.size() - 1 + ssss &#x2F; 2);int max &#x3D; final1.size();final1.push_back(Rect(final1[0].tl().x + x, final1[0].tl().y + y, wid, hei));final1.push_back(Rect(final1[max - 1].tl().x - x, final1[max - 1].tl().y - y, wid, hei));cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; &quot; &quot; &lt;&lt; wid &lt;&lt; &quot; &quot; &lt;&lt; hei &lt;&lt; &quot; &quot; &lt;&lt; endl;cout &lt;&lt; &quot;问题出在边缘上  &quot; &lt;&lt; final1.size() &lt;&lt; endl;ssss &#x3D; ssss &#x2F; 2;if (ssss) &#123;for (int i &#x3D; 0; i &lt; biaozhi.size(); i++) &#123;if (biaozhi[i]) &#123;for (int j &#x3D; 0; j &lt; biaozhi[i]; j++) &#123;final1.push_back(Rect(final1[i].tl().x - (j + 1)*x, final1[i].tl().y - (j + 1)*y, wid, hei));cout &lt;&lt; &quot;加入了 &quot; &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; final1.size() &lt;&lt; endl;&#125;&#125;&#125;&#125;return;&#125;else &#123;cout &lt;&lt; &quot;shi zheli de wenti 2.1&quot; &lt;&lt; endl;ssss &#x3D; ssss &#x2F; 2;x &#x3D; x &#x2F; 9;y &#x3D; y &#x2F; 9;for (int i &#x3D; 0; i &lt; biaozhi.size(); i++) &#123;if (biaozhi[i]) &#123;for (int j &#x3D; 0; j &lt; biaozhi[i]; j++) &#123;final1.push_back(Rect(final1[i].tl().x - (j + 1)*x, final1[i].tl().y - (j + 1)*y, wid, hei));cout &lt;&lt; &quot;加入了 &quot; &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; final1.size() &lt;&lt; endl;&#125;&#125;&#125;&#125;&#125;void draw_kuang(Mat img2) &#123;cv::Ptr&lt;cv::MSER&gt; mesr1 &#x3D; cv::MSER::create(5, 2500, 9000);Mat gray;cvtColor(img2, gray, COLOR_BGR2GRAY);std::vector&lt;std::vector&lt;cv::Point&gt; &gt; regContours;std::vector&lt;cv::Rect&gt; bboxes1;mesr1-&gt;detectRegions(gray, regContours, bboxes1);vector&lt;cv::Rect&gt;::iterator it &#x3D; bboxes1.begin();vector&lt;cv::Rect&gt; all_value;for (int i &#x3D; 0; i &lt; bboxes1.size(); i++) &#123;if (bboxes1[i].width &lt;&#x3D; 120 &amp;&amp; bboxes1[i].width &gt;&#x3D; 80 &amp;&amp; bboxes1[i].height &gt;&#x3D; 120) &#123;all_value.push_back(bboxes1[i]);&#125;&#125;sort(all_value.begin(), all_value.end(), compare1);vector&lt;int&gt; all_valuec(all_value.size(), 1);vector&lt;vector&lt;Rect&gt;&gt; tuan;for (vector&lt;Rect&gt;::iterator it &#x3D; all_value.begin(); it !&#x3D; all_value.end(); it++)&#123;circle(img2, (*it).tl(), 4, Scalar(0, 255, 0), -1);&#125;int xunhuan_time &#x3D; 0;while (true)&#123;xunhuan_time++;int count_num &#x3D; 0;vector&lt;Rect&gt; temp;for (int i &#x3D; 0; i &lt; all_value.size(); i++) &#123;if (all_valuec[i]) &#123;if (count_num &#x3D;&#x3D; 0) &#123;temp.push_back(all_value[i]);all_valuec[i] &#x3D; 0;count_num +&#x3D; 1;&#125;else &#123;if (all_value[i].tl().x - temp[0].tl().x &lt; 60) &#123;if (getDistance(all_value[i].tl(), temp[0].tl()) &lt; 80)&#123;temp.push_back(all_value[i]);count_num +&#x3D; 1;all_valuec[i] &#x3D; 0;&#125;&#125;else&#123;break;&#125;&#125;&#125;&#125;if (count_num &#x3D;&#x3D; 0) &#123;break;&#125;tuan.push_back(temp);&#125;cout &lt;&lt; &quot;有多少个点？ &quot; &lt;&lt; tuan.size() &lt;&lt; endl;vector&lt;Rect&gt; mean;for (int i &#x3D; 0; i &lt; tuan.size(); i++) &#123; &#x2F;&#x2F; 统计每一团的平均长宽int point_num &#x3D; 0;int pointx_mean &#x3D; 0;int pointy_mean &#x3D; 0, kuang_wid &#x3D; 0, kuang_hei &#x3D; 0;for (int j &#x3D; 0; j &lt; tuan[i].size(); j++) &#123;pointx_mean +&#x3D; tuan[i][j].tl().x;pointy_mean +&#x3D; tuan[i][j].tl().y;kuang_hei +&#x3D; tuan[i][j].height;kuang_wid +&#x3D; tuan[i][j].width;point_num++;&#125;&#x2F;&#x2F;cout &lt;&lt; tuan[i].size()&lt;&lt;endl;int x, y, w, h;x &#x3D; (int)(pointx_mean &#x2F; point_num);y &#x3D; (int)(pointy_mean &#x2F; point_num);w &#x3D; (int)(kuang_wid &#x2F; point_num);h &#x3D; (int)(kuang_hei &#x2F; point_num);rectangle(img2, Rect(x, y, w, h), Scalar(0, 255, 0), 8);mean.push_back(Rect(x, y, w, h));&#125;for (int i &#x3D; 0; i &lt; mean.size(); i++) &#123;rectangle(img2, mean[i], Scalar(0, 255, 0), 8);if (i) &#123;line(img2, mean[i - 1].tl(), mean[i].tl(), Scalar(255, 0, 0), 6);&#125;&#125;vector&lt;Rect&gt; final1;for (int s &#x3D; 0; s &lt; tuan.size(); s++) &#123;vector&lt;Rect&gt;fina_tuan;vector&lt;int&gt; all_valuec1(tuan.size(), 1);vector&lt;float&gt; all_k;vector&lt;float&gt; distance;fina_tuan.push_back(mean[s]);all_valuec1[s] &#x3D; 0;for (int i &#x3D; 0; i &lt; mean.size(); i++) &#123;if (i !&#x3D; s) &#123;all_k.push_back(get_k(mean[s].tl(), mean[i].tl()));&#125;&#125;for (int i &#x3D; 0; i &lt; all_k.size(); i++) &#123;int count1 &#x3D; 1;vector&lt;Rect&gt; temp(fina_tuan);for (int j &#x3D; 0; j &lt; all_k.size(); j++) &#123;if (i !&#x3D; j &amp;&amp; (abs(all_k[i] - all_k[j]) &lt; 0.3))&#123;int k &#x3D; i &lt; s ? i - 1 : i;int o &#x3D; j &lt; s ? j - 1 : j;if (all_valuec1[k + 1]) &#123;temp.push_back(mean[k + 1]);all_valuec1[k + 1] &#x3D; 0;count1++;&#125;if (all_valuec1[o + 1]) &#123;temp.push_back(mean[o + 1]);all_valuec1[o + 1] &#x3D; 0;count1++;&#125;&#125;&#125;if (count1 &gt;&#x3D; 5) &#123;fina_tuan &#x3D; temp;break;&#125;&#125;while (!all_k.empty()) &#123;all_k.pop_back();&#125;while (!distance.empty()) &#123;distance.pop_back();&#125;cout &lt;&lt; &quot;所有斜率清空,fina_tuan.size&quot; &lt;&lt; fina_tuan.size() &lt;&lt; endl;cout &lt;&lt; &quot;第&quot; &lt;&lt; s &lt;&lt; &quot;次循环&quot; &lt;&lt; endl;if (fina_tuan.size() &gt; 5) &#123;for (int i &#x3D; 0; i &lt; fina_tuan.size(); i++) &#123;if (i) &#123;all_k.push_back(get_k(fina_tuan[0].tl(), fina_tuan[i].tl()));&#125;&#125;int ssss &#x3D; 0;for (int i &#x3D; 0; i &lt; all_k.size(); i++) &#123;if (i) &#123;if (abs(all_k[0] - all_k[i]) &lt; 0.5);else &#123;ssss &#x3D; 1;break;&#125;&#125;&#125;cout &lt;&lt; endl;if (ssss) &#123;cout &lt;&lt; &quot;判断第一次所有的斜率问题&quot; &lt;&lt; endl;continue;&#125;final1 &#x3D; fina_tuan;if (ssss) &#123;cout &lt;&lt; &quot;距离问题&quot; &lt;&lt; endl;continue;&#125;break;&#125;&#125;sort(final1.begin(), final1.end(), compare1);cout &lt;&lt; &quot;哈哈哈哈哈&quot; &lt;&lt; final1.size() &lt;&lt; endl;for (int i &#x3D; 0; i &lt; final1.size(); i++) &#123;rectangle(img2, final1[i], Scalar(255, 0, 255), 8);&#125;&#x2F;*cout &lt;&lt; endl;namedWindow(&quot;rect&quot;, 0);cv::imshow(&quot;rect&quot;, img2);cv::waitKey();*&#x2F;if (final1.size() &lt; 10) &#123;buquan(final1);&#125;sort(final1.begin(), final1.end(), compare1);&#x2F;*cout &lt;&lt; &quot;哈哈哈哈哈&quot; &lt;&lt; final1.size() &lt;&lt; endl;for (int i &#x3D; 0; i &lt; final1.size(); i++) &#123;cout &lt;&lt; final1[i] &lt;&lt; &quot; &quot; &lt;&lt; endl;rectangle(img2, final1[i], Scalar(100,255 , 255), 8);&#125;cout &lt;&lt; endl;namedWindow(&quot;rect3&quot;, 0);cv::imshow(&quot;rect3&quot;, img2);cv::waitKey();*&#x2F;if (final1.size() &gt; 10) &#123;vector&lt;float&gt; distance;vector&lt;Rect&gt; fina_tuan(final1);vector&lt;Rect&gt; fina_tuan1;for (int i &#x3D; 0; i &lt; fina_tuan.size(); i++) &#123;if (i) &#123;distance.push_back(getDistance(fina_tuan[i - 1].tl(), fina_tuan[i].tl()));&#125;&#125;cout &lt;&lt; &quot;超过10了&quot; &lt;&lt; fina_tuan.size() &lt;&lt; &quot; &quot; &lt;&lt; distance.size() &lt;&lt; endl;vector&lt;int&gt; all_valuec2(fina_tuan.size(), 1);for (int i &#x3D; 0; i &lt; distance.size(); i++) &#123;for (int j &#x3D; i + 1; j &lt; distance.size(); j++) &#123;if (abs(distance[j] - distance[i]) &lt; 40) &#123;if (all_valuec2[i + 1]) &#123;fina_tuan1.push_back(fina_tuan[i + 1]);all_valuec2[i +1] &#x3D; 0;&#125;if (all_valuec2[i]) &#123;fina_tuan1.push_back(fina_tuan[i]);all_valuec2[i] &#x3D; 0;&#125;if (all_valuec2[j]) &#123;fina_tuan1.push_back(fina_tuan[j]);all_valuec2[j] &#x3D; 0;&#125;if (all_valuec2[j + 1]) &#123;fina_tuan1.push_back(fina_tuan[j + 1]);all_valuec2[j + 1] &#x3D; 0;&#125;&#125;&#125;&#125;final1 &#x3D; fina_tuan1;&#125;if (final1.size() &gt; 9) &#123;for (int i &#x3D; 0; i &lt; final1.size(); i++) &#123;rectangle(img2, final1[i], Scalar(0, 0, 255), 8);&#125;&#125;else &#123;cout &lt;&lt; &quot;妈的，还是小于10&quot; &lt;&lt; endl;&#125;&#125;int main() &#123;&#x2F;&#x2F;用void glob(String pattern, std::vector&lt;String&gt;&amp; result, bool recursive &#x3D; false);当recursive为false时，仅仅遍历指定文件夹内符合模式的文件，当recursive为true时，会同时遍历指定文件夹的子文件夹&#x2F;&#x2F;pattern要绝对路径 其它测试有问题string pattern &#x3D; &quot;D:\\Match\\wang_problem\\all\\1&quot;;string pattern1 &#x3D; &quot;D:\\Match\\wang_problem\\all\\2&quot;;&#x2F;&#x2F;cout &lt;&lt; pattern &lt;&lt; endl;vector&lt;Mat&gt; images;&#x2F;&#x2F; 必须cv的Stringvector&lt;String&gt; fn;glob(pattern, fn, true);size_t count &#x3D; fn.size();cout &lt;&lt; count &lt;&lt; endl;&#x2F;*for (int i &#x3D; 0; i &lt; count; i++) &#123;images.push_back(imread(fn[i]));imshow(&quot;jaj&quot;, images[i]);waitKey(10);&#125;*&#x2F;for (int i &#x3D; 0; i &lt; fn.size(); i++)&#123;for (int j &#x3D; i+1; j &lt; fn.size(); j++) &#123;if (getfilename(fn[i]) &#x3D;&#x3D; getfilename(fn[j])) &#123;cout &lt;&lt; &quot;有相同文件名&quot; &lt;&lt; endl;cout &lt;&lt; fn[i] &lt;&lt; endl;cout &lt;&lt; fn[j] &lt;&lt; endl;return 0;&#125;&#125;&#125;for (int i &#x3D; 0; i &lt; count; i++) &#123;cout &lt;&lt; i&lt;&lt;&quot; &quot;&lt;&lt; fn[i] &lt;&lt; endl;Mat new_image;Mat img;img &#x3D; imread(fn[i]);img.convertTo(new_image, -1, 3, 2);draw_kuang(new_image);cv::waitKey();imwrite(pattern1 + &quot;\\&quot; + getfilename(fn[i]), new_image);&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改变图像对比度"><a href="#改变图像对比度" class="headerlink" title="改变图像对比度"></a>改变图像对比度</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">img.convertTo(new_image, -1, 3, 2);&#x2F;&#x2F; -1:模式 3：对比度调整 2：亮度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="text-TextDetectorCNN方法"><a href="#text-TextDetectorCNN方法" class="headerlink" title="text::TextDetectorCNN方法"></a>text::TextDetectorCNN方法</h2><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>他只对3通道进行检测，并且检测结果并不随着对比度亮度的改变而改变,并且检测结果并并不一定很好：</li></ul><h3 id="检测主要代码"><a href="#检测主要代码" class="headerlink" title="检测主要代码"></a>检测主要代码</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">cv::Ptr&lt;cv::text::TextDetectorCNN&gt; detector &#x3D; cv::text::TextDetectorCNN::create(&quot;D:\\Temp\\textbox.prototxt&quot;, &quot;D:\\Temp\\TextBoxes_icdar13.caffemodel&quot;);       std::vector &lt; cv::Rect &gt; boxes;&#x2F;&#x2F;识别区域       std::vector &lt; float &gt; sources;&#x2F;&#x2F;评估分数       detector-&gt;detect(img, boxes, sources);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过检测边缘，形状，通过计算相似区域得到目标区域，再通过MSER算法得到结果"><a href="#通过检测边缘，形状，通过计算相似区域得到目标区域，再通过MSER算法得到结果" class="headerlink" title="通过检测边缘，形状，通过计算相似区域得到目标区域，再通过MSER算法得到结果"></a>通过检测边缘，形状，通过计算相似区域得到目标区域，再通过MSER算法得到结果</h2><h2 id="编译安装tesseract"><a href="#编译安装tesseract" class="headerlink" title="编译安装tesseract"></a>编译安装tesseract</h2><p>环境：win10_x64+VS2017</p><h3 id="尝试过很多博客中最终根据一篇笔记里面的东西完成安装，并且否认了cppan的安装办法"><a href="#尝试过很多博客中最终根据一篇笔记里面的东西完成安装，并且否认了cppan的安装办法" class="headerlink" title="尝试过很多博客中最终根据一篇笔记里面的东西完成安装，并且否认了cppan的安装办法"></a>尝试过很多博客中最终根据一篇笔记里面的东西完成安装，并且否认了cppan的安装办法</h3><p><a href="https://www.cnblogs.com/LuckPsyduck/p/11678589.html">博客地址</a></p><h3 id="首先经过了解之后发现安装很多库（libpng，openjpeg…等一系列库之后）使用vckpg-安装各种依赖项"><a href="#首先经过了解之后发现安装很多库（libpng，openjpeg…等一系列库之后）使用vckpg-安装各种依赖项" class="headerlink" title="首先经过了解之后发现安装很多库（libpng，openjpeg…等一系列库之后）使用vckpg 安装各种依赖项"></a>首先经过了解之后发现安装很多库（libpng，openjpeg…等一系列库之后）使用vckpg 安装各种依赖项</h3><p>vckpg 可以自动帮助下载源码</p><p><a href="https://blog.csdn.net/cjmqas/article/details/79282847#21-%E4%B8%8B%E8%BD%BDvcpkg">相关的安装和配置可以参考</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vcpkg.exe search xxx //查找所有名称包含xxx开源库vcpkg.exe <span class="token function">install</span> jsoncpp// 安装某个库vcpkg.exe <span class="token builtin class-name">help</span> triplet// 列出支持的框架vcpkg.exe <span class="token function">install</span> jsoncpp:x64-windowsvcpkg.exe remove jsoncpp// 移除某个东西vcpkg.exe list  // 列出所有库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h3><p>参考那篇博客之后安装好了tesseract，在测试的时候还是发现了一个问题，就是直接使用tesseract自带的读取图像的办法读取jpg图像的时候会在</p><blockquote><p>JFREAD(src-&gt;infile, src-&gt;buffer, INPUT_BUF_SIZE);</p></blockquote><p>这段代码的报一个罕见的错误，具体的错误不贴出来，反正是没找到解决办法，但是其他格式(bmp、png)的图片没有问题</p><p>解决问题：发现我需要通过opencv读入再进行出来就没必要采用tesseract读入图片的api(我是个憨憨)</p><h3 id="Pix转Mat"><a href="#Pix转Mat" class="headerlink" title="Pix转Mat"></a>Pix转Mat</h3><p>因为tesseract对图像进行操作的是Pix,opencv读入的是Mat,<br>Mat转Pix</p><pre class="line-numbers language-`c++" data-language="`c++"><code class="language-`c++">PIX* cvtMat2PIX(Mat imgGray)&#123;int cols &#x3D; imgGray.cols;int rows &#x3D; imgGray.rows; PIX *pixS &#x3D; pixCreate(cols, rows, 8); for (int i &#x3D; 0; i &lt; rows; i++)for (int j &#x3D; 0; j &lt; cols; j++)pixSetPixel(pixS, j, i, (l_uint32)imgGray.at&lt;uchar&gt;(i, j));return pixS;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面发现，好像不用转化,直接处理Mat矩阵</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">ocr-&gt;SetImage(im.data, im.cols, im.rows, 3, im.step);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="圆形检测"><a href="#圆形检测" class="headerlink" title="圆形检测"></a>圆形检测</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void HoughCircles(InputArray image,OutputArray circles, int method, double dp, double minDist, double param1&#x3D;100,double param2&#x3D;100, int minRadius&#x3D;0, int maxRadius&#x3D;0 ) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cv::HoughLinesP(InputArray src, &#x2F;&#x2F; 输入图像（8位灰度图像）黑底白线OutputArray lines, &#x2F;&#x2F; 输出直线两点坐标（vector&lt;Vec4i&gt;）double rho, &#x2F;&#x2F; 生成极坐标时候的像素扫描步长double theta, &#x2F;&#x2F;生成极坐标时候的角度步长（一般取CV_PI&#x2F;180）int threshold, &#x2F;&#x2F; 累加器阈值，获得足够交点的极坐标点才被看成是直线double minLineLength&#x3D;0;&#x2F;&#x2F; 直线最小长度double maxLineGap&#x3D;0;&#x2F;&#x2F; 直线最大间隔)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图象处理方法"><a href="#图象处理方法" class="headerlink" title="图象处理方法"></a>图象处理方法</h3><ul><li>彩色图像转灰度图像</li><li>灰度图像转成二进制图像（阈值化）</li><li>图像开运算、闭运算</li><li>归一化（一般用于深度学习中对输入图片进行处理）</li><li>标准化</li><li>直方图均衡化</li></ul>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>torch踩坑记录</title>
      <link href="/2021/07/28/dlandml/torch-cai-keng-ji-lu/"/>
      <url>/2021/07/28/dlandml/torch-cai-keng-ji-lu/</url>
      
        <content type="html"><![CDATA[<h3 id="在跑2020讯飞pet-脑部大赛前五大佬的model的时候"><a href="#在跑2020讯飞pet-脑部大赛前五大佬的model的时候" class="headerlink" title="在跑2020讯飞pet 脑部大赛前五大佬的model的时候"></a>在跑2020讯飞pet 脑部大赛前五大佬的model的时候</h3><h4 id="在使用EfficientNet时候出现-keyError-EfficientNet-b8"><a href="#在使用EfficientNet时候出现-keyError-EfficientNet-b8" class="headerlink" title="在使用EfficientNet时候出现 keyError EfficientNet-b8"></a>在使用EfficientNet时候出现 keyError EfficientNet-b8</h4><p>查看源码，发现在下载模型的时候需要设置一个参数，应该是因为版本原因，原来不需要的参数现在需要了</p><h4 id="RuntimeError-view-size-is-not-compatible-with-input-tensor’s-size-and-stride-at-least-one-dimension-spans-across-two-contiguous-subspaces-Use-reshape-…-instead"><a href="#RuntimeError-view-size-is-not-compatible-with-input-tensor’s-size-and-stride-at-least-one-dimension-spans-across-two-contiguous-subspaces-Use-reshape-…-instead" class="headerlink" title="RuntimeError: view size is not compatible with input tensor’s size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(…) instead."></a>RuntimeError: view size is not compatible with input tensor’s size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(…) instead.</h4><pre><code>correct_k = correct[:k].view(-1).float().sum(0, keepdim=True)</code></pre><p>RuntimeError: view size is not compatible with input tensor’s size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(…) instead.</p><p>两种解决办法：1）按照提示使用reshape代替；2）将变量先转为<em>contiguous ，再进行view:</em></p><pre class="line-numbers language-none"><code class="language-none">correct_k &#x3D; correct[:k].contiguous().view(-1).float().sum(0, keepdim&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="TypeError-img-should-be-PIL-Image-Got-lt-class-‘numpy-ndarray’-gt"><a href="#TypeError-img-should-be-PIL-Image-Got-lt-class-‘numpy-ndarray’-gt" class="headerlink" title="TypeError: img should be PIL Image. Got &lt;class ‘numpy.ndarray’&gt;"></a>TypeError: img should be PIL Image. Got &lt;class ‘numpy.ndarray’&gt;</h4><pre class="line-numbers language-none"><code class="language-none">transforms.Compose([    transforms.ToPILImage(),  # 不转换为PIL会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="TypeError-add-scalar-got-an-unexpected-keyword-argument-‘step’"><a href="#TypeError-add-scalar-got-an-unexpected-keyword-argument-‘step’" class="headerlink" title="TypeError: add_scalar() got an unexpected keyword argument ‘step’"></a>TypeError: add_scalar() got an unexpected keyword argument ‘step’</h4><p>。。。 查了一下文档， 发现是global_step</p><h4 id="去理解了一下了np-argmax-中axis-参数的理解"><a href="#去理解了一下了np-argmax-中axis-参数的理解" class="headerlink" title="去理解了一下了np.argmax()中axis 参数的理解"></a>去理解了一下了np.argmax()中axis 参数的理解</h4><p><strong>axis &#x3D; 1:</strong><br>　　等于1的时候，比较范围缩小了，只会比较每个数组内的数的大小，结果也会根据有几个数组，产生几个结果</p><p><strong>axis &#x3D; 0:</strong><br>　　你就这么想，0是最大的范围，所有的数组都要进行比较，只是比较的是这些数组相同位置上的数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">test <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>：array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span>        np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tensorbord</title>
      <link href="/2021/05/25/dlandml/tensorbord/"/>
      <url>/2021/05/25/dlandml/tensorbord/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yuanjiaqi_k/article/details/116237654?spm=1001.2014.3001.5501">tensorbord的使用</a></p><p>tensorboard –logdir&#x3D;runs</p>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tmux</title>
      <link href="/2021/05/25/cs/tmux/"/>
      <url>/2021/05/25/cs/tmux/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2019/10/tmux.html">http://www.ruanyifeng.com/blog/2019/10/tmux.html</a></p><p><a href="https://www.cnblogs.com/lizhang4/p/7325086.html">https://www.cnblogs.com/lizhang4/p/7325086.html</a></p><h2 id="一、Tmux-是什么？"><a href="#一、Tmux-是什么？" class="headerlink" title="一、Tmux 是什么？"></a>一、Tmux 是什么？</h2><h3 id="1-1-会话与进程"><a href="#1-1-会话与进程" class="headerlink" title="1.1 会话与进程"></a>1.1 会话与进程</h3><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。<strong>用户与计算机的这种临时的交互，称为一次”会话”（session）</strong> 。</p><p>会话的一个重要特点是，窗口与其中启动的进程是<a href="https://www.ruanyifeng.com/blog/2016/02/linux-daemon.html">连在一起</a>的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p><p>一个典型的例子就是，<a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH 登录</a>远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p><p>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。</p><h3 id="1-2-Tmux-的作用"><a href="#1-2-Tmux-的作用" class="headerlink" title="1.2 Tmux 的作用"></a>1.2 Tmux 的作用</h3><p><strong>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</strong></p><blockquote><p>（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</p><p>（2） 它可以让新窗口”接入”已经存在的会话。</p><p>（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</p><p>（4）它还支持窗口任意的垂直和水平拆分。</p></blockquote><p>类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。</p><h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>Tmux 一般需要自己安装。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu 或 Debian</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tmux<span class="token comment"># CentOS 或 Fedora</span>$ <span class="token function">sudo</span> yum <span class="token function">install</span> tmux<span class="token comment"># Mac</span>$ brew <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-2-启动与退出"><a href="#2-2-启动与退出" class="headerlink" title="2.2 启动与退出"></a>2.2 启动与退出</h3><p>安装完成后，键入<code>tmux</code>命令，就进入了 Tmux 窗口。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。</p><p><img src="/BlogImgs/tmux/bg2019102006.png" alt="img"></p><p>按下<code>Ctrl+d</code>或者显式输入<code>exit</code>命令，就可以退出 Tmux 窗口。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="2-3-前缀键"><a href="#2-3-前缀键" class="headerlink" title="2.3 前缀键"></a>2.3 前缀键</h3><p>Tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code>，即先按下<code>Ctrl+b</code>，快捷键才会生效。</p><p>举例来说，帮助命令的快捷键是<code>Ctrl+b ?</code>。它的用法是，在 Tmux 窗口中，先按下<code>Ctrl+b</code>，再按下<code>?</code>，就会显示帮助信息。</p><p>然后，按下 ESC 键或<code>q</code>键，就可以退出帮助。</p><h2 id="三、会话管理"><a href="#三、会话管理" class="headerlink" title="三、会话管理"></a>三、会话管理</h2><h3 id="3-1-新建会话"><a href="#3-1-新建会话" class="headerlink" title="3.1 新建会话"></a>3.1 新建会话</h3><p>第一个启动的 Tmux 窗口，编号是<code>0</code>，第二个窗口的编号是<code>1</code>，以此类推。这些窗口对应的会话，就是 0 号会话、1 号会话。</p><p>使用编号区分会话，不太直观，更好的方法是为会话起名。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux new <span class="token parameter variable">-s</span> <span class="token operator">&lt;</span>session-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面命令新建一个指定名称的会话。</p><h3 id="3-2-分离会话"><a href="#3-2-分离会话" class="headerlink" title="3.2 分离会话"></a>3.2 分离会话</h3><p>在 Tmux 窗口中，按下<code>Ctrl+b d</code>或者输入<code>tmux detach</code>命令，就会将当前会话与窗口分离。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux detach<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面命令执行后，就会退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行。</p><p><code>tmux ls</code>命令可以查看当前所有的 Tmux 会话。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux <span class="token function">ls</span><span class="token comment"># or</span>$ tmux list-session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-3-接入会话"><a href="#3-3-接入会话" class="headerlink" title="3.3 接入会话"></a>3.3 接入会话</h3><p><code>tmux attach</code>命令用于重新接入某个已存在的会话。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用会话编号</span>$ tmux attach <span class="token parameter variable">-t</span> <span class="token number">0</span><span class="token comment"># 使用会话名称</span>$ tmux attach <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>session-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-4-杀死会话"><a href="#3-4-杀死会话" class="headerlink" title="3.4 杀死会话"></a>3.4 杀死会话</h3><p><code>tmux kill-session</code>命令用于杀死某个会话。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用会话编号</span>$ tmux kill-session <span class="token parameter variable">-t</span> <span class="token number">0</span><span class="token comment"># 使用会话名称</span>$ tmux kill-session <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>session-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-5-切换会话"><a href="#3-5-切换会话" class="headerlink" title="3.5 切换会话"></a>3.5 切换会话</h3><p><code>tmux switch</code>命令用于切换会话。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用会话编号</span>$ tmux switch <span class="token parameter variable">-t</span> <span class="token number">0</span><span class="token comment"># 使用会话名称</span>$ tmux switch <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>session-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-6-重命名会话"><a href="#3-6-重命名会话" class="headerlink" title="3.6 重命名会话"></a>3.6 重命名会话</h3><p><code>tmux rename-session</code>命令用于重命名会话。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux rename-session <span class="token parameter variable">-t</span> <span class="token number">0</span> <span class="token operator">&lt;</span>new-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>上面命令将0号会话重命名。</p><h3 id="3-7-会话快捷键"><a href="#3-7-会话快捷键" class="headerlink" title="3.7 会话快捷键"></a>3.7 会话快捷键</h3><p>下面是一些会话相关的快捷键。</p><blockquote><ul><li><code>Ctrl+b d</code>：分离当前会话。</li><li><code>Ctrl+b s</code>：列出所有会话。</li><li><code>Ctrl+b $</code>：重命名当前会话。</li></ul></blockquote><h2 id="四、最简操作流程"><a href="#四、最简操作流程" class="headerlink" title="四、最简操作流程"></a>四、最简操作流程</h2><p>综上所述，以下是 Tmux 的最简操作流程。</p><blockquote><ol><li>新建会话<code>tmux new -s my_session</code>。</li><li>在 Tmux 窗口运行所需的程序。</li><li>按下快捷键<code>Ctrl+b d</code>将会话分离。</li><li>下次使用时，重新连接到会话<code>tmux attach-session -t my_session</code>。</li></ol></blockquote><h2 id="五、窗格操作"><a href="#五、窗格操作" class="headerlink" title="五、窗格操作"></a>五、窗格操作</h2><p>Tmux 可以将窗口分成多个窗格（pane），每个窗格运行不同的命令。以下命令都是在 Tmux 窗口中执行。</p><h3 id="5-1-划分窗格"><a href="#5-1-划分窗格" class="headerlink" title="5.1 划分窗格"></a>5.1 划分窗格</h3><p><code>tmux split-window</code>命令用来划分窗格。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 划分上下两个窗格</span>$ tmux split-window<span class="token comment"># 划分左右两个窗格</span>$ tmux split-window <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="/BlogImgs/tmux/bg2019102007.jpg" alt="img"></p><h3 id="5-2-移动光标"><a href="#5-2-移动光标" class="headerlink" title="5.2 移动光标"></a>5.2 移动光标</h3><p><code>tmux select-pane</code>命令用来移动光标位置。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 光标切换到上方窗格</span>$ tmux select-pane <span class="token parameter variable">-U</span><span class="token comment"># 光标切换到下方窗格</span>$ tmux select-pane <span class="token parameter variable">-D</span><span class="token comment"># 光标切换到左边窗格</span>$ tmux select-pane <span class="token parameter variable">-L</span><span class="token comment"># 光标切换到右边窗格</span>$ tmux select-pane <span class="token parameter variable">-R</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-3-交换窗格位置"><a href="#5-3-交换窗格位置" class="headerlink" title="5.3 交换窗格位置"></a>5.3 交换窗格位置</h3><p><code>tmux swap-pane</code>命令用来交换窗格位置。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当前窗格上移</span>$ tmux swap-pane <span class="token parameter variable">-U</span><span class="token comment"># 当前窗格下移</span>$ tmux swap-pane <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-4-窗格快捷键"><a href="#5-4-窗格快捷键" class="headerlink" title="5.4 窗格快捷键"></a>5.4 窗格快捷键</h3><p>下面是一些窗格操作的快捷键。</p><blockquote><ul><li><code>Ctrl+b %</code>：划分左右两个窗格。</li><li><code>Ctrl+b &quot;</code>：划分上下两个窗格。</li><li><code>Ctrl+b &lt;arrow key&gt;</code>：光标切换到其他窗格。<code>&lt;arrow key&gt;</code>是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键<code>↓</code>。</li><li><code>Ctrl+b ;</code>：光标切换到上一个窗格。</li><li><code>Ctrl+b o</code>：光标切换到下一个窗格。</li><li><code>Ctrl+b &#123;</code>：当前窗格与上一个窗格交换位置。</li><li><code>Ctrl+b &#125;</code>：当前窗格与下一个窗格交换位置。</li><li><code>Ctrl+b Ctrl+o</code>：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</li><li><code>Ctrl+b Alt+o</code>：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</li><li><code>Ctrl+b x</code>：关闭当前窗格。</li><li><code>Ctrl+b !</code>：将当前窗格拆分为一个独立窗口。</li><li><code>Ctrl+b z</code>：当前窗格全屏显示，再使用一次会变回原来大小。</li><li><code>Ctrl+b Ctrl+&lt;arrow key&gt;</code>：按箭头方向调整窗格大小。</li><li><code>Ctrl+b q</code>：显示窗格编号。</li></ul></blockquote><h2 id="六、窗口管理"><a href="#六、窗口管理" class="headerlink" title="六、窗口管理"></a>六、窗口管理</h2><p>除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口。</p><h3 id="6-1-新建窗口"><a href="#6-1-新建窗口" class="headerlink" title="6.1 新建窗口"></a>6.1 新建窗口</h3><p><code>tmux new-window</code>命令用来创建新窗口。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux new-window<span class="token comment"># 新建一个指定名称的窗口</span>$ tmux new-window <span class="token parameter variable">-n</span> <span class="token operator">&lt;</span>window-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-2-切换窗口"><a href="#6-2-切换窗口" class="headerlink" title="6.2 切换窗口"></a>6.2 切换窗口</h3><p><code>tmux select-window</code>命令用来切换窗口。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到指定编号的窗口</span>$ tmux select-window <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>window-number<span class="token operator">></span><span class="token comment"># 切换到指定名称的窗口</span>$ tmux select-window <span class="token parameter variable">-t</span> <span class="token operator">&lt;</span>window-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-3-重命名窗口"><a href="#6-3-重命名窗口" class="headerlink" title="6.3 重命名窗口"></a>6.3 重命名窗口</h3><p><code>tmux rename-window</code>命令用于为当前窗口起名（或重命名）。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux rename-window <span class="token operator">&lt;</span>new-name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="6-4-窗口快捷键"><a href="#6-4-窗口快捷键" class="headerlink" title="6.4 窗口快捷键"></a>6.4 窗口快捷键</h3><p>下面是一些窗口操作的快捷键。</p><blockquote><ul><li><code>Ctrl+b c</code>：创建一个新窗口，状态栏会显示多个窗口的信息。</li><li><code>Ctrl+b p</code>：切换到上一个窗口（按照状态栏上的顺序）。</li><li><code>Ctrl+b n</code>：切换到下一个窗口。</li><li><code>Ctrl+b &lt;number&gt;</code>：切换到指定编号的窗口，其中的<code>&lt;number&gt;</code>是状态栏上的窗口编号。</li><li><code>Ctrl+b w</code>：从列表中选择窗口。</li><li><code>Ctrl+b ,</code>：窗口重命名。</li></ul></blockquote><h2 id="七、其他命令"><a href="#七、其他命令" class="headerlink" title="七、其他命令"></a>七、其他命令</h2><p>下面是一些其他命令。</p><blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有快捷键，及其对应的 Tmux 命令</span>$ tmux list-keys<span class="token comment"># 列出所有 Tmux 命令及其参数</span>$ tmux list-commands<span class="token comment"># 列出当前所有 Tmux 会话的信息</span>$ tmux info<span class="token comment"># 重新加载当前的 Tmux 配置</span>$ tmux source-file ~/.tmux.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>tmux 可以利用 epel yum install 安装</p><p>常用方法：</p><pre class="line-numbers language-none"><code class="language-none">tmux  #进入tmuxctrl + c #创建一个新的窗口Ctrl+b q - 显示分隔窗口的编号c-b w 通过上下键选择当前窗口中打开的会话进入某个sessiontmux attach -t &lt;session&gt;重绘窗口大小tmux at -d杀掉整个sessiontmux kill-session -t tm1退出tumx，并保存当前会话，这时，tmux仍在后台运行，可以通过tmux attach进入 到指定的会话C-b d c-b [ 进入copy模式，可以滚屏 c-b 方向键 可以选择window-namec-b x 干掉当前wnc-b w 查看session，用来选择c-b % 水平分割c-b \&quot; 垂直分割c-b : 进入命令配置模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：window 的历史内容已经被 tmux 接管了，所以原来 console&#x2F;terminal 提供的 Shift+PgUp&#x2F;PgDn 所显示的内容并不是当前窗口的历史内容，所以要用 C-b [进入 copy-mode，然后才能用 PgUp&#x2F;PgDn &#x2F; 光标 &#x2F; Ctrl-S 等键在 copy-mode 中移动。翻页以看到前面的东西：C-b pageup&#x2F;pagedown<br>如果要启用鼠标滚轮来卷动窗口内容的话，可以按 C-b : 然后输入</p><pre class="line-numbers language-none"><code class="language-none">setw mode-mouse on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就可以了。如果要对所有窗口开启的话:</p><pre class="line-numbers language-none"><code class="language-none">setw -g mode-mouse on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(这种情况下，Vi&#x2F;Emacs 等全屏程序并不受影响，还可以自己接管滚轮事件)<br>也可以加到~&#x2F;.tmux.conf 里面</p><pre class="line-numbers language-none"><code class="language-none">set-window-option -g mode-mouse onc create new windown&#x2F;p move to next&#x2F;previous windowsf find window by namew menu with all windows&amp; kill current window, rename window<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 session 和 window-name，只有在同一个 session 里面才能选择 windows</p><pre class="line-numbers language-none"><code class="language-none">#新建终端tmux new -d -s tm1tmux new -d -s tm2tmux new -d -s tm3tmux new -d -s tm4tmux new -d -s tm0#新建分屏tmux neww -n 123 -t tm0tmux neww -n 12 -t tm0tmux neww -n 1 -t tm0tmux selectw -t tm0:2tmux splitw -h -p 50 -t tm0:2#访问终端tmux attach -t tm0tmux selectp -t tm1tmux splitw -h -p 50tmux selectp -t tm1tmux splitw -v -p 50tmux selectp -t tm1tmux attach -t tm1tmux neww -n 1234 -t tm1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后关于 tmux 中新建 (new) 的一些用法</p><pre class="line-numbers language-none"><code class="language-none">newnew-session [-d] [-n window-name] [-s session-name] [-t target-session] [shell-command]newwnew-window [-adk] [-n window-name] [-t target-window] [shell-command]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Torch偶遇的api</title>
      <link href="/2021/05/25/dlandml/torch-ou-yu-de-api/"/>
      <url>/2021/05/25/dlandml/torch-ou-yu-de-api/</url>
      
        <content type="html"><![CDATA[<h1 id="torch-的某些奇怪api"><a href="#torch-的某些奇怪api" class="headerlink" title="torch 的某些奇怪api"></a>torch 的某些奇怪api</h1><h5 id="others"><a href="#others" class="headerlink" title="others"></a>others</h5><pre class="line-numbers language-none"><code class="language-none">torch.numel() # 返回 number of elements<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 参数默认是1，其实就是显示添加一个参数去计算梯度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="缩放指定层或者指定tensor的帝都，与调整对应变量的学习率一个效果"><a href="#缩放指定层或者指定tensor的帝都，与调整对应变量的学习率一个效果" class="headerlink" title="缩放指定层或者指定tensor的帝都，与调整对应变量的学习率一个效果"></a>缩放指定层或者指定tensor的帝都，与调整对应变量的学习率一个效果</h5><ol><li>通过tensor.refister_hook 来调整</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">0</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 可以看到 x.grad 值为1</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">del</span> x<span class="token punctuation">.</span>grady <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">0</span>y<span class="token punctuation">.</span>register_hook<span class="token punctuation">(</span><span class="token keyword">lambda</span> g<span class="token punctuation">:</span> g<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 可以看到 x.grad 值为0.1，成功缩放梯度</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>可以通过一个反向传播算子, <em>我感觉这种方式不是很好理解</em><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">0</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 可以看到 x.grad 值为1</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">del</span> x<span class="token punctuation">.</span>grady <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">0</span>y<span class="token punctuation">.</span>register_hook<span class="token punctuation">(</span><span class="token keyword">lambda</span> g<span class="token punctuation">:</span> g<span class="token operator">*</span><span class="token number">0.1</span><span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 可以看到 x.grad 值为0.1，成功缩放梯度</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="pytorch的傅里叶卷积"><a href="#pytorch的傅里叶卷积" class="headerlink" title="pytorch的傅里叶卷积"></a>pytorch的傅里叶卷积</h5><p><em>据说能加速计算，但是我没用过，有需求的时候再看 <a href="https://blog.csdn.net/weixin_38739735/article/details/110359528">链接</a></em></p><ul><li><a href="https://github.com/fkodom/fft-conv-pytorch">implement</a>)</li></ul><h5 id="seed-everything"><a href="#seed-everything" class="headerlink" title="seed_everything"></a>seed_everything</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">seed_everything</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">:</span>    torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>    torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'PYTHONHASHSEED'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init_seeds</span><span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cuda_deterministic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>      torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>      torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed_all<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>      <span class="token comment"># Speed-reproducibility tradeoff https://pytorch.org/docs/stable/notes/randomness.html  </span>    <span class="token keyword">if</span> cuda_deterministic<span class="token punctuation">:</span>  <span class="token comment"># slower, more reproducible  </span>        torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>          torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># faster, less reproducible  </span>        torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">False</span>          torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">True</span>      random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>      np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>      os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'PYTHONHASHSEED'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DL/ML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm</title>
      <link href="/2021/05/25/cs/pycharm/"/>
      <url>/2021/05/25/cs/pycharm/</url>
      
        <content type="html"><![CDATA[<p>(pycharm tqdm)[<a href="https://blog.csdn.net/qq_40177564/article/details/107143701]">https://blog.csdn.net/qq_40177564/article/details/107143701]</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Colab使用技巧</title>
      <link href="/2021/05/22/cs/colab-shi-yong-ji-qiao/"/>
      <url>/2021/05/22/cs/colab-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="防止Google-Colab自动断开代码"><a href="#防止Google-Colab自动断开代码" class="headerlink" title="防止Google Colab自动断开代码:"></a>防止Google Colab自动断开代码:</h3><p>每分钟自动运行代码刷新，解除断开限制.</p><p>使用方法：colab页面按下 F12或者 Ctrl+Shift+I (mac按 Option+Command+I) 在console（控制台） 输入以下代码并回车.</p><p><strong>复制以下代码粘贴在浏览器console！！不要关闭浏览器以免失效</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ConnectButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connect pushed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#connect"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">setInterval</span><span class="token punctuation">(</span>ConnectButton<span class="token punctuation">,</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认内存是12GB-下面是开启25GB的方法"><a href="#默认内存是12GB-下面是开启25GB的方法" class="headerlink" title="默认内存是12GB,下面是开启25GB的方法:"></a><strong>默认内存是12GB,下面是开启25GB的方法:</strong></h3><p>先把内存耗尽,然后colab就会弹出提升内存的选项</p><p>耗尽内存的代码如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  lists<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'haoneicun'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="挂载Google-Drive"><a href="#挂载Google-Drive" class="headerlink" title="挂载Google Drive"></a><strong>挂载Google Drive</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> google<span class="token punctuation">.</span>colab <span class="token keyword">import</span> drive<span class="token keyword">import</span> osdrive<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'/content/drive'</span><span class="token punctuation">)</span>path <span class="token operator">=</span> <span class="token string">"/content/drive/My Drive"</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pip</title>
      <link href="/2021/05/17/cs/pip/"/>
      <url>/2021/05/17/cs/pip/</url>
      
        <content type="html"><![CDATA[<blockquote><p>pip freeze &gt;</p></blockquote><p> pip install –upgrade 要升级的包名</p><p>python -m pip install –upgrade pip</p><p>–no-dependencies</p><blockquote><p>–no-deps, –no-dependencies                        Ignore package dependencies 忽略依赖</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬微博和大众</title>
      <link href="/2021/05/14/cs/pa-wei-bo-he-da-zhong/"/>
      <url>/2021/05/14/cs/pa-wei-bo-he-da-zhong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># coding: utf-8</span><span class="token comment"># In[1]:</span><span class="token comment">### 因为爬取微博评论的时候会遇到加载更多评论的选项，如果用链接请求的话，会比较麻烦</span><span class="token comment">### 所以采用浏览器驱动 用selenium控制浏览驱动去模拟点击效果，同时这样不容易被屏蔽</span><span class="token comment">### 这是不使用ip池的比较好的办法。</span><span class="token comment"># In[17]:</span>basePath <span class="token operator">=</span> <span class="token string">'D:/Temp/'</span><span class="token comment"># In[2]:</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token comment"># In[3]:</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">### https://chromedriver.storage.googleapis.com/index.html?path=90.0.4430.24/  请在这里下载浏览器驱动</span><span class="token comment">### https://s.weibo.com/ 运行之后会产生一个收到控制的浏览器页面，但只有第一个页面会收到控制，输入微博的网址</span><span class="token comment">### 这里需要你登录微博，因为用浏览器模拟点击不容易被针对，直接用url，就算有cookie会被识别为爬虫的概率也更大</span><span class="token comment"># In[ ]:</span>basePath<span class="token comment"># In[4]:</span><span class="token comment">### 生成时间序列，因为微博可以选择时间段进行爬取，但是太大的时间段也最多只能显示30也，总共也就几天的热门</span><span class="token comment">### 所以干脆就一天一天的爬取，爬取每天前五的话题</span>times <span class="token operator">=</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">'12/1/2019'</span><span class="token punctuation">,</span><span class="token string">'6/1/2020'</span><span class="token punctuation">)</span>times <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> times<span class="token punctuation">]</span>times<span class="token comment"># In[5]:</span><span class="token comment">### 点击事件，传入一个元素，然后控制浏览器点击他，比如传入一个button会让浏览器点击这个button，</span><span class="token comment">### 代替我们鼠标直接操作</span><span class="token keyword">def</span> <span class="token function">oneclick</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>timesleep<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># ,timesleep=5</span>    webdriver<span class="token punctuation">.</span>ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>timesleep<span class="token punctuation">)</span><span class="token comment"># In[6]:</span><span class="token keyword">def</span> <span class="token function">huadong</span><span class="token punctuation">(</span>times<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对于一个话题有个坑就是，如果你不把浏览器滑到底，他是不会出现加载更多评论这个a标签的，所以这个函数是模拟    将屏幕滑到底，一共需要滑动n次，这也是为什么用浏览器控制会更好的原因。    """</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">:</span>        driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"window.scrollTo(0,document.body.scrollHeight);"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># In[7]:</span><span class="token keyword">def</span> <span class="token function">loadAllData</span><span class="token punctuation">(</span>timesleep<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    huadong<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">## 滑动到页面底部，会出现加载更多的a标签，这个a标签的action-type属性是唯一的</span>    flag <span class="token operator">=</span> <span class="token boolean">True</span>    time1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> flag<span class="token punctuation">:</span> <span class="token comment">### 点完所有的更多的评论，知道没有更多的评论可以加载为止</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            count<span class="token operator">+=</span><span class="token number">1</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            temp <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'[action-type="click_more_comment"]'</span><span class="token punctuation">)</span><span class="token comment">#             temp.click()</span>            oneclick<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span><span class="token comment">#             print(e)</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"all is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token string">, and spend </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>time1<span class="token punctuation">&#125;</span></span><span class="token string">..."</span></span><span class="token punctuation">)</span>   <span class="token comment"># print(f"load over ....  all is &#123;count&#125;!")</span><span class="token comment"># In[8]:</span><span class="token keyword">def</span> <span class="token function">computeNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取评论的一些信息，包括，转发数，评论数，点赞数    """</span>    temp <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">"[class='WB_row_line WB_row_r4 clearfix S_line2']"</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    temp <span class="token operator">=</span> <span class="token punctuation">[</span>each<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">for</span> each <span class="token keyword">in</span> temp<span class="token punctuation">]</span>    <span class="token keyword">return</span> temp<span class="token comment"># In[9]:</span><span class="token keyword">def</span> <span class="token function">computeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取发这个话题的机构的名字，时间、来源，和主要内容    """</span>    temp <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">"[class='WB_feed_detail clearfix']"</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'WB_detail'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">"来自"</span> <span class="token keyword">in</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        time1<span class="token punctuation">,</span>frm <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'来自'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        time1<span class="token punctuation">,</span>frm  <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">""</span>    <span class="token keyword">return</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> time1<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> frm<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># In[10]:</span><span class="token keyword">def</span> <span class="token function">computeCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    获取这个页面所有的一级评论    """</span>    content <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'list_con'</span><span class="token punctuation">)</span>    names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    neirong <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    dianzanshu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    shijian <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># result = [each.text.split('\n')[:-1] for each  in content]</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> each<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'：'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        neirong<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'：'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            dianzanshu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            shijian<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'names'</span><span class="token punctuation">,</span> <span class="token string">'neirong'</span><span class="token punctuation">,</span> <span class="token string">'dianzanshu'</span><span class="token punctuation">,</span> <span class="token string">'shijian'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    data<span class="token punctuation">[</span><span class="token string">'names'</span><span class="token punctuation">]</span> <span class="token operator">=</span>names    data<span class="token punctuation">[</span><span class="token string">'neirong'</span><span class="token punctuation">]</span> <span class="token operator">=</span>neirong        data<span class="token punctuation">[</span><span class="token string">'dianzanshu'</span><span class="token punctuation">]</span> <span class="token operator">=</span>dianzanshu        data<span class="token punctuation">[</span><span class="token string">'shijian'</span><span class="token punctuation">]</span> <span class="token operator">=</span>shijian        <span class="token keyword">return</span> data<span class="token comment"># In[11]:</span><span class="token keyword">def</span> <span class="token function">saveOneresult</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    存储一个话题的所有信息以及所有评论    """</span>    loadAllData<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> computeNums<span class="token punctuation">(</span><span class="token punctuation">)</span>    name<span class="token punctuation">,</span>times<span class="token punctuation">,</span>frm<span class="token punctuation">,</span>maincontent <span class="token operator">=</span> computeAll<span class="token punctuation">(</span><span class="token punctuation">)</span>    storeName <span class="token operator">=</span> times<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>frm    reply <span class="token operator">=</span> computeCon<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#     print(maincontent,name,nums,times)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>storeName<span class="token punctuation">)</span> <span class="token comment">## 存储名字以时间_名字_来源命令</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>basePath<span class="token operator">+</span><span class="token string">'all.csv'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token comment">### 存储这条话题基本的信息在all.csv 里面</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">','</span> <span class="token operator">+</span>maincontent<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    reply<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>basePath<span class="token operator">+</span>storeName<span class="token operator">+</span><span class="token string">'.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># In[13]:</span><span class="token keyword">def</span> <span class="token function">oneDaySave</span><span class="token punctuation">(</span>one_day<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    传入一天的时间    然后浏览器访问这一天的热门话题的搜索结果页面    """</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://s.weibo.com/weibo/%E7%96%AB%E6%83%85?q=%E7%96%AB%E6%83%85&amp;xsort=hot&amp;suball=1&amp;timescope=custom:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>one_day<span class="token punctuation">&#125;</span></span><span class="token string">-0:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>one_day<span class="token punctuation">&#125;</span></span><span class="token string">-23&amp;Refer=g'</span></span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mustFlag <span class="token operator">=</span> <span class="token boolean">True</span>        counts <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> mustFlag<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                each <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'//*[@id="pl_feedlist_index"]/div[2]/div[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">]'</span></span><span class="token punctuation">)</span>                aHerf <span class="token operator">=</span> each<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'./div/div[2]/ul/li[3]/a'</span></span><span class="token punctuation">)</span>                <span class="token comment">### aHerf 是 话题下面评论的那个a标签，只有点击了评论，评论才会被加载出来</span>                oneclick<span class="token punctuation">(</span>aHerf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                each <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'//*[@id="pl_feedlist_index"]/div[2]/div[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">]'</span></span><span class="token punctuation">)</span>                temp <span class="token operator">=</span> each<span class="token punctuation">.</span>find_elements_by_class_name<span class="token punctuation">(</span><span class="token string">'card-more-a'</span><span class="token punctuation">)</span> <span class="token comment">### 一般评论够多的话才会有加载更多评论</span>                <span class="token comment">### 的选项，所以此处做一个筛选，如果评论少于4条是不会有这个的，如果少于4条还不如不要</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span>                    temp1 <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find_elements_by_tag_name<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> temp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>                    <span class="token comment">### 进入一个具体的话题或者文章的具体页面</span>                    oneclick<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment">### 获取这个页面的评论</span>                    saveOneresult<span class="token punctuation">(</span>basePath<span class="token punctuation">)</span>                    driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>                mustFlag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token comment">### 有时候微博还是会把你判断为爬虫，所以有个出错控制，这个时候只需要刷新浏览器即可</span>                <span class="token comment">### 但是刷新次数过多也不好</span>                counts<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>basePath<span class="token operator">+</span><span class="token string">'sunhuai.csv'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>one_day<span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">','</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> counts<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                    mustFlag<span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">elif</span> counts <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                    driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># In[18]:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    oneDaySave<span class="token punctuation">(</span>times<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>比赛特征构建方法</title>
      <link href="/2021/05/05/competition/bi-sai-te-zheng-gou-jian-fang-fa/"/>
      <url>/2021/05/05/competition/bi-sai-te-zheng-gou-jian-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="统计特征-x2F-妙啊"><a href="#统计特征-x2F-妙啊" class="headerlink" title="统计特征&#x2F; 妙啊"></a>统计特征&#x2F; 妙啊</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 统计特征</span><span class="token keyword">def</span> <span class="token function">stat</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> df_merge<span class="token punctuation">,</span> group_by<span class="token punctuation">,</span> agg<span class="token punctuation">)</span><span class="token punctuation">:</span>    group <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>group_by<span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>agg<span class="token punctuation">)</span>    columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> on<span class="token punctuation">,</span> methods <span class="token keyword">in</span> agg<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> method <span class="token keyword">in</span> methods<span class="token punctuation">:</span>            columns<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;&#125;_&#123;&#125;_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>group_by<span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span>    group<span class="token punctuation">.</span>columns <span class="token operator">=</span> columns    group<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    df_merge <span class="token operator">=</span> df_merge<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>group<span class="token punctuation">,</span> on<span class="token operator">=</span>group_by<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> <span class="token punctuation">(</span>group<span class="token punctuation">)</span>    gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df_merge<span class="token keyword">def</span> <span class="token function">statis_feat</span><span class="token punctuation">(</span>df_know<span class="token punctuation">,</span> df_unknow<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'p1_census_register'</span><span class="token punctuation">,</span> <span class="token string">'dpt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        df_unknow <span class="token operator">=</span> stat<span class="token punctuation">(</span>df_know<span class="token punctuation">,</span> df_unknow<span class="token punctuation">,</span> <span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                         <span class="token string">'y1_is_purchase'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df_unknow<span class="token comment">### 五折交叉验证</span>df_train <span class="token operator">=</span> df_feature<span class="token punctuation">[</span><span class="token operator">~</span>df_feature<span class="token punctuation">[</span><span class="token string">'y1_is_purchase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df_train <span class="token operator">=</span> df_train<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df_test <span class="token operator">=</span> df_feature<span class="token punctuation">[</span>df_feature<span class="token punctuation">[</span><span class="token string">'y1_is_purchase'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df_stas_feat <span class="token operator">=</span> <span class="token boolean">None</span>kfold <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>seed<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> train_index<span class="token punctuation">,</span> val_index <span class="token keyword">in</span> kfold<span class="token punctuation">.</span>split<span class="token punctuation">(</span>df_train<span class="token punctuation">,</span> df_train<span class="token punctuation">[</span><span class="token string">'y1_is_purchase'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_fold_train <span class="token operator">=</span> df_train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>    df_fold_val <span class="token operator">=</span> df_train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span>    df_fold_val <span class="token operator">=</span> statis_feat<span class="token punctuation">(</span>df_fold_train<span class="token punctuation">,</span> df_fold_val<span class="token punctuation">)</span>    df_stas_feat <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df_stas_feat<span class="token punctuation">,</span> df_fold_val<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>df_fold_train<span class="token punctuation">)</span>    <span class="token keyword">del</span><span class="token punctuation">(</span>df_fold_val<span class="token punctuation">)</span>    gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>df_test <span class="token operator">=</span> statis_feat<span class="token punctuation">(</span>df_train<span class="token punctuation">,</span> df_test<span class="token punctuation">)</span>df_feature <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df_stas_feat<span class="token punctuation">,</span> df_test<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">### 目标编码</span>feat_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"prov_id"</span><span class="token punctuation">,</span> <span class="token string">"area_id"</span><span class="token punctuation">,</span> <span class="token string">"chnl_type"</span><span class="token punctuation">,</span>             <span class="token string">"product_type"</span><span class="token punctuation">,</span> <span class="token string">"manu_name"</span><span class="token punctuation">,</span> <span class="token string">"term_type"</span><span class="token punctuation">,</span>             <span class="token string">"activity_type"</span><span class="token punctuation">,</span>  <span class="token string">"comp_type"</span><span class="token punctuation">,</span>  <span class="token string">"city_level"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span>             <span class="token string">'active_days20'</span><span class="token punctuation">,</span> <span class="token string">'active_days21'</span><span class="token punctuation">,</span>             <span class="token string">'active_days01'</span><span class="token punctuation">,</span> <span class="token string">'active_days22'</span><span class="token punctuation">,</span> <span class="token string">'active_days19'</span><span class="token punctuation">]</span>kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token keyword">for</span> feat <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>feat_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_fee'</span><span class="token punctuation">,</span> <span class="token string">'total_flux'</span><span class="token punctuation">,</span> <span class="token string">'pay_fee'</span><span class="token punctuation">,</span> <span class="token string">'re_call10'</span><span class="token punctuation">,</span>                <span class="token string">'bank_cnt'</span><span class="token punctuation">,</span> <span class="token string">'total_times'</span><span class="token punctuation">,</span> <span class="token string">'video_app_flux'</span><span class="token punctuation">,</span>                <span class="token string">'live_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'game_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'call_days'</span><span class="token punctuation">,</span>                <span class="token string">'short_call10'</span><span class="token punctuation">,</span> <span class="token string">'long_call10'</span><span class="token punctuation">,</span> <span class="token string">'call_sum'</span><span class="token punctuation">,</span>                <span class="token string">'innet_months'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>        <span class="token keyword">if</span> feat <span class="token keyword">not</span> <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>            colname1 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_mean"</span></span>            colname2 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_median"</span></span>            train<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            train<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train<span class="token punctuation">,</span> train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                trn_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">,</span> f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                val_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>values                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>values            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>                train<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>                test<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>feat_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"prov_id"</span><span class="token punctuation">,</span> <span class="token string">"area_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'is_home_5g_cover_l02'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token string">'city_level'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'activity_type'</span><span class="token punctuation">,</span> <span class="token string">'comp_type'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token string">'chnl_type'</span><span class="token punctuation">,</span> <span class="token string">'product_type'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"prov_id"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"area_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'area_id'</span><span class="token punctuation">,</span> <span class="token string">'is_home_5g_cover_l02'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token string">'active_days19'</span><span class="token punctuation">,</span> <span class="token string">'area_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token string">'is_work_5g_cover_l01'</span><span class="token punctuation">,</span> <span class="token string">'area_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'product_type'</span><span class="token punctuation">,</span> <span class="token string">'active_days01'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> feat1<span class="token punctuation">,</span> feat2 <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>feat_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_fee'</span><span class="token punctuation">,</span> <span class="token string">'total_flux'</span><span class="token punctuation">,</span> <span class="token string">'pay_fee'</span><span class="token punctuation">,</span> <span class="token string">'re_call10'</span><span class="token punctuation">,</span>                <span class="token string">'bank_cnt'</span><span class="token punctuation">,</span> <span class="token string">'total_times'</span><span class="token punctuation">,</span> <span class="token string">'video_app_flux'</span><span class="token punctuation">,</span>                <span class="token string">'live_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'game_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'call_days'</span><span class="token punctuation">,</span>                <span class="token string">'short_call10'</span><span class="token punctuation">,</span> <span class="token string">'long_call10'</span><span class="token punctuation">,</span> <span class="token string">'call_sum'</span><span class="token punctuation">,</span>                <span class="token string">'innet_months'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>        <span class="token keyword">if</span> feat1 <span class="token keyword">not</span> <span class="token keyword">in</span> num_cols <span class="token keyword">and</span> feat2 <span class="token keyword">not</span> <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>            colname1 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat1<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat2<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_mean"</span></span>            colname2 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat1<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat2<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_median"</span></span>            feat <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat1<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat2<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>            train<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            train<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            train<span class="token punctuation">[</span>feat<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>feat1<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>                <span class="token string">'str'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> train<span class="token punctuation">[</span>feat2<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat1<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>                <span class="token string">'str'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> test<span class="token punctuation">[</span>feat2<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train<span class="token punctuation">,</span> train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                trn_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">,</span> f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                val_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>values                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>values            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>                train<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>                test<span class="token punctuation">[</span><span class="token punctuation">[</span>colname1<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token keyword">del</span> train<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span>            gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>train <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>train<span class="token punctuation">)</span>test <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 减少内存</span><span class="token keyword">def</span> <span class="token function">reduce_mem</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    start_mem <span class="token operator">=</span> df<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        col_type <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>dtypes        <span class="token keyword">if</span> col_type <span class="token operator">!=</span> <span class="token builtin">object</span><span class="token punctuation">:</span>            c_min <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            c_max <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>col_type<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'int'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>                        np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>                        np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int16<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>                        np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>iinfo<span class="token punctuation">(</span>                        np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>                        np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float16<span class="token punctuation">)</span>                <span class="token keyword">elif</span> c_min <span class="token operator">></span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">min</span> <span class="token keyword">and</span> c_max <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>                        np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    end_mem <span class="token operator">=</span> df<span class="token punctuation">.</span>memory_usage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;:.2f&#125; Mb, &#123;:.2f&#125; Mb (&#123;:.2f&#125; %)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>        start_mem<span class="token punctuation">,</span> end_mem<span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>start_mem <span class="token operator">-</span> end_mem<span class="token punctuation">)</span> <span class="token operator">/</span> start_mem<span class="token punctuation">)</span><span class="token punctuation">)</span>    gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment"># 设置展示行数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'is_5g'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span><span class="token punctuation">[</span>each <span class="token keyword">for</span> each <span class="token keyword">in</span> allDiffer <span class="token keyword">if</span> each <span class="token operator">&lt;</span><span class="token number">1e7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> histtype<span class="token operator">=</span><span class="token string">'stepfilled'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> edgecolor<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"abs(entries Num - exits num)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Proportion'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MeanEncoder</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> StratifiedKFold<span class="token keyword">from</span> itertools <span class="token keyword">import</span> product<span class="token keyword">class</span> <span class="token class-name">MeanEncoder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> categorical_features<span class="token punctuation">,</span> n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> target_type<span class="token operator">=</span><span class="token string">'classification'</span><span class="token punctuation">,</span> prior_weight_func<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param categorical_features: list of str, the name of the categorical columns to encode        :param n_splits: the number of splits used in mean encoding        :param target_type: str, 'regression' or 'classification'        :param prior_weight_func:        a function that takes in the number of observations, and outputs prior weight        when a dict is passed, the default exponential decay function will be used:        k: the number of observations needed for the posterior to be weighted equally as the prior        f: larger f --> smaller slope        """</span>        self<span class="token punctuation">.</span>categorical_features <span class="token operator">=</span> categorical_features        self<span class="token punctuation">.</span>n_splits <span class="token operator">=</span> n_splits        self<span class="token punctuation">.</span>learned_stats <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> target_type <span class="token operator">==</span> <span class="token string">'classification'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>target_type <span class="token operator">=</span> target_type            self<span class="token punctuation">.</span>target_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>target_type <span class="token operator">=</span> <span class="token string">'regression'</span>            self<span class="token punctuation">.</span>target_values <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>prior_weight_func<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>prior_weight_func <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">'lambda x: 1 / (1 + np.exp((x - k) / f))'</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>prior_weight_func<span class="token punctuation">,</span> np<span class="token operator">=</span>np<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token builtin">callable</span><span class="token punctuation">(</span>prior_weight_func<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>prior_weight_func <span class="token operator">=</span> prior_weight_func        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>prior_weight_func <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">mean_encode_subroutine</span><span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> variable<span class="token punctuation">,</span> target<span class="token punctuation">,</span> prior_weight_func<span class="token punctuation">)</span><span class="token punctuation">:</span>        X_train <span class="token operator">=</span> X_train<span class="token punctuation">[</span><span class="token punctuation">[</span>variable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        X_test <span class="token operator">=</span> X_test<span class="token punctuation">[</span><span class="token punctuation">[</span>variable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> target <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            nf_name <span class="token operator">=</span> <span class="token string">'&#123;&#125;_pred_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">,</span> target<span class="token punctuation">)</span>            X_train<span class="token punctuation">[</span><span class="token string">'pred_temp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y_train <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token comment"># classification</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            nf_name <span class="token operator">=</span> <span class="token string">'&#123;&#125;_pred'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>            X_train<span class="token punctuation">[</span><span class="token string">'pred_temp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_train  <span class="token comment"># regression</span>        prior <span class="token operator">=</span> X_train<span class="token punctuation">[</span><span class="token string">'pred_temp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        col_avg_y <span class="token operator">=</span> X_train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span>variable<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'pred_temp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'mean'</span><span class="token punctuation">:</span> <span class="token string">'mean'</span><span class="token punctuation">,</span> <span class="token string">'beta'</span><span class="token punctuation">:</span> <span class="token string">'size'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        col_avg_y<span class="token punctuation">[</span><span class="token string">'beta'</span><span class="token punctuation">]</span> <span class="token operator">=</span> prior_weight_func<span class="token punctuation">(</span>col_avg_y<span class="token punctuation">[</span><span class="token string">'beta'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        col_avg_y<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span> <span class="token operator">=</span> col_avg_y<span class="token punctuation">[</span><span class="token string">'beta'</span><span class="token punctuation">]</span> <span class="token operator">*</span> prior <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> col_avg_y<span class="token punctuation">[</span><span class="token string">'beta'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> col_avg_y<span class="token punctuation">[</span><span class="token string">'mean'</span><span class="token punctuation">]</span>        col_avg_y<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'beta'</span><span class="token punctuation">,</span> <span class="token string">'mean'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        nf_train <span class="token operator">=</span> X_train<span class="token punctuation">.</span>join<span class="token punctuation">(</span>col_avg_y<span class="token punctuation">,</span> on<span class="token operator">=</span>variable<span class="token punctuation">)</span><span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span><span class="token punctuation">.</span>values        nf_test <span class="token operator">=</span> X_test<span class="token punctuation">.</span>join<span class="token punctuation">(</span>col_avg_y<span class="token punctuation">,</span> on<span class="token operator">=</span>variable<span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>prior<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span><span class="token punctuation">.</span>values        <span class="token keyword">return</span> nf_train<span class="token punctuation">,</span> nf_test<span class="token punctuation">,</span> prior<span class="token punctuation">,</span> col_avg_y    <span class="token keyword">def</span> <span class="token function">fit_transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param X: pandas DataFrame, n_samples * n_features        :param y: pandas Series or numpy array, n_samples        :return X_new: the transformed pandas DataFrame containing mean-encoded categorical features        """</span>        X_new <span class="token operator">=</span> X<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>target_type <span class="token operator">==</span> <span class="token string">'classification'</span><span class="token punctuation">:</span>            skf <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_splits<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            skf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_splits<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>target_type <span class="token operator">==</span> <span class="token string">'classification'</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>target_values <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>learned_stats <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'&#123;&#125;_pred_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> variable<span class="token punctuation">,</span> target <span class="token keyword">in</span>                                  product<span class="token punctuation">(</span>self<span class="token punctuation">.</span>categorical_features<span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_values<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> variable<span class="token punctuation">,</span> target <span class="token keyword">in</span> product<span class="token punctuation">(</span>self<span class="token punctuation">.</span>categorical_features<span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_values<span class="token punctuation">)</span><span class="token punctuation">:</span>                nf_name <span class="token operator">=</span> <span class="token string">'&#123;&#125;_pred_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">,</span> target<span class="token punctuation">)</span>                X_new<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> nf_name<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan                <span class="token keyword">for</span> large_ind<span class="token punctuation">,</span> small_ind <span class="token keyword">in</span> skf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>                    nf_large<span class="token punctuation">,</span> nf_small<span class="token punctuation">,</span> prior<span class="token punctuation">,</span> col_avg_y <span class="token operator">=</span> MeanEncoder<span class="token punctuation">.</span>mean_encode_subroutine<span class="token punctuation">(</span>                        X_new<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>large_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>large_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> X_new<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>small_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> variable<span class="token punctuation">,</span> target<span class="token punctuation">,</span> self<span class="token punctuation">.</span>prior_weight_func<span class="token punctuation">)</span>                    X_new<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>small_ind<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nf_small                    self<span class="token punctuation">.</span>learned_stats<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>prior<span class="token punctuation">,</span> col_avg_y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>learned_stats <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'&#123;&#125;_pred'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> variable <span class="token keyword">in</span> self<span class="token punctuation">.</span>categorical_features<span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> variable <span class="token keyword">in</span> self<span class="token punctuation">.</span>categorical_features<span class="token punctuation">:</span>                nf_name <span class="token operator">=</span> <span class="token string">'&#123;&#125;_pred'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>                X_new<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> nf_name<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan                <span class="token keyword">for</span> large_ind<span class="token punctuation">,</span> small_ind <span class="token keyword">in</span> skf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>                    nf_large<span class="token punctuation">,</span> nf_small<span class="token punctuation">,</span> prior<span class="token punctuation">,</span> col_avg_y <span class="token operator">=</span> MeanEncoder<span class="token punctuation">.</span>mean_encode_subroutine<span class="token punctuation">(</span>                        X_new<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>large_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>large_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> X_new<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>small_ind<span class="token punctuation">]</span><span class="token punctuation">,</span> variable<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>prior_weight_func<span class="token punctuation">)</span>                    X_new<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>small_ind<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nf_small                    self<span class="token punctuation">.</span>learned_stats<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>prior<span class="token punctuation">,</span> col_avg_y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> X_new    <span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param X: pandas DataFrame, n_samples * n_features        :return X_new: the transformed pandas DataFrame containing mean-encoded categorical features        """</span>        X_new <span class="token operator">=</span> X<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>target_type <span class="token operator">==</span> <span class="token string">'classification'</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> variable<span class="token punctuation">,</span> target <span class="token keyword">in</span> product<span class="token punctuation">(</span>self<span class="token punctuation">.</span>categorical_features<span class="token punctuation">,</span> self<span class="token punctuation">.</span>target_values<span class="token punctuation">)</span><span class="token punctuation">:</span>                nf_name <span class="token operator">=</span> <span class="token string">'&#123;&#125;_pred_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">,</span> target<span class="token punctuation">)</span>                X_new<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> prior<span class="token punctuation">,</span> col_avg_y <span class="token keyword">in</span> self<span class="token punctuation">.</span>learned_stats<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span><span class="token punctuation">:</span>                    X_new<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span> <span class="token operator">+=</span> X_new<span class="token punctuation">[</span><span class="token punctuation">[</span>variable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>col_avg_y<span class="token punctuation">,</span> on<span class="token operator">=</span>variable<span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>prior<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>                        nf_name<span class="token punctuation">]</span>                X_new<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span> <span class="token operator">/=</span> self<span class="token punctuation">.</span>n_splits        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> variable <span class="token keyword">in</span> self<span class="token punctuation">.</span>categorical_features<span class="token punctuation">:</span>                nf_name <span class="token operator">=</span> <span class="token string">'&#123;&#125;_pred'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>                X_new<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> prior<span class="token punctuation">,</span> col_avg_y <span class="token keyword">in</span> self<span class="token punctuation">.</span>learned_stats<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span><span class="token punctuation">:</span>                    X_new<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span> <span class="token operator">+=</span> X_new<span class="token punctuation">[</span><span class="token punctuation">[</span>variable<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>col_avg_y<span class="token punctuation">,</span> on<span class="token operator">=</span>variable<span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>prior<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>                        nf_name<span class="token punctuation">]</span>                X_new<span class="token punctuation">[</span>nf_name<span class="token punctuation">]</span> <span class="token operator">/=</span> self<span class="token punctuation">.</span>n_splits        <span class="token keyword">return</span> X_new<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对时间的操作</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data<span class="token punctuation">[</span><span class="token string">'date_time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train_data<span class="token punctuation">[</span><span class="token string">'date_hours'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'date_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%H'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train_data<span class="token punctuation">[</span><span class="token string">'date_week_hours'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'date_time'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%d-%H'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>xgbclass</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBClassifiern_estimators <span class="token operator">=</span> <span class="token number">1282</span>depth <span class="token operator">=</span> <span class="token number">8</span>modeln1 <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>                          n_estimators<span class="token operator">=</span>n_estimators<span class="token punctuation">,</span>           <span class="token comment"># 树的个数-10棵树建立xgboost</span>                          max_depth<span class="token operator">=</span>depth<span class="token punctuation">,</span>               <span class="token comment"># 树的深度</span>                          min_child_weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token comment"># 叶子节点最小权重</span>                          gamma<span class="token operator">=</span><span class="token number">0.</span><span class="token punctuation">,</span>                  <span class="token comment"># 惩罚项中叶子结点个数前的参数</span>                          subsample<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>               <span class="token comment"># 所有样本建立决策树</span>                          colsample_btree<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>         <span class="token comment"># 所有特征建立决策树</span>                          scale_pos_weight<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token comment"># 解决样本个数不平衡的问题</span>                          random_state<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">,</span>           <span class="token comment"># 随机数</span>                          slient <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>                          nthread <span class="token operator">=</span> <span class="token number">7</span>                          <span class="token punctuation">)</span>modeln1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span>new_feature<span class="token punctuation">]</span><span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>score <span class="token operator">=</span> modeln1<span class="token punctuation">.</span>score<span class="token punctuation">(</span>test<span class="token punctuation">[</span>new_feature<span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>auc_score <span class="token operator">=</span> roc_auc_score<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> modeln1<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>test<span class="token punctuation">[</span>new_feature<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>n_estimators<span class="token punctuation">,</span> depth<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> auc_score<span class="token punctuation">)</span>model3 <span class="token operator">=</span> XGBClassifier<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>                        n_estimators<span class="token operator">=</span><span class="token number">1145</span><span class="token punctuation">,</span>                         max_depth<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                         min_child_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                         gamma<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                         subsample<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>                         colsample_bytree<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span>                         scale_pos_weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                         max_delta_step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                        reg_alpha<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                        reg_lambda<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                        objective<span class="token operator">=</span> <span class="token string">'binary:logistic'</span><span class="token punctuation">,</span>                        seed<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">,</span>                        nthread<span class="token operator">=</span><span class="token number">7</span>                  <span class="token punctuation">)</span>model3<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train<span class="token punctuation">[</span>features<span class="token punctuation">]</span><span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>score <span class="token operator">=</span> model3<span class="token punctuation">.</span>score<span class="token punctuation">(</span>test<span class="token punctuation">[</span>features<span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>auc_score <span class="token operator">=</span> roc_auc_score<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> model3<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>test<span class="token punctuation">[</span>features<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>subsample<span class="token punctuation">,</span> colsample_bytree<span class="token punctuation">,</span>lr<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> auc_score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>lgb try</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgbX_train <span class="token operator">=</span> train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>valuesX_test <span class="token operator">=</span> test<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>valueskf <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">2019</span><span class="token punctuation">)</span>cv_score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>X_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lgb_pred <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> idx<span class="token punctuation">,</span><span class="token punctuation">(</span>train_idx<span class="token punctuation">,</span>test_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'iter&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    X_tr<span class="token punctuation">,</span>y_tr <span class="token operator">=</span> X_train<span class="token punctuation">[</span>train_idx<span class="token punctuation">]</span><span class="token punctuation">,</span>y_train<span class="token punctuation">[</span>train_idx<span class="token punctuation">]</span>    X_te<span class="token punctuation">,</span>y_te <span class="token operator">=</span> X_train<span class="token punctuation">[</span>test_idx<span class="token punctuation">]</span><span class="token punctuation">,</span>y_train<span class="token punctuation">[</span>test_idx<span class="token punctuation">]</span>    dtrain <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_tr<span class="token punctuation">,</span>label<span class="token operator">=</span>y_tr<span class="token punctuation">)</span>    dvalid <span class="token operator">=</span> lgb<span class="token punctuation">.</span>Dataset<span class="token punctuation">(</span>X_te<span class="token punctuation">,</span> label<span class="token operator">=</span>y_te<span class="token punctuation">)</span>    bst <span class="token operator">=</span> lgb<span class="token punctuation">.</span>train<span class="token punctuation">(</span>lgb_param<span class="token punctuation">,</span>dtrain<span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">,</span>valid_sets<span class="token operator">=</span>dvalid<span class="token punctuation">,</span>                    early_stopping_rounds<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span>verbose_eval<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    preds <span class="token operator">=</span> bst<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_te<span class="token punctuation">,</span>num_iteration<span class="token operator">=</span>bst<span class="token punctuation">.</span>best_iteration<span class="token punctuation">)</span><span class="token comment">## 来源， 对heart_Ai研习社</span>    dfFeature <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>    dfFeature<span class="token punctuation">[</span><span class="token string">'featureName'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>columns    dfFeature<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bst<span class="token punctuation">.</span>feature_importance<span class="token punctuation">(</span><span class="token punctuation">)</span>    dfFeature <span class="token operator">=</span> dfFeature<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'score'</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    dfFeature<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'featureImportance.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dfFeature<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>暴力特征</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> combinations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_df<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">+</span> train_df<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">/</span> train_df<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'*'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> train_df<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/log'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>log1p<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>训练轮子</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run_oof</span><span class="token punctuation">(</span>clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> kf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>clf<span class="token punctuation">)</span>    preds_train <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>    preds_test <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>    train_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> test_loss <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> train_index<span class="token punctuation">,</span> test_index <span class="token keyword">in</span> kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">:</span>        x_tr <span class="token operator">=</span> X_train<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">;</span> x_te <span class="token operator">=</span> X_train<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>        y_tr <span class="token operator">=</span> y_train<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">;</span> y_te <span class="token operator">=</span> y_train<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>        clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_tr<span class="token punctuation">,</span> y_tr<span class="token punctuation">,</span> eval_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x_te<span class="token punctuation">,</span> y_te<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> early_stopping_rounds <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">,</span> verbose <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment"># train_loss.append(eval_fun(y_tr, clf.predict_proba(x_tr)[:]))</span>        <span class="token comment"># test_loss.append(eval_fun(y_te, clf.predict_proba(x_te)[:]))</span>        preds_train<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span> <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>x_te<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        preds_test <span class="token operator">+=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># print('&#123;0&#125;: Train &#123;1:0.7f&#125; Val &#123;2:0.7f&#125;/&#123;3:0.7f&#125;'.format(i, train_loss[-1], test_loss[-1], np.mean(test_loss)))</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train: '</span><span class="token punctuation">,</span> train_loss<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Val: '</span><span class="token punctuation">,</span> test_loss<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment"># print('Train&#123;0:0.5f&#125;_Test&#123;1:0.5f&#125;\n\n'.format(np.mean(train_loss), np.mean(test_loss)))</span>    preds_test <span class="token operator">/=</span> n_fold    <span class="token keyword">return</span> preds_train<span class="token punctuation">,</span> preds_testparams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'learning_rate'</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span>    <span class="token string">'min_child_samples'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">'lambda_l1'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token string">'boosting'</span><span class="token punctuation">:</span> <span class="token string">'gbdt'</span><span class="token punctuation">,</span>    <span class="token string">'objective'</span><span class="token punctuation">:</span> <span class="token string">'multiclass'</span><span class="token punctuation">,</span>    <span class="token string">'n_estimators'</span><span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token string">'metric'</span><span class="token punctuation">:</span> <span class="token string">'multi_error'</span><span class="token punctuation">,</span>    <span class="token string">'num_class'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>    <span class="token string">'feature_fraction'</span><span class="token punctuation">:</span> <span class="token number">.75</span><span class="token punctuation">,</span>    <span class="token string">'bagging_fraction'</span><span class="token punctuation">:</span> <span class="token number">.85</span><span class="token punctuation">,</span>    <span class="token string">'seed'</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span>    <span class="token string">'num_threads'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'verbose'</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span>train_pred<span class="token punctuation">,</span> test_pred <span class="token operator">=</span> run_oof<span class="token punctuation">(</span>lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>                                 train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span>                                 train_df<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span>                                 test_df<span class="token punctuation">.</span>values<span class="token punctuation">,</span>                                 skf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>电信数据之emb</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sentences <span class="token operator">=</span> df<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>emb_size <span class="token operator">=</span> <span class="token number">8</span>model <span class="token operator">=</span> Word2Vec<span class="token punctuation">(</span>sentences<span class="token punctuation">,</span> size<span class="token operator">=</span>emb_size<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                 min_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> sg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> hs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">2020</span><span class="token punctuation">)</span>emb_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> seq <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>    vec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> seq<span class="token punctuation">:</span>        <span class="token keyword">if</span> w <span class="token keyword">in</span> model<span class="token punctuation">:</span>            vec<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        emb_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>vec<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        emb_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> emb_size<span class="token punctuation">)</span>emb_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>emb_matrix<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>emb_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'active_days_emb_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> emb_matrix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>temp <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df<span class="token punctuation">,</span> temp<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>电信比赛训练头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFold<span class="token punctuation">,</span> StratifiedKFold<span class="token keyword">from</span> lightgbm<span class="token punctuation">.</span>sklearn <span class="token keyword">import</span> LGBMClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> roc_auc_score<span class="token punctuation">,</span> f1_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> category_encoders <span class="token keyword">import</span> CatBoostEncoder<span class="token punctuation">,</span> TargetEncoder<span class="token punctuation">,</span> LeaveOneOutEncoder<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> entropy<span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models <span class="token keyword">import</span> Word2Vec<span class="token keyword">import</span> time<span class="token keyword">import</span> gc<span class="token keyword">import</span> warnings<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmwarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练轮子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"================ train ================"</span><span class="token punctuation">)</span>fea_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>best_auc <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># val_pred = None</span>train_proba <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>predict_proba <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>test_set<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kfold <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> fold<span class="token punctuation">,</span> <span class="token punctuation">(</span>train_index<span class="token punctuation">,</span> val_index<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kfold<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"**** fold </span><span class="token interpolation"><span class="token punctuation">&#123;</span>fold <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> ****"</span></span><span class="token punctuation">)</span>    fea_imp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    clf <span class="token operator">=</span> LGBMClassifier<span class="token punctuation">(</span>        learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>        n_estimators<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span>        num_leaves<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span>        subsample<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>        colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>        lambda_l1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        lambda_l2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        metric<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        n_jobs<span class="token operator">=</span><span class="token number">7</span>    <span class="token punctuation">)</span>    clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>        train_set<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span>        label<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span>        eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        eval_metric<span class="token operator">=</span><span class="token string">"auc"</span><span class="token punctuation">,</span>        early_stopping_rounds<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>        verbose<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    predict_proba <span class="token operator">+=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>test_set<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> kfold<span class="token punctuation">.</span>n_splits    <span class="token comment">#######################</span>    val_proba <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    train_proba<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span> <span class="token operator">=</span> val_proba    <span class="token comment">#######################</span>    fea_imp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clf<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">)</span>    fea_imp_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>        <span class="token builtin">zip</span><span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>fea_imp_list<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fea_imp_item <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>fea_imp_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    fea_dict<span class="token punctuation">[</span>fold<span class="token punctuation">]</span> <span class="token operator">=</span> fea_imp_item    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"fold: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>fold <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">, runtime: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>    <span class="token comment"># gc.collect()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"=============== runtime: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">&#125;</span></span><span class="token string"> ================"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"======================== thershold search ======================"</span><span class="token punctuation">)</span>t0 <span class="token operator">=</span> <span class="token number">0.05</span>v <span class="token operator">=</span> <span class="token number">0.02</span>best_t <span class="token operator">=</span> t0best_f1 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> step <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cur_t <span class="token operator">=</span> t0 <span class="token operator">+</span> step <span class="token operator">*</span> v    y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> x <span class="token operator">></span> cur_t <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> train_proba<span class="token punctuation">]</span>    cur_f1 <span class="token operator">=</span> f1_score<span class="token punctuation">(</span>label<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">if</span> cur_f1 <span class="token operator">></span> best_f1<span class="token punctuation">:</span>        best_t <span class="token operator">=</span> cur_t        best_f1 <span class="token operator">=</span> cur_f1        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"step:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>step<span class="token punctuation">&#125;</span></span><span class="token string"> best thershold: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>best_t<span class="token punctuation">&#125;</span></span><span class="token string"> best f1: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>best_f1<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"search finish"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best f1:"</span><span class="token punctuation">,</span> best_f1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"runtime:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>f1 阈值搜索</p><p>暴力交叉特征</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cross_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'prov_id'</span><span class="token punctuation">,</span> <span class="token string">'area_id'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'innet_months'</span><span class="token punctuation">,</span>              <span class="token string">'product_type'</span><span class="token punctuation">,</span> <span class="token string">'service_type'</span><span class="token punctuation">,</span> <span class="token string">'chnl_type'</span><span class="token punctuation">,</span>              <span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'is_act_expire'</span><span class="token punctuation">,</span> <span class="token string">'city_level'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token keyword">for</span> f <span class="token keyword">in</span> cross_cols<span class="token punctuation">:</span>    <span class="token keyword">if</span> f <span class="token keyword">in</span> count_cols<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> f <span class="token keyword">in</span> cross_cols<span class="token punctuation">:</span>    <span class="token keyword">for</span> col <span class="token keyword">in</span> cross_cols<span class="token punctuation">:</span>        <span class="token keyword">if</span> col <span class="token operator">==</span> f<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------ &#123;&#125; &#123;&#125; ------------------'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">)</span>        df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> col<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>f<span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>                      <span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_nunique'</span></span><span class="token punctuation">:</span> <span class="token string">'nunique'</span><span class="token punctuation">,</span>  <span class="token comment"># 熵</span>                            <span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_ent'</span></span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> entropy<span class="token punctuation">(</span>x<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_count'</span></span> <span class="token keyword">not</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values <span class="token keyword">and</span> <span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_count'</span></span> <span class="token keyword">not</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">:</span>            df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> col<span class="token punctuation">,</span> <span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> col<span class="token punctuation">]</span><span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_count'</span></span><span class="token punctuation">:</span> <span class="token string">'count'</span>  <span class="token comment"># 共现次数</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> col<span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_count_ratio'</span></span> <span class="token keyword">not</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">:</span>            <span class="token comment"># 比例偏好</span>            df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_count_ratio'</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_count'</span></span><span class="token punctuation">]</span> <span class="token operator">/</span> \                df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_count_ratio'</span></span> <span class="token keyword">not</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">:</span>            df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_count_ratio'</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_count'</span></span><span class="token punctuation">]</span> <span class="token operator">/</span> \                df<span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span>  <span class="token comment"># 比例偏好</span>        df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_nunique_ratio_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_count'</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'cross_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>col<span class="token punctuation">&#125;</span></span><span class="token string">_nunique'</span></span><span class="token punctuation">]</span> <span class="token operator">/</span> df<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">'_count'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>emb</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'================ embedding ==============='</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">emb</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">:</span>    emb_size <span class="token operator">=</span> <span class="token number">8</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'******* &#123;&#125; &#123;&#125; *******'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>f1<span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f2<span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>        <span class="token punctuation">&#123;</span><span class="token string">'&#123;&#125;_&#123;&#125;_list'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    sentences <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_list'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">del</span> tmp<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_list'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sentences<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sentences<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> sentences<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    model <span class="token operator">=</span> Word2Vec<span class="token punctuation">(</span>sentences<span class="token punctuation">,</span> size<span class="token operator">=</span>emb_size<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                     min_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> sg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> hs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">2019</span><span class="token punctuation">)</span>    emb_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> seq <span class="token keyword">in</span> sentences<span class="token punctuation">:</span>        vec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> seq<span class="token punctuation">:</span>            <span class="token keyword">if</span> w <span class="token keyword">in</span> model<span class="token punctuation">:</span>                vec<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            emb_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>vec<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            emb_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> emb_size<span class="token punctuation">)</span>    emb_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>emb_matrix<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>emb_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp<span class="token punctuation">[</span><span class="token string">'&#123;&#125;_&#123;&#125;_emb_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> emb_matrix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>    <span class="token keyword">del</span> model<span class="token punctuation">,</span> emb_matrix<span class="token punctuation">,</span> sentences    tmp <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runtime:'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">)</span>    <span class="token keyword">return</span> tmpemb_cols <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'city_5g_ratio'</span><span class="token punctuation">,</span> <span class="token string">'city_level'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'prov_id'</span><span class="token punctuation">,</span> <span class="token string">'area_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'innet_months'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'is_home_5g_cover'</span><span class="token punctuation">,</span> <span class="token string">'is_work_5g_cover'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'is_5g_base_cover'</span><span class="token punctuation">,</span> <span class="token string">'city_5g_ratio'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">for</span> f1<span class="token punctuation">,</span> f2 <span class="token keyword">in</span> emb_cols<span class="token punctuation">:</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>emb<span class="token punctuation">(</span>df<span class="token punctuation">,</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span>f1<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>emb<span class="token punctuation">(</span>df<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token punctuation">,</span> on<span class="token operator">=</span>f2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> f <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>target_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    train<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    test<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train<span class="token punctuation">,</span> train<span class="token punctuation">[</span><span class="token string">"is_5g"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        trn_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">,</span> <span class="token string">"is_5g"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        val_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        enc_df <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>f<span class="token punctuation">,</span> as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"is_5g"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>            <span class="token punctuation">&#123;</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">:</span> <span class="token string">"mean"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        val_x <span class="token operator">=</span> val_x<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>enc_df<span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">"left"</span><span class="token punctuation">)</span>        test_x <span class="token operator">=</span> test<span class="token punctuation">[</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>merge<span class="token punctuation">(</span>enc_df<span class="token punctuation">,</span> on<span class="token operator">=</span>f<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">"left"</span><span class="token punctuation">)</span>        val_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>            train<span class="token punctuation">[</span><span class="token string">"is_5g"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        test_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>            train<span class="token punctuation">[</span><span class="token string">"is_5g"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values        test<span class="token punctuation">[</span>f <span class="token operator">+</span>             <span class="token string">"_target_enc"</span><span class="token punctuation">]</span> <span class="token operator">+=</span> test_x<span class="token punctuation">[</span>f <span class="token operator">+</span> <span class="token string">"_target_enc"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values <span class="token operator">/</span> kf<span class="token punctuation">.</span>n_splits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>target encoder</strong> </p><p><strong>训练轮子</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"================ train ================"</span><span class="token punctuation">)</span>fea_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>best_auc <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># val_pred = None</span>train_proba <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>predict_proba <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>test_set<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>kfold <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> fold<span class="token punctuation">,</span> <span class="token punctuation">(</span>train_index<span class="token punctuation">,</span> val_index<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kfold<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"**** fold </span><span class="token interpolation"><span class="token punctuation">&#123;</span>fold <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string"> ****"</span></span><span class="token punctuation">)</span>    fea_imp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    clf <span class="token operator">=</span> LGBMClassifier<span class="token punctuation">(</span>        learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>        n_estimators<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span>        num_leaves<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span>        subsample<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>        colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>        lambda_l1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        lambda_l2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        metric<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        n_jobs<span class="token operator">=</span><span class="token number">7</span>    <span class="token punctuation">)</span>    clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>        train_set<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span>        label<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span>        eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        eval_metric<span class="token operator">=</span><span class="token string">"auc"</span><span class="token punctuation">,</span>        early_stopping_rounds<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span>        verbose<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    predict_proba <span class="token operator">+=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>test_set<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> kfold<span class="token punctuation">.</span>n_splits    <span class="token comment">#######################</span>    val_proba <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    train_proba<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span> <span class="token operator">=</span> val_proba    <span class="token comment">#######################</span>    fea_imp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>clf<span class="token punctuation">.</span>feature_importances_<span class="token punctuation">)</span>    fea_imp_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>        <span class="token builtin">zip</span><span class="token punctuation">(</span>train_set<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>values<span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>fea_imp_list<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fea_imp_item <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>fea_imp_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    fea_dict<span class="token punctuation">[</span>fold<span class="token punctuation">]</span> <span class="token operator">=</span> fea_imp_item    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"fold: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>fold <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">, runtime: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>    <span class="token comment"># gc.collect()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"=============== runtime: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">&#125;</span></span><span class="token string"> ================"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>五折目标编码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">feat_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"prov_id"</span><span class="token punctuation">,</span> <span class="token string">"area_id"</span><span class="token punctuation">,</span> <span class="token string">"chnl_type"</span><span class="token punctuation">,</span> <span class="token string">"service_type"</span><span class="token punctuation">,</span>             <span class="token string">"product_type"</span><span class="token punctuation">,</span> <span class="token string">"manu_name"</span><span class="token punctuation">,</span> <span class="token string">"term_type"</span><span class="token punctuation">,</span>  <span class="token string">"max_rat_flag"</span><span class="token punctuation">,</span>             <span class="token string">"activity_type"</span><span class="token punctuation">,</span>  <span class="token string">"comp_type"</span><span class="token punctuation">,</span>  <span class="token string">"city_level"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token keyword">for</span> feat <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>feat_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_fee'</span><span class="token punctuation">,</span> <span class="token string">'total_flux'</span><span class="token punctuation">,</span> <span class="token string">'pay_fee'</span><span class="token punctuation">,</span> <span class="token string">'re_call10'</span><span class="token punctuation">,</span>                <span class="token string">'bank_cnt'</span><span class="token punctuation">,</span> <span class="token string">'total_times'</span><span class="token punctuation">,</span> <span class="token string">'video_app_flux'</span><span class="token punctuation">,</span>                <span class="token string">'live_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'game_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'call_days'</span><span class="token punctuation">,</span>                <span class="token string">'short_call10'</span><span class="token punctuation">,</span> <span class="token string">'long_call10'</span><span class="token punctuation">,</span> <span class="token string">'call_sum'</span><span class="token punctuation">,</span>                <span class="token string">'speical_flux_sum'</span><span class="token punctuation">,</span> <span class="token string">'innet_months'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>        <span class="token keyword">if</span> feat <span class="token keyword">not</span> <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>            colname1 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_mean"</span></span>            colname2 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_median"</span></span>            train<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            train<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train<span class="token punctuation">,</span> train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                trn_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">,</span> f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                val_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>values                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>values            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>feat_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"prov_id"</span><span class="token punctuation">,</span> <span class="token string">"area_id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'sex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token string">'city_level'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'activity_type'</span><span class="token punctuation">,</span> <span class="token string">'manu_name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token string">'service_type'</span><span class="token punctuation">,</span> <span class="token string">'product_type'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> feat1<span class="token punctuation">,</span> feat2 <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>feat_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_fee'</span><span class="token punctuation">,</span> <span class="token string">'total_flux'</span><span class="token punctuation">,</span> <span class="token string">'pay_fee'</span><span class="token punctuation">,</span> <span class="token string">'re_call10'</span><span class="token punctuation">,</span>                <span class="token string">'bank_cnt'</span><span class="token punctuation">,</span> <span class="token string">'total_times'</span><span class="token punctuation">,</span> <span class="token string">'video_app_flux'</span><span class="token punctuation">,</span>                <span class="token string">'live_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'game_app_flux'</span><span class="token punctuation">,</span> <span class="token string">'call_days'</span><span class="token punctuation">,</span>                <span class="token string">'short_call10'</span><span class="token punctuation">,</span> <span class="token string">'long_call10'</span><span class="token punctuation">,</span> <span class="token string">'call_sum'</span><span class="token punctuation">,</span>                <span class="token string">'speical_flux_sum'</span><span class="token punctuation">,</span> <span class="token string">'innet_months'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>        <span class="token keyword">if</span> feat1 <span class="token keyword">not</span> <span class="token keyword">in</span> num_cols <span class="token keyword">and</span> feat2 <span class="token keyword">not</span> <span class="token keyword">in</span> num_cols<span class="token punctuation">:</span>            colname1 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat1<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat2<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_mean"</span></span>            colname2 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat1<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat2<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">&#125;</span></span><span class="token string">_target_enc_median"</span></span>            feat <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat1<span class="token punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>feat2<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>            train<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            train<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            train<span class="token punctuation">[</span>feat<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>feat1<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>                <span class="token string">'str'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> train<span class="token punctuation">[</span>feat2<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat1<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>                <span class="token string">'str'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> test<span class="token punctuation">[</span>feat2<span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train<span class="token punctuation">,</span> train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                trn_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">,</span> f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                val_x <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                order_label <span class="token operator">=</span> trn_x<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>feat<span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>                val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname1<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>values                train<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> colname2<span class="token punctuation">]</span> <span class="token operator">=</span> val_x<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>values            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname1<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            order_label <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>order_label<span class="token punctuation">)</span>            test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>colname2<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">del</span> train<span class="token punctuation">[</span>feat<span class="token punctuation">]</span><span class="token punctuation">,</span> test<span class="token punctuation">[</span>feat<span class="token punctuation">]</span>            gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 坐标转换</span><span class="token keyword">def</span> <span class="token function">normal_vector</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    假设平面为 ax+by+c = z,所以平面的法向量为(a,b,-1)    利用已知的点可以构造 AX = b    其中 A = [[x1,y1,1],              [x2,y2,1],               .........]         b = [t1,t2....].T         X = [a, b, c]    -->  X = (AT*A)-1 * AT * b  # 拟合平面的公式    return: a,b,c 平均误差    """</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>A<span class="token punctuation">.</span>T<span class="token punctuation">,</span> A<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> A<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    X <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    error <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">#方差</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        error <span class="token operator">=</span> error <span class="token operator">+</span> <span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span>                  X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>                  X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>    <span class="token keyword">return</span> X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> error <span class="token operator">/</span> A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">A_b</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    构建A,b 矩阵    """</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>    A <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> A<span class="token punctuation">,</span> z<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generate_nv</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> sg<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对Dateframe中的每一个event_id进行平面拟合    """</span>    nv_matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> event_id <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>df<span class="token punctuation">.</span>event_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        temp_df <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'event_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> event_id<span class="token punctuation">)</span>                         <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>   <span class="token comment"># 选取flag==1的点</span>        <span class="token keyword">if</span> temp_df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nv_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 存在正样本的点少于3个的情况，用均值填充</span>            <span class="token keyword">continue</span>        A<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> sg<span class="token punctuation">:</span>            A<span class="token punctuation">,</span> b <span class="token operator">=</span> A_b<span class="token punctuation">(</span>temp_df<span class="token punctuation">.</span>new_x<span class="token punctuation">.</span>values<span class="token punctuation">,</span>                       temp_df<span class="token punctuation">.</span>new_y<span class="token punctuation">.</span>values<span class="token punctuation">,</span>                       temp_df<span class="token punctuation">.</span>new_z<span class="token punctuation">.</span>values<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            A<span class="token punctuation">,</span> b <span class="token operator">=</span> A_b<span class="token punctuation">(</span>temp_df<span class="token punctuation">.</span>x<span class="token punctuation">.</span>values<span class="token punctuation">,</span>                       temp_df<span class="token punctuation">.</span>y<span class="token punctuation">.</span>values<span class="token punctuation">,</span>                       temp_df<span class="token punctuation">.</span>t<span class="token punctuation">.</span>values<span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> error <span class="token operator">=</span> normal_vector<span class="token punctuation">(</span>A<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        nv_matrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> error<span class="token punctuation">]</span><span class="token punctuation">)</span>    nv_matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>nv_matrix<span class="token punctuation">)</span>    col <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> sg<span class="token punctuation">:</span>        col <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'new_a'</span><span class="token punctuation">,</span> <span class="token string">'new_b'</span><span class="token punctuation">,</span> <span class="token string">'new_c'</span><span class="token punctuation">,</span> <span class="token string">'new_error'</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        col <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'error'</span><span class="token punctuation">]</span>    nv_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nv_matrix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        col<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nv_matrix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        col<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nv_matrix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        col<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> nv_matrix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'event_id'</span><span class="token punctuation">:</span> df<span class="token punctuation">.</span>event_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>nv_df<span class="token punctuation">[</span>col<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> nv_df<span class="token keyword">def</span> <span class="token function">get_R</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    构建旋转矩阵的旋转向量，因为平面的法向量是(a,b,-1),平面所在的基向量假设为[[-a, -b, (a * a + b * b) / c],                                                                              [-b, a, 0],                                                                              [ a, b, c]]    假设旋转之后的平面垂直于z轴，并且假设旋转之后的基向量为 [[1,0,0],                                                             [0,1,0]，                                                             [0,0,1]]    可以构建旋转矩阵[[-a, -b, (a * a + b * b) / c],                     [-b, a, 0],                     [ a, b, c]]    并将其单位化    """</span>    r1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span>a<span class="token punctuation">,</span> <span class="token operator">-</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">+</span> b <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span>    r1 <span class="token operator">=</span> r1 <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    r2 <span class="token operator">=</span> r2 <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span>    r3 <span class="token operator">=</span> r3 <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">trans_coor</span><span class="token punctuation">(</span>xyt<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    旋转矩阵    """</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>R<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>xyt<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token keyword">def</span> <span class="token function">generate_coor</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> nv_df<span class="token punctuation">,</span> sg<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对每一个event_id进行旋转操作    """</span>    new_coors <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">for</span> event_id <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>df<span class="token punctuation">.</span>event_id<span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> sg<span class="token punctuation">:</span>            R <span class="token operator">=</span> get_R<span class="token punctuation">(</span>nv_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>nv_df<span class="token punctuation">[</span><span class="token string">'event_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> event_id<span class="token punctuation">,</span> <span class="token string">'new_a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       nv_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>nv_df<span class="token punctuation">[</span><span class="token string">'event_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> event_id<span class="token punctuation">,</span> <span class="token string">'new_b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            R <span class="token operator">=</span> get_R<span class="token punctuation">(</span>nv_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>nv_df<span class="token punctuation">[</span><span class="token string">'event_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> event_id<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       nv_df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>nv_df<span class="token punctuation">[</span><span class="token string">'event_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> event_id<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        temp_df <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'event_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> event_id<span class="token punctuation">]</span>        xyz <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">if</span> sg<span class="token punctuation">:</span>            xyz <span class="token operator">=</span> temp_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'new_x'</span><span class="token punctuation">,</span> <span class="token string">'new_y'</span><span class="token punctuation">,</span> <span class="token string">'new_z'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values        <span class="token keyword">else</span><span class="token punctuation">:</span>            xyz <span class="token operator">=</span> temp_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values        <span class="token keyword">if</span> new_coors <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            new_coors <span class="token operator">=</span> trans_coor<span class="token punctuation">(</span>xyz<span class="token punctuation">,</span> R<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        new_coors <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>new_coors<span class="token punctuation">,</span> trans_coor<span class="token punctuation">(</span>xyz<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    coor_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string">'new_x'</span><span class="token punctuation">:</span> new_coors<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'new_y'</span><span class="token punctuation">:</span> new_coors<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'new_z'</span><span class="token punctuation">:</span> new_coors<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> coor_df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>diff 操作</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    df<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f't_diff_last_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'event_id'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'t'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>diff<span class="token punctuation">(</span>periods<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    reduce_fea<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f't_diff_last_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>df<span class="token punctuation">[</span>reduce_fea<span class="token punctuation">]</span> <span class="token operator">=</span> reduce_mem<span class="token punctuation">(</span>df<span class="token punctuation">[</span>reduce_fea<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 比赛相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>socket传输文件</title>
      <link href="/2021/05/04/cs/socket-chuan-shu-wen-jian/"/>
      <url>/2021/05/04/cs/socket-chuan-shu-wen-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''发送文件Usage:clint.py &lt;name> [&lt;rename>]'''</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> os<span class="token punctuation">,</span>json<span class="token punctuation">,</span>sys<span class="token comment">#建立json数据，包含文件名以及大小</span><span class="token comment">#&#123;name:name,size:99999&#125;</span>date <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment"># if len(sys.argv) == 2:</span><span class="token comment">#     print(type(sys.argv[1]))</span><span class="token comment">#     name = sys.argv[1].split('\\')[-1]</span><span class="token comment">#     date['name'] = name</span><span class="token comment"># else:</span><span class="token comment">#     date['name'] = sys.argv[2]</span>date<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test.txt"</span>date<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span>jsonString <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment">#create connection</span>clint <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment"># 获取本地主机名</span>host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token comment"># 设置端口好</span>port <span class="token operator">=</span> <span class="token number">9091</span><span class="token comment"># 连接服务，指定主机和端口</span>clint<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'82.156.84.19'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># print(">>>>>>>>>")</span><span class="token comment">#发送文件属性信息</span>clint<span class="token punctuation">.</span>send<span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token comment">#接收服务端发过来的确认信息</span>clint<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token comment">#发送文件数据</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># print("????")</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> size <span class="token operator">&lt;</span> date<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        fileDate <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        clint<span class="token punctuation">.</span>send<span class="token punctuation">(</span>fileDate<span class="token punctuation">)</span>        size <span class="token operator">+=</span> <span class="token number">1024</span><span class="token comment">#关闭连接</span>clint<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># server.py</span><span class="token keyword">import</span> socket<span class="token punctuation">,</span>sys<span class="token keyword">import</span> json<span class="token punctuation">,</span>os<span class="token comment">#创建socket对象</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment">#获取本地主机名</span>host <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#设置端口号</span>port <span class="token operator">=</span> <span class="token number">80</span><span class="token comment">#绑定端口</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#设置最大连接数</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">#建立连接</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始监听'</span><span class="token punctuation">)</span>    <span class="token comment">#建立客户端连接</span>    clint<span class="token punctuation">,</span>addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"连接地址: %s"</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#接收文件属性数据,创建文件</span>    jsonObj <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>clint<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'接收到数据'</span><span class="token punctuation">,</span>jsonObj<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> jsonObj <span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mknod<span class="token punctuation">(</span>jsonObj<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    msg <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'消息'</span><span class="token punctuation">,</span><span class="token string">'信号'</span><span class="token punctuation">:</span><span class="token string">'创建成功'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">#回数据确认已经建立新文件</span>    clint<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#接收数据</span>    size <span class="token operator">=</span> <span class="token number">0</span>    sizeValue <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始接收数据'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>jsonObj<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> size <span class="token operator">&lt;</span> sizeValue<span class="token punctuation">:</span>            value <span class="token operator">=</span> sizeValue <span class="token operator">-</span> size            <span class="token keyword">if</span> value <span class="token operator">></span><span class="token number">1024</span><span class="token punctuation">:</span>                getdate <span class="token operator">=</span> clint<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                getdate <span class="token operator">=</span> clint<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>getdate<span class="token punctuation">)</span>            size <span class="token operator">+=</span> <span class="token number">1024</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束'</span><span class="token punctuation">)</span>    <span class="token comment">#关闭连接</span>    clint<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些日常问题</title>
      <link href="/2021/05/04/cs/yi-xie-ri-chang-wen-ti/"/>
      <url>/2021/05/04/cs/yi-xie-ri-chang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h4 id="腾讯云socket通信错误，原因IP"><a href="#腾讯云socket通信错误，原因IP" class="headerlink" title="腾讯云socket通信错误，原因IP"></a>腾讯云socket通信错误，原因IP</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># server.py</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> time HOST <span class="token operator">=</span> <span class="token string">'172.17.xx.xx'</span>  <span class="token comment">#服务器的私网IP</span><span class="token comment">#HOST = 'localhost'</span>PORT <span class="token operator">=</span> <span class="token number">8001</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>  sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>  sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      connection<span class="token punctuation">,</span>address <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          connection<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>          buf <span class="token operator">=</span> connection<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> buf<span class="token punctuation">:</span>              connection<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'welcome to server!'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connection success!'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>              connection<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'please go out!'</span><span class="token punctuation">)</span>      <span class="token keyword">except</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">:</span>          <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'time out'</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># client.py</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> time <span class="token comment">#HOST = 'localhost' </span>HOST <span class="token operator">=</span> <span class="token string">'212.64.xx.xx'</span>  <span class="token comment">#服务器的公网IP</span>PORT <span class="token operator">=</span> <span class="token number">8001</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>  sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span>  time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'1'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="word，Excel，Visio，PPT"><a href="#word，Excel，Visio，PPT" class="headerlink" title="word，Excel，Visio，PPT"></a>word，Excel，Visio，PPT</h3><p><a href="https://otp.landian.vip/zh-cn/">使用 Office Tool Plus 安装</a></p><h2 id="相关库安装"><a href="#相关库安装" class="headerlink" title="相关库安装"></a>相关库安装</h2><h3 id="vs缺少HDF5-dll"><a href="#vs缺少HDF5-dll" class="headerlink" title="vs缺少HDF5.dll"></a>vs缺少HDF5.dll</h3><ul><li><a href="https://www.hdfgroup.org/register/">去官网下载</a>安装好程序</li><li>将环境变量修改好</li></ul><h3 id="使用python转化word"><a href="#使用python转化word" class="headerlink" title="使用python转化word"></a>使用python转化word</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> pickle<span class="token keyword">import</span> re<span class="token keyword">import</span>  codecs<span class="token keyword">import</span> string<span class="token keyword">import</span> shutil<span class="token keyword">from</span> win32com <span class="token keyword">import</span> client <span class="token keyword">as</span> wc<span class="token keyword">import</span> docx  <span class="token keyword">def</span> <span class="token function">doSaveAas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    word <span class="token operator">=</span> wc<span class="token punctuation">.</span>Dispatch<span class="token punctuation">(</span><span class="token string">'Word.Application'</span><span class="token punctuation">)</span>    doc <span class="token operator">=</span> word<span class="token punctuation">.</span>Documents<span class="token punctuation">.</span>Open<span class="token punctuation">(</span><span class="token string">u'E:\code\\xxxx.doc'</span><span class="token punctuation">)</span>        <span class="token comment"># 目标路径下的文件</span>    doc<span class="token punctuation">.</span>SaveAs<span class="token punctuation">(</span><span class="token string">u'E:\\code\\hhhhhhhh.docx'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 转化后路径下的文件    </span>    doc<span class="token punctuation">.</span>Close<span class="token punctuation">(</span><span class="token punctuation">)</span>    word<span class="token punctuation">.</span>Quit<span class="token punctuation">(</span><span class="token punctuation">)</span> doSaveAas<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取word</span><span class="token keyword">from</span> docx <span class="token keyword">import</span> Document<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="mysql服务问题"><a href="#mysql服务问题" class="headerlink" title="mysql服务问题"></a>mysql服务问题</h3><p>4.输入mysqld –initialize-insecure –user&#x3D;mysql<br>5.然后输入mysqld –install mysql（这一步和博客不同）<br>6.net start mysql</p><h3 id="win10-自动更新"><a href="#win10-自动更新" class="headerlink" title="win10 自动更新"></a>win10 自动更新</h3><p>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\wuauserv</p><h4 id="pycharm-tqdm-bug"><a href="#pycharm-tqdm-bug" class="headerlink" title="pycharm tqdm bug"></a>pycharm tqdm bug</h4><p><a href="https://blog.csdn.net/qq_40177564/article/details/107143701">https://blog.csdn.net/qq_40177564/article/details/107143701</a></p><p>编码问题</p><h3 id="python-cuda-使用GPU"><a href="#python-cuda-使用GPU" class="headerlink" title="python cuda 使用GPU"></a>python cuda 使用GPU</h3><p>unzip 解压出问题unzip -O GBK </p><h4 id="ModuleNotFoundError-No-module-named-‘mpi4py’"><a href="#ModuleNotFoundError-No-module-named-‘mpi4py’" class="headerlink" title="ModuleNotFoundError: No module named ‘mpi4py’"></a>ModuleNotFoundError: No module named ‘mpi4py’</h4>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux 使用杂记</title>
      <link href="/2021/05/04/cs/linux-shi-yong-za-ji/"/>
      <url>/2021/05/04/cs/linux-shi-yong-za-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>!Cwr|Mxd3j5&#x3D;m7~N</p><p>sudo firewall-cmd –zone&#x3D;public –add-port&#x3D;9091&#x2F;tcp –permanent</p></blockquote><ol><li>端口</li></ol><p>netstat -ntlp</p><p>netstat -anp |grep 3306</p><ol start="2"><li>编码bug</li></ol><p>xhsell 删除键出现^H 在属性，键盘中把 编码方式都选择为ASCII码</p><ol start="3"><li>解决ubuntu中自动补全的问题</li></ol><p>最近在学习配置hadoop环境，创建了一个linux新用户，本来想按↑键使用历史命令的，结果发现不能用了，在网上找到解决方法之后，在这分享一下。</p><p>原因可能是Linux 下的命令环境问题，我尝试用 bash 即可解决；<br>出现上述问题的时候，命令行只显示一个提示符：</p><pre class="line-numbers language-none"><code class="language-none">$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1、可以直接输入：</p><pre class="line-numbers language-none"><code class="language-none">bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 bash 模式输入命令；<br>2、输入：</p><pre class="line-numbers language-none"><code class="language-none">chsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Login Shell [*]后输入</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可，以后每次连接都会使用 bash </p><ol start="4"><li>conda问题</li></ol><blockquote><p>当前环境下没有conda，但是别的环境下有，可以将别人的conda环境加入自己当前的环境</p><p>echo ‘export PATH&#x3D;”&#x2F;home&#x2F;dell&#x2F;anaconda3&#x2F;bin:$PATH”‘&gt;&gt;~&#x2F;.bashrc</p><p>加入就能用了</p></blockquote><ol start="5"><li>unzip解压中文乱码，使用unar</li><li></li></ol><p>查看端口情况</p><blockquote><p>netstat -ap | grep 8080<br>查看进程情况<br>ps -aux | grep jupyter</p></blockquote><p>du -h –max-depth&#x3D;0查看当前文件夹占用大小<br>df -h查看磁盘空间</p><p>ssh -N -f -L localhost:8889:localhost:8889 -p 9922 <a href="mailto:&#x6c;&#x77;&#120;&#x40;&#49;&#53;&#x34;&#x2e;&#x38;&#46;&#x31;&#x35;&#53;&#x2e;&#x35;&#x31;">&#x6c;&#x77;&#120;&#x40;&#49;&#53;&#x34;&#x2e;&#x38;&#46;&#x31;&#x35;&#53;&#x2e;&#x35;&#x31;</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-L</span> <span class="token number">10048</span>:localhost:9999 <span class="token parameter variable">-p</span> <span class="token number">7200</span> <span class="token number">10.181</span>.6.196  <span class="token parameter variable">-u</span> leiyoubo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>open <a href="mailto:&#108;&#x77;&#x78;&#x40;&#49;&#53;&#x34;&#46;&#56;&#46;&#x31;&#x35;&#53;&#x2e;&#x35;&#x31;">&#108;&#x77;&#x78;&#x40;&#49;&#53;&#x34;&#46;&#56;&#46;&#x31;&#x35;&#53;&#x2e;&#x35;&#x31;</a> 9922</p><p>jobs ：查看后台程序<br>fg 【num】 ：将后台程序提前<br>watch -n 10 xxx xxx </p><blockquote><p>python train.py –batch 4 –epochs 100 –data .&#x2F;data&#x2F;underwater.yaml –weights .&#x2F;weights&#x2F;yolov5x.pt –img-size 1280 –cfg yolov5x.yaml –device 0</p></blockquote><p>修改主机名</p><blockquote><p>vim &#x2F;etc&#x2F;hostname</p></blockquote><p>Mysql01</p><p>然后执行<code>service network restart</code> 即可修改主机名称</p><h4 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h4><blockquote><p>systemctl status firewalld  查看状态</p><p>关闭防火墙：</p><p>systemctl disable firewalld</p><p>systemctl stop firewalld</p><p>重启防火墙：</p><p>systemctl start firewalld</p></blockquote><h4 id="修改yun配置"><a href="#修改yun配置" class="headerlink" title="修改yun配置"></a>修改yun配置</h4><p>虚拟机本地yum库配置方式参考： </p><p>1、把rhel-server-7.4-x86_64-dvd.iso 文件     复制到&#x2F;root目录下</p><p>2、然后mkdir -p &#x2F;mnt&#x2F;redhat7.4</p><p>3、执行mount -o loop &#x2F;root&#x2F;rhel-server-7.4-x86_64-dvd.iso &#x2F;mnt&#x2F;redhat7.4</p><p>4、然后，# vi &#x2F;etc&#x2F;yum.repos.d&#x2F;local.repo</p><p>[local-media]</p><p>name&#x3D;CentOS-7.4-Media</p><p>baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt&#x2F;redhat7.4&#x2F;</p><p>gpgcheck&#x3D;0</p><p>enabled&#x3D;1</p><p>\5. 执行yum list 查看yum库是否存在</p><p>![img](&#x2F;BlogImgs&#x2F;linux 使用杂记&#x2F;clip_image002.jpg)</p><p>\6. 尝试安装组件：yum install -y unzip zip</p><p>![img](&#x2F;BlogImgs&#x2F;linux 使用杂记&#x2F;clip_image004.jpg)</p><p>注意：这是在虚拟机的情况下，应该是安装的不全会导致有的东西找不到，所以需要用镜像再重新配置一遍。</p><h4 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h4><p><a href="https://www.linuxprobe.com/linux-creat-group.html">相关链接</a></p><blockquote><p>创建用户组 groupadd -g 344 bqh，一个用户组具有一个id，允许用户组有不同的id</p></blockquote><p>A、LINUX创建用户的命令</p><blockquote><p> useradd -g test -d &#x2F;home&#x2F;test1 -s &#x2F;bin&#x2F;bash -m test1</p></blockquote><p>注解：-g  所属组 -d 家目录 -s 所用的SHELL </p><p>删除用户命令</p><blockquote><p>userdel -r test1</p></blockquote><p>创建密码命令</p><blockquote><p> passwd</p></blockquote><p>B、查看linux下用户及用户组查看命令</p><p>察看 &#x2F;etc&#x2F;group文件</p><p>用户信息查看用cat &#x2F;etc&#x2F;passwd |cut -f 1 -d </p><blockquote><p>查看用户组的情况</p><p>more &#x2F;etc&#x2F;passwd |grep mysql</p></blockquote><p>例如：</p><p>useradd -g mysql -d &#x2F;home&#x2F;mysqltest -s &#x2F;bin&#x2F;bash -m mysqltest</p><p>userdel -rf mysqltest</p><p>passwd mysqltest</p><p>![img](&#x2F;BlogImgs&#x2F;linux 使用杂记&#x2F;clip_image002.jpg)</p><p>B、linux下用户组命令：</p><p>新建组</p><p>groupadd 组名（以A为例）&#x2F;&#x2F;创建组A</p><p>创建用户的同时加入某个组</p><p>useradd -g 组名（以A为例） 用户名（以B为例）&#x2F;&#x2F;创建用户A，并将其加入组B</p><p>给已有的用户增加工作组</p><p>usermod -g 组名（A） 用户名（B）</p><p>或者gpasswd -a 用户名 组名</p><p>永久性删除用户</p><p>userdel 用户名（A）&#x2F;&#x2F;删除用户A</p><p>groupdel 组名（B）&#x2F;&#x2F;删除组B</p><p>![image-20211030153848882](&#x2F;BlogImgs&#x2F;linux 使用杂记&#x2F;image-20211030153848882.png)</p><p>![image-20211030153855820](&#x2F;BlogImgs&#x2F;linux 使用杂记&#x2F;image-20211030153855820.png)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>conda</title>
      <link href="/2021/05/04/cs/conda/"/>
      <url>/2021/05/04/cs/conda/</url>
      
        <content type="html"><![CDATA[<p>激活环境</p><blockquote><p>conda activate py3.6</p></blockquote><p>导出当前环境</p><blockquote><p>conda env export &gt; py3.6.yaml</p><p>conda list -e &gt; requirements.txt</p></blockquote><p>导入当前环境</p><blockquote><p>conda env create -f py3.6.yaml</p><p>conda install –yes –file requirements.txt</p></blockquote><p>创建相同环境</p><blockquote><p>conda create -n new_name –clone base</p></blockquote><blockquote><p>conda remove –name xxx –all</p></blockquote><p>升级cuda</p><blockquote><p>conda install pytorch torchvision torchaudio cudatoolkit&#x3D;11.1 -c pytorch -c conda-forge</p></blockquote><blockquote><p>conda env list</p></blockquote><p><a href="https://blog.csdn.net/yuanjiaqi_k/article/details/116237654?spm=1001.2014.3001.5501">https://blog.csdn.net/yuanjiaqi_k/article/details/116237654?spm=1001.2014.3001.5501</a></p><p>激活环境</p><blockquote><p>conda activate py3.6</p></blockquote><p>导出当前环境</p><blockquote><p>conda env export &gt; py3.6.yaml</p></blockquote><p>导入当前环境</p><blockquote><p>conda env create -f py3.6.yaml</p></blockquote><p>创建相同环境<br>conda create -n new_name –clone base</p><blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">conda create -n your_env_name python=x.x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>conda remove –name xxx –all</p><p>升级cuda<br>conda install pytorch torchvision torchaudio cudatoolkit&#x3D;11.1 -c pytorch -c conda-forge</p><p>jupyter 选择环境</p><p>首先，安装nb_conda_kernels包:<br><code>conda install nb_conda_kernels</code></p><blockquote><p> export PATH&#x3D;$PATH:&#x2F;home&#x2F;vincent&#x2F;anaconda3&#x2F;bin</p></blockquote><p>conda install nb_conda</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PYQT散装知识</title>
      <link href="/2021/05/02/cs/pyqt-san-zhuang-zhi-shi/"/>
      <url>/2021/05/02/cs/pyqt-san-zhuang-zhi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>layoutStretch &#x2F;&#x2F; 可以设置布局的比列  1,9</p></blockquote><blockquote><p>frameShape 设置边框</p></blockquote><blockquote><p>wordWarp &#x2F;&#x2F; 换行</p></blockquote><blockquote><p> pyuic5 simpleDialog.ui &gt;ui_simpleDialog.py</p></blockquote><blockquote><p>pyuic5 simpleDialog.ui &gt; ui_simpleDialog.py<br>pyuic5 -o ui.py bus_direct.ui</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用方法</title>
      <link href="/2021/04/29/cs/shi-yong-fang-fa/"/>
      <url>/2021/04/29/cs/shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Cmd-Markdown-简明语法手册"><a href="#Cmd-Markdown-简明语法手册" class="headerlink" title="Cmd Markdown 简明语法手册"></a>Cmd Markdown 简明语法手册</h1><p>标签： Cmd-Markdown</p><hr><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 ~~ 表示中划线，也就是<del>这样的</del></p><p>使用 * 和 ** 表示斜体和粗体。</p><p>示例：</p><p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p><h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 &#x3D;&#x3D;&#x3D; 表示一级标题，使用 — 表示二级标题。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">这是一个一级标题&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;这是一个二级标题--------------------------------------------------### 这是一个三级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p><h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p><p>示例：</p><p>这是去往 <a href="http://ghosertblog.github.com/">本人博客</a> 的链接。</p><h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p><p>示例：</p><ul><li>无序列表项 一</li><li>无序列表项 二</li><li>无序列表项 三</li></ul><h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p><p>示例：</p><ol><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p><p>示例：</p><blockquote><p>野火烧不尽，春风吹又生。</p></blockquote><h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码&#96; 表示行内代码块。</p><p>示例：</p><p>让我们聊聊 <code>html</code>。</p><h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p><p>示例：</p><pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p><p>示例：</p><h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p><p>[TOC]</p><h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p><p>标签： 数学 英语 Markdown</p><p>或者</p><p>Tags： 数学 英语 Markdown</p><h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p><p><del>这是一段错误的文本。</del></p><h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p><p>这是一个注脚[^footnote]的样例。</p><p>这是第二个注脚[^footnote2]的样例。</p><h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p><p>质能守恒方程可以用一个很简洁的方程式 $E&#x3D;mc^2$ 来表达。</p><p>$$ 表示整行公式：</p><p>$$\sum_{i&#x3D;1}^n a_i&#x3D;0$$</p><p>$$f(x_1,x_x,\ldots,x_n) &#x3D; x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><p>$$\sum^{j-1}<em>{k&#x3D;0}{\widehat{\gamma}</em>{kj} z_k}$$</p><p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p><h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p><p>非代码示例：</p><pre class="line-numbers language-none"><code class="language-none">$ sudo apt-get install vim-gnome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Python 示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@requires_authorization</span><span class="token keyword">def</span> <span class="token function">somefunc</span><span class="token punctuation">(</span>param1<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> param2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''A docstring'''</span>    <span class="token keyword">if</span> param1 <span class="token operator">></span> param2<span class="token punctuation">:</span> <span class="token comment"># interesting</span>        <span class="token keyword">print</span> <span class="token string">'Greater'</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>param2 <span class="token operator">-</span> param1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token triple-quoted-string string">'''interpreter... prompt'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*** nth element in the fibonacci series.* @param n >= 0* @return the nth element, >= 0.*/</span><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> tmp<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">+=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> Start<span class="token operator">:</span><span class="token operator">></span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>zybuluo<span class="token punctuation">.</span>comio<span class="token operator">=></span>inputoutput<span class="token operator">:</span> verificationop<span class="token operator">=></span>operation<span class="token operator">:</span> Your Operationcond<span class="token operator">=></span>condition<span class="token operator">:</span> Yes or No<span class="token operator">?</span>sub<span class="token operator">=></span>subroutine<span class="token operator">:</span> Your Subroutinee<span class="token operator">=></span>endst<span class="token operator">-</span><span class="token operator">></span>io<span class="token operator">-</span><span class="token operator">></span>op<span class="token operator">-</span><span class="token operator">></span>cond<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>e<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>sub<span class="token operator">-</span><span class="token operator">></span>io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><pre class="line-numbers language-seq" data-language="seq"><code class="language-seq">Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><pre class="line-numbers language-seq" data-language="seq"><code class="language-seq">Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p><pre class="line-numbers language-gantt" data-language="gantt"><code class="language-gantt">title 项目开发流程section 项目确定    需求分析       :a1, 2016-06-22, 3d    可行性报告     :after a1, 5d    概念验证       : 5dsection 项目实施    概要设计      :2016-07-05  , 5d    详细设计      :2016-07-08, 10d    编码          :2016-07-15, 10d    测试          :2016-07-22, 5dsection 发布验收    发布: 2d    验收: 3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><pre class="line-numbers language-graphLR" data-language="graphLR"><code class="language-graphLR">A[Hard edge] --&gt;|Link text| B(Round edge)B --&gt; C&#123;Decision&#125;C --&gt;|One| D[Result one]C --&gt;|Two| E[Result two]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><pre class="line-numbers language-sequence" data-language="sequence"><code class="language-sequence">Alice-&gt;John: Hello John, how are you?loop every minute    John--&gt;Alice: Great!end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table><thead><tr><th>项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td>计算机</td><td align="right">$1600</td><td align="center">5</td></tr><tr><td>手机</td><td align="right">$12</td><td align="center">12</td></tr><tr><td>管线</td><td align="right">$1</td><td align="center">234</td></tr></tbody></table><h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）</code></pre><h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><table>    <tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></table><h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p><pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p><p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p><pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p><p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a> 官方网站。</p><h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p><pre><code>- [ ] **Cmd Markdown 开发**    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率    - [ ] 支持以 PDF 格式导出文稿    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)    - [x] 改进 LaTex 功能        - [x] 修复 LaTex 公式渲染问题        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)- [ ] **七月旅行准备**    - [ ] 准备邮轮上需要携带的物品    - [ ] 浏览日本免税店的物品    - [x] 购买蓝宝石公主号七月一日的船票</code></pre><p>对应显示如下待办事宜 Todo 列表：</p><ul><li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul><li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li><li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li><li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul><li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li><li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li></ul></li></ul></li><li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul><li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li><li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li><li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li></ul></li></ul><p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p><p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机相关 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
